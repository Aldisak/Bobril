import * as b from "bobril";
import * as Font from "bobwai--font";

export * from "./textStyles";
export * from "./shadowStyles";
export * from "./spacing";
export * from "./validationError";

namespace localVariables {
    export const unstyledLinkColor: string = "#000";
}

export function getUnselectable(): b.CSSInlineStyles {
    return {
        userSelect: "none",
        cursor: "default",
    };
}

export function getSelectable(): b.CSSInlineStyles {
    return {
        userSelect: "text", // IE seem not support 'auto'
        cursor: "default",
    };
}

export function getClickableElement(): b.CSSInlineStyles {
    return {
        ...getUnselectable(),
        cursor: "pointer",
        outline: "0 !important",
    };
}

export function getClickableElementDisabled(): b.CSSInlineStyles {
    return {
        cursor: "default",
    };
}

export function getShadowBottomRightWithBorder(bottomRightWithBorderColor?: string): b.CSSInlineStyles {
    if (!bottomRightWithBorderColor) {
        bottomRightWithBorderColor = "rgba(0,0,0,0.20)";
    }
    return {
        border: "1px solid " + bottomRightWithBorderColor,
        boxShadow: "0px 1px 3px " + bottomRightWithBorderColor,
        borderCollapse: "separate",
    };
}

export function getUnstyledList(): b.CSSInlineStyles {
    return {
        listStyle: "none",
        margin: 0,
        padding: 0,
    };
}

export function getUnstyledLink(): b.CSSInlineStyles {
    return {
        textDecoration: "none",
        color: localVariables.unstyledLinkColor,
    };
}

export function lineEllipsis(): b.CSSInlineStyles {
    return {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
    };
}

export function centerVerticalParent(parentMinHeight: number | string): (styles: b.CSSInlineStyles, pseudo: b.CSSPseudoStyles) => void {
    return (style: b.CSSInlineStyles, pseudo: b.CSSPseudoStyles) => {
        style.fontSize = "0";
        pseudo.before = getCenterVerticalParentPseudoStyle(parentMinHeight);
    };
}

export function centerVerticalRuntime(
    children: b.IBobrilNode[],
    parentMinHeight: number | string,
    ...parentStyles: b.IBobrilStyle[]
): b.IBobrilNode {
    return centerVerticalRuntimeEx(children, false, parentMinHeight, parentStyles);
}

export function centerVerticalRuntimeEx(
    children: b.IBobrilNode[],
    isChildAsBlock: boolean,
    parentMinHeight: number | string,
    ...parentStyles: b.IBobrilStyles[]
): b.IBobrilNode {
    // wrap children into center inline elements
    let childStyle: b.CSSInlineStyles = {};
    centerVerticalChildInlineBlock()(childStyle);
    if (isChildAsBlock) {
        childStyle.width = "100%";
    }
    let childrenClone = children.map((child) => {
        return b.styledDiv(child, childStyle);
    });
    // create pseudoelement as real bobril node
    childrenClone.unshift(b.styledDiv("", getCenterVerticalParentPseudoStyle(parentMinHeight)));

    return b.styledDiv(childrenClone, parentStyles, {
        fontSize: 0,
    });
}

function getCenterVerticalParentPseudoStyle(parentMinHeight: number | string): b.CSSInlineStyles {
    return {
        content: "",
        minHeight: parentMinHeight,
        display: "inline-block",
        width: 0,
        verticalAlign: "middle",
    };
}

export function centerVerticalChildInlineBlock(): (styles: b.CSSInlineStyles) => void {
    return (style: b.CSSInlineStyles) => {
        style.display = "inline-block";
        style.verticalAlign = "middle";
        style.fontSize = Font.FontSizeDefault;
        style.boxSizing = "border-box";
    };
}

export function centerVerticalChild(): b.CSSStyles {
    return [
        {
            width: "100%",
        },
        centerVerticalChildInlineBlock(),
    ];
}

export function createPlaceholderStyle(style: b.IBobrilStyle): { [name: string]: any } {
    return {
        ":-webkit-input-placeholder": style,
        ":-moz-placeholder": style,
        "-ms-input-placeholder": style,
    };
}
