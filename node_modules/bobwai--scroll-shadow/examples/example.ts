import * as b from "bobril";
import * as Viewer from "bobwai--viewer-container";
import * as Label from "bobwai--label";
import * as ScrollShadow from "../src/lib";
import * as Example from "bobwai--example";
import * as Button from "bobwai--button";
import * as Checkbox from "bobwai--checkbox";
import * as Combobox from "bobwai--combobox";
import * as Spinner from "bobwai--spinner";

const spacer = { tag: "div", style: { margin: "15px", display: "inline-block" } };
let isScrollbarOffsetOverflowActive: boolean = true;
let hasScrollbarVisibilityChanged: boolean | undefined = true;
let hasScrollWrapperOverflowHidden: boolean | undefined;
let hasContentFullHeight: boolean = false;
const loremIpsum =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. " + "Maecenas interdum nulla velit, eget euismod mauris pretium molestie.";
let scrollTop: number | undefined = undefined;
let initScrollTop: number | undefined = 50;
let hasLongContent = false;
let hasWideContent = false;
let hasWideParent = false;
let hasLongParent = false;

let testContainerWidth = 500;
let testContainerHeight = 150;
let scrollShadowType: ScrollShadow.ScrollShadowType | undefined = undefined;
let leftShadowOffset = 0;
let fasterSpinners = false;

const offsetTesterData: ScrollShadow.IData = {
    content: getOffsetMockContent(),
    contentHeight: undefined,
    contentMaxHeight: undefined,
    contentMinHeight: undefined,
    wrapperBeforeHeight: undefined,
    wrapperBeforeColor: undefined,
    isWithSidePadding: undefined,
    isWithSidePaddingForAsterisks: undefined,
    scrollTop: undefined,
    /** save value across browsers is at least 20 */
    scrollbarOffset: 25,
    onScrollbarVisibilityChanged: getOnScrollbarVisibilityChanged(),
};

function getOnScrollbarVisibilityChanged(): (v: boolean) => void {
    return (v: boolean) => {
        offsetTesterConsole += ` onScrollbarVisibilityChanged: ${v} `;
        b.invalidate();
    };
}
let offsetTesterConsole: string = "";

const scrollInfoFnc: ((scrollInfo: ScrollShadow.IScrollInfo) => void) | undefined = (info: ScrollShadow.IScrollInfo) => {
    scrollInfo = info;
    b.invalidate();
};

const verticalScrollInfoFnc: ((scrollInfo: ScrollShadow.IVerticalScrollInfo) => void) | undefined = (
    info: ScrollShadow.IVerticalScrollInfo
) => {
    verticalScrollInfo = info;
    b.invalidate();
};

let scrollInfo: ScrollShadow.IScrollInfo;
let verticalScrollInfo: ScrollShadow.IVerticalScrollInfo;

function container(header: string, a: any[], highlightedDescription?: string, model?: string) {
    return Viewer.create({
        header: header,
        highlightedDescription,
        model,
        content: {
            tag: "div",
            style: { padding: "15px", position: "relative" },
            children: a.reduce((prev, current) => {
                if (prev.length > 0) {
                    prev.push(spacer);
                }
                prev.push(current);
                return prev;
            }, []),
        },
    });
}

Example.init(
    {
        preferredHeight: Example.PreferredHeight.Medium,
    },
    () => {
        return [
            container("150px wrapper, 300px content", [
                ScrollShadow.create({
                    content: b.styledDiv(null, { height: 300, background: "white" }),
                    contentHeight: 150,
                }),
            ]),
            container("150px wrapper with before place (e.g. for table header)", [
                ScrollShadow.create({
                    content: b.styledDiv(null, { height: 300, background: "white" }),
                    contentHeight: 150,
                    wrapperBeforeHeight: 50,
                    wrapperBeforeColor: "white",
                }),
            ]),
            container('200px wrapper, 1000px content with background "cyan"', [
                ScrollShadow.create({
                    content: b.styledDiv(null, { height: 1000, background: "cyan" }),
                    contentHeight: 200,
                }),
            ]),
            container("without additional padding", [
                ScrollShadow.create({
                    content: b.styledDiv(Label.create({ children: ["Label with asterisk"], withAsterisk: true }), { height: 1000 }),
                    contentHeight: 100,
                }),
            ]),
            container("isWithSidePaddingForAsterisks == true", [
                ScrollShadow.create({
                    content: b.styledDiv(Label.create({ children: ["Label with asterisk"], withAsterisk: true }), { height: 1000 }),
                    contentHeight: 100,
                    isWithSidePaddingForAsterisks: true,
                }),
            ]),
            container("isWithSidePadding == true", [
                ScrollShadow.create({
                    content: b.styledDiv(Label.create({ children: ["Label with asterisk"], withAsterisk: true }), { height: 1000 }),
                    contentHeight: 100,
                    isWithSidePadding: true,
                }),
            ]),
            container("wrapper size is 100% of parent", [
                b.styledDiv(
                    ScrollShadow.create({
                        content: b.styledDiv(null, { height: 300, background: "white" }),
                    }),
                    { height: 150 }
                ),
            ]),
            container("wrapper size is 100% of parent with before place", [
                b.styledDiv(
                    ScrollShadow.create({
                        content: b.styledDiv(null, { height: 300, background: "white" }),
                        wrapperBeforeColor: "white",
                        wrapperBeforeHeight: 50,
                    }),
                    { height: 150 }
                ),
            ]),
            container("wrapper with maxHeight 300px and short text", [
                b.styledDiv(
                    ScrollShadow.create({
                        content: b.styledDiv(loremIpsum, { maxHeight: 300, background: "yellow" }),
                    }),
                    { height: 150 }
                ),
            ]),
            container("wrapper with maxHeight 300px and long text", [
                b.styledDiv(
                    ScrollShadow.create({
                        content: b.styledDiv(makeDivs(loremIpsum), { maxHeight: 300, background: "yellow" }),
                    }),
                    { height: 150 }
                ),
            ]),
            container("wrapper with content min height 150px and long text", [
                b.styledDiv(
                    ScrollShadow.create({
                        contentMinHeight: 150,
                        content: b.styledDiv(makeDivs(loremIpsum), { background: "yellow" }),
                    }),
                    { height: 250 }
                ),
            ]),
            container("0px wrapper", [
                b.styledDiv(
                    ScrollShadow.create({
                        content: b.styledDiv(makeDivs(loremIpsum), { maxHeight: 300, background: "yellow" }),
                        contentHeight: 0,
                    }),
                    { height: 150 }
                ),
            ]),
            container("with scrollTop", [
                b.styledDiv([
                    Button.create({
                        label: "set scrollTop to 50",
                        onClick: () => {
                            scrollTop = 50;
                            b.invalidate();
                        },
                    }),
                    Button.create({
                        label: "set scrollTop to 0",
                        onClick: () => {
                            scrollTop = 0;
                            b.invalidate();
                        },
                    }),
                    Button.create({ label: "invalidate", onClick: b.invalidate }),
                ]),
                b.styledDiv(
                    ScrollShadow.create({
                        content: b.styledDiv(makeDivs(loremIpsum), { maxHeight: 300, background: "yellow" }),
                        contentHeight: 200,
                        scrollTop: getAndRemoveScrollTop(),
                    }),
                    { height: 250 }
                ),
            ]),
            container(
                "Scrollbar offset, bottom border",
                [
                    Example.createControlPanel({
                        items: [
                            Example.createField({
                                fieldType: Example.FieldType.Note,
                                value: `Add extra space for vertical scrollbar
                            if scrollbar is active the space is reduced according to scrollbar size`,
                                label: "Scrollbar offset",
                            }),
                            Example.createField({
                                fieldType: Example.FieldType.Note,
                                value: `It makes sense only when offset is at least e.g. 20 - more then scroll width across browser`,
                                label: "Scrollbar offset",
                            }),
                            Example.createField({
                                fieldType: Example.FieldType.Checkbox,
                                value: hasContentFullHeight ? undefined : isScrollbarOffsetOverflowActive,
                                isDisabled: hasContentFullHeight,
                                onChange: (v) => {
                                    isScrollbarOffsetOverflowActive = v;
                                    offsetTesterData.content = getOffsetMockContent();
                                    b.invalidate();
                                },
                                fieldFactory: Checkbox.create,
                                label: "Test add content to see scrollbar",
                            }),
                            Example.createField({
                                fieldType: Example.FieldType.Checkbox,
                                value: isScrollbarOffsetOverflowActive ? undefined : hasContentFullHeight,
                                isDisabled: isScrollbarOffsetOverflowActive,
                                onChange: (v) => {
                                    hasContentFullHeight = v;
                                    offsetTesterData.content = getOffsetMockContent();
                                    b.invalidate();
                                },
                                fieldFactory: Checkbox.create,
                                label: "Test set 100% height for content",
                            }),
                            Example.createField({
                                labelWidth: 250,
                                fieldType: Example.FieldType.Checkbox,
                                value: hasScrollbarVisibilityChanged,
                                onChange: (v) => {
                                    hasScrollbarVisibilityChanged = v;
                                    if (v) {
                                        offsetTesterData.onScrollbarVisibilityChanged = getOnScrollbarVisibilityChanged();
                                    } else {
                                        offsetTesterData.onScrollPositionChanged = undefined;
                                    }
                                    b.invalidate();
                                },
                                fieldFactory: Checkbox.create,
                                label: "hasScrollbarVisibilityChanged event",
                            }),
                            Example.createField({
                                fieldType: Example.FieldType.Spinner,
                                value: offsetTesterData.scrollbarOffset,
                                onChange: (v) => {
                                    offsetTesterData.scrollbarOffset = v;
                                    b.invalidate();
                                },
                                fieldFactory: Spinner.create,
                                label: "Scrollbar offset",
                            }),
                            Example.createField({
                                fieldType: Example.FieldType.Checkbox,
                                labelWidth: 280,
                                value: offsetTesterData.hasBottomBorderWhenScrollable,
                                onChange: (v) => {
                                    offsetTesterData.hasBottomBorderWhenScrollable = v;
                                    b.invalidate();
                                },
                                fieldFactory: Checkbox.create,
                                label: "hasBottomBorderWhenScrollable",
                            }),
                            Example.createField({
                                fieldType: Example.FieldType.Checkbox,
                                labelWidth: 280,
                                value: offsetTesterData.isShadowFullWidth !== undefined ? offsetTesterData.isShadowFullWidth : true,
                                onChange: (v) => {
                                    offsetTesterData.isShadowFullWidth = v;
                                    b.invalidate();
                                },
                                fieldFactory: Checkbox.create,
                                label: "isShadowFullWidth (true by default)",
                            }),
                            Example.createSeparator(),
                            Example.createGroup({
                                name: "Test other combinations",
                                items: [
                                    Example.createField({
                                        fieldType: Example.FieldType.Spinner,
                                        value: offsetTesterData.contentHeight,
                                        onChange: (v) => {
                                            offsetTesterData.contentHeight = v;
                                            b.invalidate();
                                        },
                                        fieldFactory: Spinner.create,
                                        label: "Content height",
                                    }),
                                    Example.createField({
                                        fieldType: Example.FieldType.Spinner,
                                        value: offsetTesterData.contentMaxHeight,
                                        onChange: (v) => {
                                            offsetTesterData.contentMaxHeight = v;
                                            b.invalidate();
                                        },
                                        fieldFactory: Spinner.create,
                                        label: "Content max height",
                                    }),
                                    Example.createField({
                                        fieldType: Example.FieldType.Spinner,
                                        value: offsetTesterData.contentMinHeight,
                                        onChange: (v) => {
                                            offsetTesterData.contentMinHeight = v;
                                            b.invalidate();
                                        },
                                        fieldFactory: Spinner.create,
                                        label: "Content min height",
                                    }),
                                    Example.createField({
                                        fieldType: Example.FieldType.Spinner,
                                        value: offsetTesterData.wrapperBeforeHeight,
                                        onChange: (v) => {
                                            offsetTesterData.wrapperBeforeHeight = v;
                                            b.invalidate();
                                        },
                                        fieldFactory: Spinner.create,
                                        label: "Wrapper before height",
                                    }),
                                    Example.createField({
                                        fieldType: Example.FieldType.IColor,
                                        value: offsetTesterData.wrapperBeforeColor,
                                        onChange: (v) => {
                                            offsetTesterData.wrapperBeforeColor = v;
                                            b.invalidate();
                                        },
                                        fieldFactory: Spinner.create,
                                        label: "Wrapper before color",
                                    }),
                                    Example.createField({
                                        fieldType: Example.FieldType.Checkbox,
                                        value: offsetTesterData.isWithSidePadding,
                                        onChange: (v) => {
                                            offsetTesterData.isWithSidePadding = v;
                                            if (offsetTesterData.isWithSidePaddingForAsterisks) {
                                                offsetTesterData.isWithSidePaddingForAsterisks = undefined;
                                            }
                                            offsetTesterData.content = getOffsetMockContent();
                                            b.invalidate();
                                        },
                                        fieldFactory: Checkbox.create,
                                        label: "Is with side padding",
                                    }),
                                    Example.createField({
                                        fieldType: Example.FieldType.Checkbox,
                                        isDisabled: offsetTesterData.isWithSidePadding === true,
                                        value: offsetTesterData.isWithSidePaddingForAsterisks,
                                        onChange: (v) => {
                                            offsetTesterData.isWithSidePaddingForAsterisks = v;
                                            offsetTesterData.content = getOffsetMockContent();
                                            b.invalidate();
                                        },
                                        fieldFactory: Checkbox.create,
                                        label: "Is with side padding for asterisks",
                                    }),
                                    Example.createField({
                                        label: "Note",
                                        fieldType: Example.FieldType.Note,
                                        value: "If isWithSidePadding is set, isWithSidePaddingForAsterisk does not make sence",
                                    }),
                                ],
                            }),
                        ],
                    }),
                    b.styledDiv(ScrollShadow.create(offsetTesterData), {
                        height: 250,
                        background: "tomato",
                    }),
                ],
                undefined,
                offsetTesterConsole
            ),

            container("with init scrollTop 50px", [
                b.styledDiv(
                    ScrollShadow.create({
                        content: b.styledDiv(makeDivs(loremIpsum), { maxHeight: 300, background: "yellow" }),
                        contentHeight: 200,
                        scrollTop: getAndRemoveInitScrollTop(),
                    }),
                    { height: 250 }
                ),
            ]),
            container(
                "handleMouseWheelScroll set to true. Reaching min/max of scroll with mouse wheel do not scroll next parent scrollable element",
                [
                    ScrollShadow.create({
                        content: b.styledDiv(null, { height: 300, background: "white" }),
                        contentHeight: 150,
                        handleMouseWheelScroll: true,
                    }),
                ]
            ),
            container(
                "Scroll info - onScrollPositionChanged (horizontal), onVerticalScrollPositionChanged",
                [
                    Example.createControlPanel({
                        items: [
                            Example.createField({
                                labelWidth: 250,
                                fieldFactory: Checkbox.create,
                                fieldType: Example.FieldType.Checkbox,
                                value: hasLongContent,
                                onChange: (v) => {
                                    hasLongContent = v;
                                    b.invalidate();
                                },
                                label: "Has long content",
                            }),
                            Example.createField({
                                labelWidth: 250,
                                fieldFactory: Checkbox.create,
                                fieldType: Example.FieldType.Checkbox,
                                value: hasWideContent,
                                onChange: (v) => {
                                    hasWideContent = v;
                                    b.invalidate();
                                },
                                label: "Has wide content",
                            }),
                            Example.createField({
                                labelWidth: 250,
                                fieldFactory: Checkbox.create,
                                fieldType: Example.FieldType.Checkbox,
                                value: hasLongParent,
                                onChange: (v) => {
                                    hasLongParent = v;
                                    b.invalidate();
                                },
                                label: "Has long parent",
                            }),
                            Example.createField({
                                labelWidth: 250,
                                fieldFactory: Checkbox.create,
                                fieldType: Example.FieldType.Checkbox,
                                value: hasWideParent,
                                onChange: (v) => {
                                    hasWideParent = v;
                                    b.invalidate();
                                },
                                label: "Has wide parent",
                            }),
                            Example.createField({
                                label: "Actual scroll info (horizontal)",
                                fieldType: Example.FieldType.Note,
                                value: JSON.stringify(scrollInfo),
                            }),
                            Example.createField({
                                label: "Actual scroll info (vertical)",
                                fieldType: Example.FieldType.Note,
                                value: JSON.stringify(verticalScrollInfo),
                            }),
                        ],
                    }),
                    b.styledDiv(
                        ScrollShadow.create({
                            content: b.styledDiv(hasLongContent ? makeDivs(loremIpsum) : "some short content", {
                                background: "yellow",
                                width: hasWideContent ? 2000 : 1000,
                                height: hasLongContent ? 600 : 150,
                            }),
                            onScrollPositionChanged: scrollInfoFnc,
                            onVerticalScrollPositionChanged: verticalScrollInfoFnc,
                        }),
                        { width: hasWideParent ? 650 : 500, height: hasLongParent ? 300 : 150 }
                    ),
                ],
                "This callback should be registered only before init - later registration will be not accepted"
            ),
            container("hasScrollWrapperOverflowHidden", [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            labelWidth: 250,
                            fieldFactory: Checkbox.create,
                            fieldType: Example.FieldType.Checkbox,
                            value: hasScrollWrapperOverflowHidden,
                            onChange: (v) => {
                                hasScrollWrapperOverflowHidden = v;
                                b.invalidate();
                            },
                            label: "hasScrollWrapperOverflowHidden",
                        }),
                    ],
                }),
                b.styledDiv(
                    ScrollShadow.create({
                        hasScrollWrapperOverflowHidden,
                        content: b.styledDiv(
                            b.styledDiv("Some mock header - e.g. table sticky sorting header", {
                                position: "absolute",
                                top: 0,
                                background: "red",
                                height: 50,
                                width: 800,
                            }),
                            {
                                height: 300,
                                width: 800,
                                background: "yellow",
                            }
                        ),
                        contentHeight: 150,
                        wrapperBeforeHeight: 50,
                    }),
                    { width: 500 }
                ),
            ]),
            container("Shadow visibility testing", [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            labelWidth: 250,
                            customValueContent: Example.createComboEnum({
                                comboboxFactory: Combobox.create,
                                enum: ScrollShadow.ScrollShadowType,
                                value: scrollShadowType,
                                onChange: (v) => {
                                    scrollShadowType = v;
                                    b.invalidate();
                                },
                            }),
                            label: "Scroll shadow type",
                            note: "Default is vertical scroll shadow only. ",
                        }),
                        Example.createField({
                            labelWidth: 250,
                            fieldFactory: Spinner.create,
                            fieldType: Example.FieldType.Spinner,
                            value: testContainerWidth,
                            onChange: (v) => {
                                testContainerWidth = v;
                                b.invalidate();
                            },
                            label: "Content width",
                            step: fasterSpinners ? 20 : 1,
                            minValue: 0,
                        }),
                        Example.createField({
                            labelWidth: 250,
                            fieldFactory: Spinner.create,
                            fieldType: Example.FieldType.Spinner,
                            value: testContainerHeight,
                            onChange: (v) => {
                                testContainerHeight = v;
                                b.invalidate();
                            },
                            label: "Content height",
                            step: fasterSpinners ? 20 : 1,
                            minValue: 0,
                        }),
                        Example.createField({
                            labelWidth: 250,
                            fieldFactory: Spinner.create,
                            fieldType: Example.FieldType.Spinner,
                            value: leftShadowOffset,
                            onChange: (v) => {
                                leftShadowOffset = v;
                                b.invalidate();
                            },
                            label: "Left shadow offset",
                            step: fasterSpinners ? 20 : 1,
                            minValue: 0,
                        }),
                        Example.createField({
                            labelWidth: 250,
                            fieldFactory: Checkbox.create,
                            fieldType: Example.FieldType.Checkbox,
                            value: fasterSpinners,
                            onChange: (v) => {
                                fasterSpinners = v;
                                b.invalidate();
                            },
                            label: "Control panel's faster spinners",
                        }),
                        Example.createField({
                            label: "Actual scroll info (vertical)",
                            fieldType: Example.FieldType.Note,
                            value: JSON.stringify(verticalScrollInfo),
                        }),
                    ],
                }),
                b.styledDiv(
                    ScrollShadow.create({
                        content: b.styledDiv(hasLongContent ? makeDivs(loremIpsum) : "some short content", {
                            background: "yellow",
                            width: testContainerWidth,
                            height: testContainerHeight,
                        }),
                        scrollShadowType: scrollShadowType,
                        leftShadowOffset: leftShadowOffset,
                        onScrollPositionChanged: scrollInfoFnc,
                        onVerticalScrollPositionChanged: verticalScrollInfoFnc,
                    }),
                    { width: 500, height: 150 }
                ),
            ]),
        ];
    }
);

function getOffsetMockContent(): b.IBobrilNode {
    return b.styledDiv(
        isScrollbarOffsetOverflowActive
            ? [b.styledDiv(Label.create({ children: ["Label with asterisk"], withAsterisk: true })), makeDivs(loremIpsum)]
            : ["test", b.styledDiv(Label.create({ children: ["Label with asterisk"], withAsterisk: true }))],

        {
            background: "yellow",
        },
        hasContentFullHeight && { height: "100%" }
    );
}

function makeDivs(s: string): b.IBobrilChildren {
    const items: b.IBobrilChildren[] = [];
    s.split(" ").forEach((value: string) => {
        items.push(<b.IBobrilNode>{
            tag: "div",
            children: value,
        });
    });
    return items;
}

function getAndRemoveScrollTop(): number | undefined {
    const st = scrollTop;
    scrollTop = undefined;
    return st;
}

function getAndRemoveInitScrollTop(): number | undefined {
    const st = initScrollTop;
    initScrollTop = undefined;
    return st;
}
