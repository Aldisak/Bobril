import * as b from "bobril";
import { handleMouseWheelScroll } from "helpers--scroll-mouse-wheel";

export interface IData {
    content: b.IBobrilChildren;
    elementId?: string;
    scrollTop?: number;
    handleMouseWheelScroll?: boolean;
    scrollbarOffset?: number;
    /** horizontal scroll */
    onScrollPositionChanged?: (info: IScrollInfo) => void;
    /** vertical scroll */
    onVerticalScrollPositionChanged?: (info: IVerticalScrollInfo) => void;
    onVisibleContentWidthChanged?: (width: number) => void;
}

export interface IScrollInfo {
    horizontalScrollLeft: number;
    scrollableContentWidth: number;
    visibleContentWidth: number;
}

export interface IVerticalScrollInfo {
    visibleContentHeight: number;
    verticalScrollTop: number;
    scrollableContentHeight: number;
}

interface ICtx extends b.IBobrilCtx {
    data: IData;
    lastHorizontalScrollInfo: IScrollInfo;
    lastVerticalScrollInfo: IVerticalScrollInfo;
}

export const create = b.createComponent<IData>({
    init(ctx: ICtx, _me: b.IBobrilNode) {
        if (wantHorizontalScrollInfo(ctx.data) || wantVerticalScrollInfo(ctx.data)) {
            registerScrollInfoCallback(ctx);
        }
    },
    render(ctx: ICtx, me: b.IBobrilNode) {
        if (ctx.data.elementId) {
            me.attrs = { id: ctx.data.elementId };
        }
        me.children = ctx.data.content;
    },
    postInitDom(ctx: ICtx, _: b.IBobrilCacheNode, element: HTMLElement) {
        handleScroll(ctx, element);
        if (wantHorizontalScrollInfo(ctx.data) || wantVerticalScrollInfo(ctx.data)) {
            checkScrollPositionChange(ctx, element);
        }
    },
    postUpdateDom(ctx: ICtx, _: b.IBobrilCacheNode, element: HTMLElement) {
        handleScroll(ctx, element);
        if (wantHorizontalScrollInfo(ctx.data) || wantVerticalScrollInfo(ctx.data)) {
            checkScrollPositionChange(ctx, element);
        }
    },
    onMouseWheel(ctx: ICtx, event: b.IBobrilMouseWheelEvent): boolean {
        if (ctx.me.element !== undefined && ctx.data.handleMouseWheelScroll) {
            const element = <HTMLElement>ctx.me.element;
            return handleMouseWheelScroll(element, event);
        }
        return false;
    },
});

function handleScroll(ctx: b.IBobrilCtx, element: HTMLElement) {
    if (element && b.isNumber(ctx.data.scrollTop)) {
        element.scrollTop = ctx.data.scrollTop;
    }
}

function registerScrollInfoCallback(ctx: ICtx): void {
    ctx.lastHorizontalScrollInfo = {
        horizontalScrollLeft: 0,
        scrollableContentWidth: 0,
        visibleContentWidth: 0,
    };
    ctx.lastVerticalScrollInfo = {
        verticalScrollTop: 0,
        scrollableContentHeight: 0,
        visibleContentHeight: 0,
    };
    const onScroll = (info: b.IBobrilScroll | undefined) => {
        if (info && info.node && info.node.ctx === ctx) {
            const element = <HTMLElement>b.getDomNode(info.node);
            if (element) {
                checkScrollPositionChange(ctx, element);
            }
        }
    };
    b.addOnScroll(onScroll);
    b.addDisposable(ctx, () => {
        b.removeOnScroll(onScroll);
    });
}

function checkScrollPositionChange(ctx: ICtx, element: HTMLElement): void {
    if (ctx.data.onScrollPositionChanged !== undefined && element !== undefined) {
        const actualScrollInfo: IScrollInfo = {
            horizontalScrollLeft: element.scrollLeft,
            scrollableContentWidth: element.scrollWidth,
            visibleContentWidth: element.clientWidth,
        };
        if (
            actualScrollInfo.horizontalScrollLeft !== ctx.lastHorizontalScrollInfo.horizontalScrollLeft ||
            actualScrollInfo.scrollableContentWidth !== ctx.lastHorizontalScrollInfo.scrollableContentWidth ||
            actualScrollInfo.visibleContentWidth !== ctx.lastHorizontalScrollInfo.visibleContentWidth
        ) {
            ctx.lastHorizontalScrollInfo.horizontalScrollLeft = actualScrollInfo.horizontalScrollLeft;
            ctx.lastHorizontalScrollInfo.scrollableContentWidth = actualScrollInfo.scrollableContentWidth;
            ctx.lastHorizontalScrollInfo.visibleContentWidth = actualScrollInfo.visibleContentWidth;
            ctx.data.onScrollPositionChanged(actualScrollInfo);
        }
    }
    if (ctx.data.onVerticalScrollPositionChanged !== undefined && element !== undefined) {
        const actualScrollInfo: IVerticalScrollInfo = {
            verticalScrollTop: element.scrollTop,
            scrollableContentHeight: element.scrollHeight,
            visibleContentHeight: element.clientHeight,
        };
        if (
            actualScrollInfo.verticalScrollTop !== ctx.lastVerticalScrollInfo.verticalScrollTop ||
            actualScrollInfo.scrollableContentHeight !== ctx.lastVerticalScrollInfo.scrollableContentHeight ||
            actualScrollInfo.visibleContentHeight !== ctx.lastVerticalScrollInfo.visibleContentHeight
        ) {
            ctx.lastVerticalScrollInfo.verticalScrollTop = actualScrollInfo.verticalScrollTop;
            ctx.lastVerticalScrollInfo.scrollableContentHeight = actualScrollInfo.scrollableContentHeight;
            ctx.lastVerticalScrollInfo.visibleContentHeight = actualScrollInfo.visibleContentHeight;
            ctx.data.onVerticalScrollPositionChanged(actualScrollInfo);
        }
    }
}

function wantHorizontalScrollInfo(data: IData): boolean {
    return data.onScrollPositionChanged !== undefined;
}

function wantVerticalScrollInfo(data: IData): boolean {
    return data.onVerticalScrollPositionChanged !== undefined;
}
