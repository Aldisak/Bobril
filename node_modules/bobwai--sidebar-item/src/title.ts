import * as b from "bobril";
import * as c from "./constants";
import * as d from "./data";
import * as s from "./styles";
import * as font from "bobwai--font";
import * as Color from "bobwai--color";

export function create(data: d.IData): b.IBobrilNode {
    const styleList = [
        titleStyle,
        data.size === d.Size.Medium && titleMediumStyle,
        data.size === d.Size.Small && [titleSmallStyle, d.getIconContent(data) && titleSmallWithIconStyle],
        d.getIconContent(data) && titleWithIconStyle,
        isIndent(data) && titleWithIndentStyle,
        data.isDisabled && s.isDisabledChildrenStyle,
    ];

    return b.styledDiv([b.styledDiv(data.title), createSubtitle(data)], styleList);
}

function isSubtitle(data: d.IData): boolean {
    return data.subtitle !== undefined && data.subtitle.length > 0;
}

function isIndent(data: d.IData): boolean {
    return data.indentLevel !== undefined && data.indentLevel > 0;
}

function createSubtitle(data: d.IData): b.IBobrilChild {
    if (!isSubtitle(data)) {
        return undefined;
    }
    return b.styledDiv(
        data.subtitle,
        subtitleStyle,
        d.isError(data) && subtitleErrorStyle,
        d.isWarning(data) && subtitleWarningStyle,
        data.isActive && !d.isError(data) && subtitleSelectedStyle,
        data.isDisabled && subtitleDisabledStyle
    );
}

const titleStyle = b.styleDef(
    {
        verticalAlign: "middle",
        display: "inline-block",
        lineHeight: "16px",
        fontWeight: font.FontWeightBold,
    },
    {},
    "sidebarItemTitleStyle"
);

const subtitleStyle = b.styleDef(
    {
        fontWeight: font.FontWeightRegular,
        color: Color.Grey500,
        paddingTop: 3,
    },
    {},
    "sidebarItemSubtitleStyle"
);

const subtitleErrorStyle = b.styleDefEx(subtitleStyle, {
    color: Color.Error,
});

const subtitleWarningStyle = b.styleDefEx(subtitleStyle, {
    color: Color.Warning,
});

const subtitleSelectedStyle = b.styleDefEx(
    subtitleStyle,
    {
        color: Color.Grey600,
    },
    {},
    "sidebarItemSubtitleActiveStyle"
);

const subtitleDisabledStyle = b.styleDefEx(
    subtitleStyle,
    {
        color: Color.Basic,
    },
    {},
    "sidebarItemSubtitleErrorStyle"
);

const titleMediumStyle = b.styleDefEx(titleStyle, { fontWeight: font.FontWeightSemibold }, {}, "sidebarItemTitleMediumSizeStyle");

const titleWithIconStyle = b.styleDefEx(
    titleStyle,
    {
        marginLeft: c.iconPlusMarginWidth,
    },
    {},
    "sidebarItemTitleWithIconStyle"
);

const titleWithIndentStyle = b.styleDefEx(
    titleStyle,
    {
        marginLeft: c.indentWidth,
    },
    {},
    "sidebarItemTitleWithIndentStyle"
);

const titleSmallStyle = b.styleDefEx(
    titleStyle,
    {
        marginLeft: c.iconPlusMarginWidth,
        wordWrap: "break-word",
        maxWidth: c.smallMaxWidth,
        fontWeight: font.FontWeightRegular,
    },
    {},
    "sidebarItemTitleSmallStyle"
);

const titleSmallWithIconStyle = b.styleDefEx(
    titleSmallStyle,
    { marginLeft: c.iconPlusMarginWidth * 2 },
    {},
    "sidebarItemTitleSmallWithIconStyle"
);
