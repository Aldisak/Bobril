import * as b from "bobril";
import * as s from "./styles";
import * as d from "./data";
import * as Icon from "./icon";
import * as Indent from "./indent";
import * as Title from "./title";
import * as Counter from "./counter";
import * as Action from "./action";
import * as c from "./constants";
import * as mixins from "bobwai--style-mixins";

export const create = b.createComponent<d.IData>({
    id: "bobwai--sidebar-item",
    onClick(ctx: IContext): boolean {
        if (!ctx.data.isDisabled) {
            ctx.data.onClick(ctx.data);
        }
        return true;
    },
    onDrag(ctx: IContext): boolean {
        if (ctx.data.isDrag) {
            return false;
        }
        ctx.data.isDrag = true;
        b.invalidate(ctx);
        return false;
    },
    onDragEnd(ctx: IContext): boolean {
        ctx.data.isDrag = false;
        b.invalidate(ctx);
        return false;
    },
    render(ctx: IContext, me: b.IBobrilNode): void {
        me.children = [
            Icon.create(ctx.data),
            Indent.create(ctx.data),
            Title.create(ctx.data),
            Counter.create(ctx.data),
            Action.create(ctx.data),
        ];
        b.style(me, getStyle(ctx.data));
    },
    postInitDom(ctx: IContext, _me: b.IBobrilCacheNode, element: HTMLElement) {
        recalculatePadding(ctx.data, element);
    },
    postUpdateDomEverytime(ctx: IContext, _me: b.IBobrilCacheNode, element: HTMLElement) {
        recalculatePadding(ctx.data, element);
    },
});

export type IData = d.IData;
export const size = d.Size;
export const sidePadding = d.SidePadding;
export * from "./publicConstants";

interface IContext extends b.IBobrilCtx {
    data: d.IData;
}

function recalculatePadding(data: d.IData, element: HTMLElement): void {
    const paddingRight = d.getPaddingRight(data);
    let value = paddingRight;
    const actionWidth = data.actions ? getElementWidth(element, Action.actionStyle) : 0;
    if (actionWidth !== 0) {
        value = c.itemActionRight + actionWidth;
    } else if (Counter.isCounter(data)) {
        const counterWidth = getElementWidth(element, Counter.counterStyle);
        value = counterWidth + actionWidth + paddingRight;
    }
    element.style.paddingRight = `${value}px`;
}

function getElementWidth(element: HTMLElement, className: string): number {
    const elements = element.getElementsByClassName(className);
    return elements && elements.length > 0 ? elements[0].getBoundingClientRect().width : 0;
}

function getStyle(data: d.IData): b.IBobrilStyles[] {
    const size = !data.size ? d.Size.Default : data.size;
    return [
        s.baseStyle,
        data.sidePadding === d.SidePadding.CJM && s.cjmStyle,
        data.isSubitem && subitemStyle,
        data.isSeparator && isSeparatorStyle,
        data.isDisabled ? isDisabledStyle : [baseHoverStyle, isValid(data) && data.isActive && [stripeBaseStyle, isActiveStyle]],
        size === d.Size.Small && [smallSizeStyle, noBorderStyle],
        size === d.Size.Medium && mediumSizeStyle,
        d.isWarning(data) && [
            isWarningStyle,
            data.isActive && [stripeBaseStyle, warningStripeStyle, isWarningActiveStyle],
            data.isCollapsible && data.isExpanded && isWarningExpandedStyle,
        ],
        d.isError(data) && [
            isInvalidStyle,
            data.isActive && [stripeBaseStyle, invalidStripeStyle, isInvalidActiveStyle],
            data.isCollapsible && data.isExpanded && isInvalidExpandedStyle,
        ],
        !data.isDisabled && data.isCollapsible && data.isExpanded && isOpenStyle,
        data.hideBorder === true && noBorderStyle,
        data.hideBottomBorder === true && noBottomBorderStyle,
        getIndentStyle(data),
        data.isDrag && s.noDropCursor,
    ];
}

function isValid(data: d.IData): boolean {
    return !data.validationState;
}

const subitemStyle = b.styleDefEx(
    s.baseStyle,
    {
        marginRight: -1 * c.itemCollapsibleContentPadding,
        marginLeft: -1 * c.itemCollapsibleContentPadding,
    },
    {},
    "subitemStyle"
);

const baseHoverStyle = b.styleDefEx(
    s.baseStyle,
    {},
    {
        hover: {
            borderColor: c.hoverBorderColor,
            background: c.hoverBackground,
        },
        "hover:before": {
            content: "",
            position: "absolute",
            top: "-1px",
            left: 0,
            right: 0,
            height: "1px",
            background: c.hoverBorderColor,
        },
    },
    "sidebarItemBaseHoverStyle"
);

const stripeBaseStyle = b.styleDef(
    {},
    {
        after: {
            content: "",
            width: 3,
            position: "absolute",
            background: c.activeBorderColor,
            bottom: 0,
            left: 0,
            top: 0,
        },
    }
);

const warningStripeStyle = b.styleDef(
    {},
    {
        after: {
            background: c.warningColor,
        },
    }
);

const invalidStripeStyle = b.styleDef(
    {},
    {
        after: {
            background: c.invalidColor,
        },
    }
);

const isActiveStyle = b.styleDefEx(
    baseHoverStyle,
    {
        background: c.activeBackground,
        position: "relative",
    },
    {
        hover: {
            background: c.activeBackground,
        },
    },
    "sidebarItemIsActiveStyle"
);

const isDisabledStyle = b.styleDefEx(s.baseStyle, mixins.getClickableElementDisabled(), {}, "sidebarItemIsDisabledStyle");

const smallSizeStyle = b.styleDefEx(
    s.baseStyle,
    {
        lineHeight: c.smallLineHeight,
    },
    {},
    "sidebarItemSmallSizeStyle"
);

const noBorderStyle = b.styleDefEx(
    s.baseStyle,
    {
        border: "none",
    },
    {
        "hover:before": {
            display: "none",
        },
    },
    "sidebarItemNoBorderStyle"
);

const noBottomBorderStyle = b.styleDefEx(
    s.baseStyle,
    {
        borderBottom: "none",
    },
    {},
    "sidebarItemNoBottomBorderStyle"
);

const mediumSizeStyle = b.styleDefEx(
    s.baseStyle,
    {
        lineHeight: c.mediumLineHeight,
    },
    {},
    "sidebarItemMediumSizeStyle"
);

const isSeparatorStyle = b.styleDefEx(
    s.baseStyle,
    {
        borderBottomColor: c.separatorColor,
    },
    {},
    "isSeparatorStyle"
);

const isOpenStyle = b.styleDef({ borderBottom: "none" }, {}, "isOpenStyle");

const isWarningStyle = b.styleDef({
    color: c.warningColor,
});

const isWarningActiveStyle = b.styleDefEx(
    baseHoverStyle,
    {
        background: c.warningActiveBackground,
    },
    {
        hover: {
            background: c.warningActiveBackground,
        },
    }
);

const isWarningExpandedStyle = b.styleDefEx(isWarningStyle, { background: c.backgroundColor });

const isInvalidStyle = b.styleDef({
    color: c.invalidColor,
});

const isInvalidActiveStyle = b.styleDefEx(
    baseHoverStyle,
    {
        background: c.invalidActiveBackground,
    },
    {
        hover: {
            background: c.invalidActiveBackground,
        },
    }
);

const isInvalidExpandedStyle = b.styleDefEx(isInvalidStyle, { background: c.backgroundColor });

function getIndentStyle(data: d.IData): b.IBobrilStyle {
    return data.indentLevel && data.indentLevel > 1
        ? {
              paddingLeft: d.getPaddingLeft(data) + (data.indentLevel - 1) * c.indentCircleWidth,
          }
        : undefined;
}

// added by script - BEGIN
export const SidebarItem = create;
// added by script - END
