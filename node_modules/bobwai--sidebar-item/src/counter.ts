import * as b from "bobril";
import * as c from "./constants";
import * as pc from "./publicConstants";
import * as d from "./data";
import * as s from "./styles";
import * as Color from "bobwai--color";
import * as Font from "bobwai--font";
import * as Icon from "bobwai--icon";
import * as TooltipEmplacer from "bobwai--tooltip-emplacer";

export function create(data: d.IData): b.IBobrilChild {
    if (!isCounter(data)) {
        return;
    }

    const styleList = [
        counterStyle,
        data.sidePadding && data.sidePadding === d.SidePadding.CJM && counterCjmStyle,
        data.isCollapsible && [
            counterCollapsibleStyle,
            data.isExpanded
                ? [
                      counterCollapsibleIsOpenStyle,
                      d.isError(data) && counterCollapsibleInvalidIsOpenStyle,
                      d.isWarning(data) && counterCollapsibleWarningIsOpenStyle,
                  ]
                : [
                      d.isError(data)
                          ? counterCollapsibleInvalidStyle
                          : d.isWarning(data)
                          ? counterCollapsibleWarningStyle
                          : !data.isDisabled && counterParentHoverStyle,
                  ],
        ],
        data.isDisabled && s.isDisabledChildrenStyle,
        d.isWarning(data) && isWarningStyle,
        d.isError(data) && isInvalidStyle,
    ];

    return data.tooltip
        ? TooltipEmplacer.create({
              content: b.styledDiv(getCounterContent(data), styleList),
              tooltipMessage: data.tooltip.tooltipMessage,
          })
        : b.styledDiv(getCounterContent(data), styleList);
}

export function isCounter(data: d.IData): boolean {
    return data.isCollapsible || data.counter !== undefined || isExclamationMarkShownInCounter(data);
}

function isExclamationMarkShownInCounter(data: d.IData): boolean {
    return d.isError(data) && (data.actions === undefined || (data.actions !== undefined && !!data.actionsVisibleOnlyOnHover));
}

function getCounterContent(data: d.IData) {
    const showExclamationMark = isExclamationMarkShownInCounter(data);
    const showTextCounter = data.counter;

    return showTextCounter || showExclamationMark
        ? b.styledDiv(
              [
                  showExclamationMark &&
                      TooltipEmplacer.create({
                          content: b.styledDiv(c.errorIcon, [
                              counterContentItemStyle,
                              counterContentItemWidthExclamationMarkStyle,
                              showTextCounter && counterContentItemWithPaddingStyle,
                          ]),
                          tooltipMessage: data.errorTooltip && data.errorTooltip.tooltipMessage,
                          tooltipHeader: data.errorTooltip && data.errorTooltip.tooltipHeader,
                          validationState: data.validationState,
                      }),
                  showTextCounter && b.styledDiv(data.counter, counterContentItemStyle),
              ],
              counterContentStyle
          )
        : undefined;
}

const spriteArrowDown = b.sprite(Icon.arrow_down_small_png, pc.CollapsibleIconColor);
const spriteArrowDownHover = b.sprite(Icon.arrow_down_small_png, c.collapsibleIconHoverColor);
const spriteArrowDownIsInvalid = b.sprite(Icon.arrow_down_small_png, Color.Error);
const spriteArrowDownIsWarning = b.sprite(Icon.arrow_down_small_png, Color.Warning);
const spriteArrowUp = b.sprite(Icon.arrow_up_small_png, c.collapsibleIconOpenColor);
const spriteArrowUpIsInvalid = b.sprite(Icon.arrow_up_small_png, Color.Error);
const spriteArrowUpIsWarning = b.sprite(Icon.arrow_up_small_png, Color.Warning);

export const counterContentItemStyle = b.styleDef({
    display: "inline-block",
    fontSize: c.fontSize,
    verticalAlign: "middle",
});

export const counterContentItemWithPaddingStyle = b.styleDef({
    paddingRight: 5,
});

export const counterContentItemWidthExclamationMarkStyle = b.styleDefEx(counterContentItemStyle, {
    fontSize: 0,
});

export const counterStyle = b.styleDef(
    {
        color: c.counterColor,
        right: c.paddingLeft,
        display: "block",
        position: "absolute",
        fontWeight: Font.FontWeightRegular,
        marginTop: (-1 * c.itemActionHeight) / 2,
        top: "50%",
        lineHeight: c.itemActionHeight + "px",
        fontSize: 0,
    },
    {},
    "counterStyle"
);

export const counterCjmStyle = b.styleDefEx(counterStyle, {
    right: c.sidePaddingCJM,
});

const counterContentStyle = b.styleDef(
    {
        display: "inline-block",
        paddingLeft: 5,
        verticalAlign: "top",
    },
    {},
    "counterContentStyle"
);

const counterCollapsibleStyle = b.styleDefEx(
    counterStyle,
    {},
    {
        after: [
            {
                content: "",
                position: "relative",
                left: 3,
                marginLeft: 5,
                display: "inline-block",
            },
            spriteArrowDown,
        ],
    },
    "counterCollapsibleStyle"
);

const counterParentHoverStyle = b.styleDefEx(s.baseStyle + ":hover>", {}, { after: spriteArrowDownHover }, "counterParentHoverStyle");

const counterCollapsibleIsOpenStyle = b.styleDefEx(counterCollapsibleStyle, {}, { after: spriteArrowUp }, "counterCollapsibleIsOpenStyle");

const counterCollapsibleInvalidStyle = b.styleDefEx(
    counterCollapsibleStyle,
    {},
    { after: spriteArrowDownIsInvalid },
    "counterCollapsibleInvalidStyle"
);

const counterCollapsibleInvalidIsOpenStyle = b.styleDefEx(
    counterCollapsibleStyle,
    {},
    { after: spriteArrowUpIsInvalid },
    "counterCollapsibleInvalidIsOpenStyle"
);

const counterCollapsibleWarningStyle = b.styleDefEx(
    counterCollapsibleStyle,
    {},
    { after: spriteArrowDownIsWarning },
    "counterCollapsibleWarningStyle"
);

const counterCollapsibleWarningIsOpenStyle = b.styleDefEx(
    counterCollapsibleStyle,
    {},
    { after: spriteArrowUpIsWarning },
    "counterCollapsibleWarningIsOpenStyle"
);

const isWarningStyle = b.styleDefEx(counterStyle, { color: c.warningColor });

const isInvalidStyle = b.styleDefEx(counterStyle, { color: c.invalidColor });
