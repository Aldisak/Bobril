import * as b from "bobril";
import * as c from "./constants";
import * as d from "./data";
import * as s from "./styles";
import * as Mixins from "bobwai--style-mixins";
import * as Font from "bobwai--font";
import * as Color from "bobwai--color";

export function create(data: d.IData): b.IBobrilChildren {
    if (!data.indentLevel) {
        return;
    }
    const styleList = [indentStyle, data.isDisabled && s.isDisabledChildrenStyle, data.size === d.Size.Small && indentSmallStyle];
    return [
        b.styledDiv(
            b.styledDiv(data.indentLevel, circleStyle, d.isError(data) && circleErrorStyle, d.isWarning(data) && circleWarningStyle),
            styleList
        ),
        data.indentLevel > 1 && b.styledDiv(undefined, getIndentLineUpStyle(data.indentLevel, data)),
        !data.isLast && b.styledDiv(undefined, getIndentLineDownStyle(data.indentLevel, data)),
    ];
}

const indentStyle = b.styleDef(
    {
        height: c.lineHeight,
        position: "absolute",
        margin: "auto",
        top: 0,
    },
    {},
    "sidebarItemIndentStyle"
);

const indentSmallStyle = b.styleDefEx(
    indentStyle,
    {
        height: c.smallLineHeight,
        marginLeft: c.iconPlusMarginWidth,
    },
    {},
    "sidebarItemIndentSmallStyle"
);

const circleStyle = b.styleDef([
    Mixins.centerVerticalChildInlineBlock(),
    {
        backgroundColor: Color.Basic,
        color: Color.White,
        height: c.indentCircleWidth,
        width: c.indentCircleWidth,
        borderRadius: "50%",
        display: "inline-block",
        verticalAlign: "middle",
        textAlign: "center",
        lineHeight: `${c.indentCircleWidth}px`,
        fontWeight: Font.FontWeightSemibold,
        fontSize: 12,
        boxSizing: "initial",
    },
]);

const circleErrorStyle = b.styleDefEx(circleStyle, {
    backgroundColor: Color.Error,
});

const circleWarningStyle = b.styleDefEx(circleStyle, {
    backgroundColor: Color.Warning,
});

const indentLinePadding = 7;

const indentLineUpBaseStyle = b.styleDef({
    position: "absolute",
    top: 0,
    height: c.lineHeightNumber / 2 - c.indentCircleWidth / 2 - indentLinePadding,
    width: 1,
    background: Color.Grey400,
});

function getIndentLineUpStyle(indentLevel: number, data: d.IData) {
    return [
        indentLineUpBaseStyle,
        {
            left: d.getPaddingLeft(data) + (indentLevel - 1) * c.indentCircleWidth - 1,
        },
    ];
}

const indentLineDownBaseStyle = b.styleDef({
    position: "absolute",
    top: c.lineHeightNumber / 2 + c.indentCircleWidth / 2 + indentLinePadding,
    bottom: 0,
    width: 1,
    background: Color.Grey400,
});

function getIndentLineDownStyle(indentLevel: number, data: d.IData) {
    return [
        indentLineDownBaseStyle,
        {
            left: d.getPaddingLeft(data) + indentLevel * c.indentCircleWidth - 1,
        },
    ];
}
