import * as b from "bobril";
import * as c from "./constants";
import * as FormElements from "bobwai--form-elements";

export enum Size {
    Default, // 60px (collapsible menu)
    Medium, // 50px (simple menu)
    Small, // 45px (submenu)
}

export interface IData {
    id: string;
    title: string;
    subtitle?: string;
    indentLevel?: number;
    isLast?: boolean;
    counter?: b.IBobrilChild;
    iconContent?: b.IBobrilNode;
    iconContentError?: b.IBobrilNode;
    iconContentWarning?: b.IBobrilNode;
    isDisabled?: boolean;
    isCollapsible?: boolean;
    isExpanded?: boolean;
    isSubitem?: boolean;
    isSeparator?: boolean;
    isActive?: boolean;
    actions?: b.IBobrilChildArray;
    actionsVisibleOnlyOnHover?: boolean;
    size?: Size;
    validationState?: FormElements.ValidationState;
    errorTooltip?: FormElements.ITooltipData;
    tooltip?: FormElements.ITooltipData;
    /** Experimental property */
    hideBorder?: boolean;
    hideBottomBorder?: boolean;
    onClick(item: IData): void;
    isDrag?: boolean;
    /** Experimental property for CJM only */
    sidePadding?: SidePadding;
}

export enum SidePadding {
    Default,
    CJM,
}

export function getIconContent(data: IData): b.IBobrilChild {
    switch (data.validationState) {
        case FormElements.ValidationState.Error:
            return data.iconContentError || data.iconContent;
        case FormElements.ValidationState.Warning:
            return data.iconContentWarning || data.iconContent;
        default:
            return data.iconContent;
    }
}

export function isError(data: IData): boolean {
    return data.validationState === FormElements.ValidationState.Error;
}

export function isWarning(data: IData): boolean {
    return data.validationState === FormElements.ValidationState.Warning;
}

export function getPaddingLeft(data: IData): number {
    return data && data.sidePadding && data.sidePadding === SidePadding.CJM ? c.sidePaddingCJM : c.paddingLeft;
}

export function getPaddingRight(data: IData): number {
    return data && data.sidePadding && data.sidePadding === SidePadding.CJM ? c.sidePaddingCJM : c.paddingRight;
}
