import * as b from "bobril";
import * as SidebarItem from "../src/lib";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as FormElements from "bobwai--form-elements";
import * as Icon from "bobwai--icon";
import * as Checkbox from "bobwai--checkbox";
import * as StateIcon from "bobwai--state-icon";
import * as Color from "bobwai--color";
import * as Hint from "bobwai--hint";

function getSampleIcon(): b.IBobrilNode {
    return Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Basic) });
}
function getSampleIconError(): b.IBobrilNode {
    return Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Error) });
}
function getSampleIconWarning(): b.IBobrilNode {
    return Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Warning) });
}
const validIcon = Icon.create({ sprite: b.sprite(Icon.check_2_small_png, Color.Application) });

function getStateIcon(): b.IBobrilNode {
    return StateIcon.create({
        content: Icon.create({ sprite: b.sprite(Icon.edit_small_png, Color.Basic) }),
        hoverContent: Icon.create({ sprite: b.sprite(Icon.edit_small_png, Color.Application) }),
        onClick: onIconClick,
    });
}

const hdata: Hint.IData = {
    tooltip: {
        tooltipHeader: "Tags",
        tooltipMessage: [
            "Tags are used to mark configuration objects by your own custom-made categories. " +
                "This can be used to categorize and filter these objects. To assign tag simple click plus icon.",
            "Another message",
            "Another message 2",
        ],
    },
};

let hideBorder = false;
let useCjmSidePadding = false;

const onIconClick = (): void => {
    alert("click");
};

const onClick = (item: SidebarItem.IData): boolean => {
    if (item.isCollapsible) {
        item.isExpanded = !item.isExpanded;
    } else {
        setActiveItem(data, item.id);
    }
    b.invalidate();
    return true;
};

const onClickMedium = (item: SidebarItem.IData): boolean => {
    if (item.isCollapsible) {
        item.isExpanded = !item.isExpanded;
    } else {
        setActiveItem(dataMedium, item.id);
    }
    b.invalidate();
    return true;
};

const onClickSmall = (item: SidebarItem.IData): boolean => {
    if (item.isCollapsible) {
        item.isExpanded = !item.isExpanded;
    } else {
        setActiveItem(dataSmall, item.id);
    }
    b.invalidate();
    return true;
};

const onClickWithIndent = (item: SidebarItem.IData): boolean => {
    if (item.isCollapsible) {
        item.isExpanded = !item.isExpanded;
    } else {
        setActiveItem(dataWithIndent, item.id);
    }
    b.invalidate();
    return true;
};

const data: SidebarItem.IData[] = [
    { id: "1", onClick: onClick, title: "Item", counter: "1" },
    { id: "2", onClick: onClick, title: "Item (active by default)", counter: "888", isActive: true },
    { id: "3", onClick: onClick, title: "Item with icon", counter: "1", iconContent: getSampleIcon() },
    { id: "4", onClick: onClick, title: "Item with action(s)", counter: "0", actions: [getStateIcon(), "action2"] },
    { id: "41", onClick: onClick, title: "Item with action(s) without counter", actions: [getStateIcon(), "action2"] },
    {
        id: "42",
        onClick: onClick,
        title: "Item invalid with action(s)",
        counter: "0",
        actions: [getStateIcon(), "action2"],
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
    },
    {
        id: "43",
        onClick: onClick,
        title: "Item invalid with action(s) without counter",
        actions: [getStateIcon(), "action2"],
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
    },
    { id: "44", onClick: onClick, title: "Item with hint from oms500", counter: "0", actions: [Hint.create(hdata)] },
    {
        id: "45",
        onClick: onClick,
        title: "Item with action(s) visible on hover",
        counter: "0",
        actions: [getStateIcon(), "action2"],
        actionsVisibleOnlyOnHover: true,
    },
    {
        id: "46",
        onClick: onClick,
        title: "Item invalid with action(s) visible on hover",
        counter: "0",
        actions: [getStateIcon(), "action2"],
        actionsVisibleOnlyOnHover: true,
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
    },
    { id: "5", onClick: onClick, title: "Item without counter" },
    {
        id: "52",
        onClick: onClick,
        title: "Item invalid without counter",
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
    },
    { id: "6", onClick: onClick, title: "Item with separator (can have different bottom border color)", counter: "3", isSeparator: true },
    {
        id: "7",
        onClick: onClick,
        title: "Item warning",
        counter: "4",
        validationState: FormElements.ValidationState.Warning,
        iconContent: getSampleIconWarning(),
    },
    {
        id: "8",
        onClick: onClick,
        title: "Item invalid",
        counter: "5",
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
        iconContent: getSampleIconError(),
    },
    {
        id: "81",
        onClick: onClick,
        title: "Item invalid",
        counter: "55555555",
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
        iconContent: getSampleIconError(),
    },
    { id: "9", onClick: onClick, title: "Item disabled", counter: "6", isDisabled: true },
    { id: "10", onClick: onClick, title: "Item collapsible", isCollapsible: true },
    {
        id: "11",
        onClick: onClick,
        title: "Item collapsible warning",
        isCollapsible: true,
        validationState: FormElements.ValidationState.Warning,
    },
    {
        id: "12",
        onClick: onClick,
        title: "Item collapsible invalid",
        isCollapsible: true,
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
    },
    {
        id: "13",
        onClick: onClick,
        title: "Item with icon in counter and tooltip",
        counter: validIcon,
        tooltip: { tooltipMessage: "Tooltip on counter" },
    },
];

const dataMedium: SidebarItem.IData[] = [
    { id: "1", size: SidebarItem.size.Medium, onClick: onClickMedium, title: "Item", counter: "1" },
    { id: "2", size: SidebarItem.size.Medium, onClick: onClickMedium, title: "Item (active by default)", counter: "888", isActive: true },
    { id: "3", size: SidebarItem.size.Medium, onClick: onClickMedium, title: "Item with icon", counter: "1", iconContent: getSampleIcon() },
    {
        id: "4",
        size: SidebarItem.size.Medium,
        onClick: onClickMedium,
        title: "Item with action(s)",
        counter: "0",
        actions: ["action1", "action2"],
    },
    {
        id: "44",
        size: SidebarItem.size.Medium,
        onClick: onClickMedium,
        title: "Item with action(s) visible on hover",
        counter: "0",
        actions: ["action1", "action2"],
        actionsVisibleOnlyOnHover: true,
    },
    { id: "5", size: SidebarItem.size.Medium, onClick: onClickMedium, title: "Item without counter" },
    {
        id: "52",
        size: SidebarItem.size.Medium,
        onClick: onClickMedium,
        title: "Item invalid without counter",
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
    },
    {
        id: "6",
        size: SidebarItem.size.Medium,
        onClick: onClickMedium,
        title: "Item with separator (can have different bottom border color)",
        counter: "3",
        isSeparator: true,
    },
    {
        id: "7",
        size: SidebarItem.size.Medium,
        onClick: onClickMedium,
        title: "Item warning and tooltip on counter",
        counter: "4",
        validationState: FormElements.ValidationState.Warning,
        iconContent: getSampleIconWarning(),
        tooltip: { tooltipMessage: "Number 4" },
    },
    {
        id: "8",
        size: SidebarItem.size.Medium,
        onClick: onClickMedium,
        title: "Item invalid",
        counter: "5",
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
        iconContent: getSampleIconError(),
    },
    { id: "9", size: SidebarItem.size.Medium, onClick: onClickMedium, title: "Item disabled", counter: "6", isDisabled: true },
    { id: "10", size: SidebarItem.size.Medium, onClick: onClickMedium, title: "Item collapsible", isCollapsible: true },
    {
        id: "11",
        size: SidebarItem.size.Medium,
        onClick: onClickMedium,
        title: "Item collapsible warning",
        isCollapsible: true,
        validationState: FormElements.ValidationState.Warning,
    },
    {
        id: "12",
        size: SidebarItem.size.Medium,
        onClick: onClickMedium,
        title: "Item collapsible invalid",
        isCollapsible: true,
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
    },
    {
        id: "13",
        size: SidebarItem.size.Medium,
        onClick: onClickMedium,
        title: "Item with icon in counter and tooltip on counter",
        counter: validIcon,
        tooltip: { tooltipMessage: "Message" },
    },
];

const dataSmall: SidebarItem.IData[] = [
    { id: "1", size: SidebarItem.size.Small, onClick: onClickSmall, title: "Item", counter: "1" },
    { id: "2", size: SidebarItem.size.Small, onClick: onClickSmall, title: "Item (active by default)", counter: "888", isActive: true },
    { id: "3", size: SidebarItem.size.Small, onClick: onClickSmall, title: "Item with icon", counter: "1", iconContent: getSampleIcon() },
    {
        id: "4",
        size: SidebarItem.size.Small,
        onClick: onClickSmall,
        title: "Item with action(s)",
        counter: "0",
        actions: ["action1", "action2"],
    },
    {
        id: "44",
        size: SidebarItem.size.Small,
        onClick: onClickSmall,
        title: "Item with action(s) visible on hover",
        counter: "0",
        actions: ["action1", "action2"],
        actionsVisibleOnlyOnHover: true,
    },
    { id: "5", size: SidebarItem.size.Small, onClick: onClickSmall, title: "Item without counter" },
    {
        id: "52",
        size: SidebarItem.size.Small,
        onClick: onClickSmall,
        title: "Item invalid without counter",
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
    },
    {
        id: "7",
        size: SidebarItem.size.Small,
        onClick: onClickSmall,
        title: "Item warning",
        counter: "4",
        validationState: FormElements.ValidationState.Warning,
        iconContent: getSampleIconWarning(),
    },
    {
        id: "8",
        size: SidebarItem.size.Small,
        onClick: onClickSmall,
        title: "Item invalid and tooltip on counter",
        counter: "5",
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
        iconContent: getSampleIconError(),
        tooltip: { tooltipMessage: "Tooltip with 5 number" },
    },
    { id: "9", size: SidebarItem.size.Small, onClick: onClickSmall, title: "Item disabled", counter: "6", isDisabled: true },
    {
        id: "10",
        size: SidebarItem.size.Small,
        onClick: onClickSmall,
        title: "Item with icon in counter",
        counter: validIcon,
    },
    {
        id: "11",
        size: SidebarItem.size.Small,
        onClick: onClickSmall,
        title: "Item with icon in counter and tooltip",
        counter: validIcon,
        tooltip: { tooltipMessage: "Message" },
    },
];

const dataWithIndent: SidebarItem.IData[] = [
    {
        id: "1",
        indentLevel: 1,
        hideBorder: true,
        onClick: onClickWithIndent,
        subtitle: "Subtitle subtitle subtitle subtitle",
        title: "Title",
    },
    {
        id: "2",
        indentLevel: 2,
        hideBorder: true,
        onClick: onClickWithIndent,
        subtitle: "Subtitle subtitle subtitle subtitle",
        title: "Title (item active by default)",
        isActive: true,
    },
    {
        id: "3",
        indentLevel: 3,
        hideBorder: true,
        onClick: onClickWithIndent,
        subtitle: "Subtitle subtitle subtitle subtitle",
        title: "Title warning",
        validationState: FormElements.ValidationState.Warning,
    },
    {
        id: "4",
        indentLevel: 4,
        hideBorder: true,
        onClick: onClickWithIndent,
        subtitle: "Subtitle subtitle subtitle subtitle",
        title: "Title error",
        validationState: FormElements.ValidationState.Error,
        errorTooltip: { tooltipMessage: "Error tooltip" },
    },
    {
        id: "5",
        indentLevel: 5,
        hideBorder: true,
        onClick: onClickWithIndent,
        subtitle: "Subtitle subtitle subtitle subtitle",
        title: "Title disabled",
        isDisabled: true,
    },
];

function setActiveItem(source: SidebarItem.IData[], id: string): void {
    source.forEach((item: SidebarItem.IData) => {
        item.isActive = item.id === id;
    });
}

Example.init({}, () => {
    return [
        Container.create({
            header: "SidebarItem complex example",
            content: b.styledDiv("See bobwai--composition--sidebar for complex example of typical usage", { color: "red" }),
        }),
        Container.create({
            type: Container.Type.experimental,
            header: "Experimental application can hide border of items",
            content: Checkbox.create({
                title: "Hide border",
                value: hideBorder,
                onChange: (v: boolean) => {
                    hideBorder = v;
                    b.invalidate();
                },
            }),
        }),
        Container.create({
            type: Container.Type.experimental,
            header: "SidebarItem - with indent",
            content: dataWithIndent.map((item: SidebarItem.IData) => {
                return SidebarItem.create(item);
            }),
        }),
        Container.create({
            header: "SidebarItem - DEFAULT size",
            content: data.map((item: SidebarItem.IData) => {
                return SidebarItem.create(adjustData(item));
            }),
        }),
        Container.create({
            header: "SidebarItem - MEDIUM size",
            content: dataMedium.map((item: SidebarItem.IData) => {
                return SidebarItem.create(adjustData(item));
            }),
        }),
        Container.create({
            header: "SidebarItem - SMALL size",
            content: dataSmall.map((item: SidebarItem.IData) => {
                return SidebarItem.create(adjustData(item));
            }),
        }),
        Container.create({
            type: Container.Type.experimental,
            header: "Experimental side padding for CJM",
            content: Checkbox.create({
                title: "Use CJM side padding",
                value: useCjmSidePadding,
                onChange: (v: boolean) => {
                    useCjmSidePadding = v;
                    b.invalidate();
                },
            }),
        }),
        Container.create({
            isForConstantOverride: true,
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField<Color.IColor>({
                            label: "CollapsibleIconColor",
                            labelWidth: 200,
                            onChange: (v: Color.IColor) => {
                                SidebarItem.setCollapsibleIconColor(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.IColor,
                        }),
                    ],
                }),
            ],
        }),
    ];
});

function adjustData(item: SidebarItem.IData): SidebarItem.IData {
    return b.assign(
        { hideBorder: hideBorder, sidePadding: useCjmSidePadding ? SidebarItem.sidePadding.CJM : SidebarItem.sidePadding.Default },
        item
    );
}
