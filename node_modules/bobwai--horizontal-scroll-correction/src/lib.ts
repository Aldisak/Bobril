import * as b from "bobril";

export interface IData {
    content: b.IBobrilChildren;
    respectHorizontalScrollPosition?: boolean;
}

interface IContext extends b.IBobrilCtx {
    data: IData;
    originalLeft: number;
    lastScrollPosition: number;
    scrollDifference: number;
    elem: HTMLElement;
}

export let create = b.createVirtualComponent<IData>({
    id: "bobwai--horizontal-scroll-correction",
    render(ctx: IContext, me: b.IBobrilNode) {
        me.children = ctx.data.content;
    },
    postInitDom(ctx: IContext, me: b.IBobrilCacheNode) {
        ctx.lastScrollPosition = b.getWindowScroll()[0];
        if (ctx.data.respectHorizontalScrollPosition) {
            ctx.scrollDifference = 0;
        }
        let onScroll = (_info?: b.IBobrilScroll) => {
            let actualScrollPosition = b.getWindowScroll()[0];
            if (ctx.lastScrollPosition !== actualScrollPosition) {
                ctx.scrollDifference -= ctx.lastScrollPosition - actualScrollPosition;
                ctx.lastScrollPosition = actualScrollPosition;
            } else {
                return;
            }

            let children = me.children;
            if (!ctx.originalLeft && !ctx.elem && children) {
                let elem = <HTMLElement>(<b.IBobrilCacheNode>children[0]).element;
                let elemLeft = elem.style.left && parseInt(elem.style.left, 10);
                if (!elemLeft) {
                    elemLeft = elem.offsetLeft;
                }
                ctx.elem = elem;
                ctx.originalLeft = elemLeft;
            }

            let elem = ctx.elem;
            let currentLeft = elem.style.left;

            let correctedLeft;

            if (ctx.data.respectHorizontalScrollPosition) {
                correctedLeft = `${ctx.originalLeft - ctx.scrollDifference}px`;
            } else {
                correctedLeft = `${ctx.originalLeft - actualScrollPosition}px`;
            }

            if (currentLeft !== correctedLeft) {
                elem.style.left = correctedLeft;
            }
        };
        b.addOnScroll(onScroll);
        b.addDisposable(ctx, () => b.removeOnScroll(onScroll));
    }
});

// added by script - BEGIN
export const HorizontalScrollCorrection = create;
// added by script - END
