import { BBBot, BBSeeker } from "bbseeker-extended";
import { createLayout } from "./layout";
import { clearTestStore } from "./store";
import { Selectors } from "../../src/testSelectors";

describe("Filter UI tests", () => {
    afterEach(() => {
        BBBot.clear();
        clearTestStore();
    });

    it("should be possible to write to input, clear it with clear button using mouse and type again", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const filter = BBSeeker.findElements(Selectors.id)![0];
            const input = BBSeeker.findElements(Selectors.input)![0];

            expect(filter).not.toBeNull();
            expect((<HTMLInputElement>input).value).toBe("");

            await bot.emitLeftMouseClickOnHTMLElement(input);
            await writeAndCheck({ bot, addString: "abc", expectedResult: "abc", input });

            const clearButton = BBSeeker.findElements(Selectors.clearButton)![0];
            await bot.emitLeftMouseClickOnHTMLElement(clearButton);
            expect((<HTMLInputElement>input).value).toBe("");

            await writeAndCheck({ bot, addString: "xyz", expectedResult: "xyz", input });
        } else {
            fail("Test failed due is not fully rendered");
        }
    });
    it("should be possible to write to input, clear it with clear button using keyboard and type again", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const filter = BBSeeker.findElements(Selectors.id)![0];
            const input = BBSeeker.findElements(Selectors.input)![0];

            expect(filter).not.toBeNull();
            expect((<HTMLInputElement>input).value).toBe("");

            await bot.emitLeftMouseClickOnHTMLElement(input);
            await writeAndCheck({ bot, addString: "abc", expectedResult: "abc", input });

            await bot.emitKeyPress(BBBot.KeyCodes.Tab);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            expect((<HTMLInputElement>input).value).toBe("");

            await writeAndCheck({ bot, addString: "xyz", expectedResult: "xyz", input });
        } else {
            fail("Test failed due is not fully rendered");
        }
    });
    it("should be possible to use arrows and other keys", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const input = BBSeeker.findElements(Selectors.input)![0];

            await bot.emitLeftMouseClickOnHTMLElement(input);
            await writeAndCheck({ bot, addString: "abcdef", expectedResult: "abcdef", input });

            await bot.emitKeyPress(BBBot.KeyCodes.LeftArrow);
            await writeAndCheck({ bot, addString: "1", expectedResult: "abcde1f", input });

            await bot.emitKeyPress(BBBot.KeyCodes.RightArrow);
            await writeAndCheck({ bot, addString: "2", expectedResult: "abcde1f2", input });

            await bot.emitKeyPress(BBBot.KeyCodes.UpArrow);
            await writeAndCheck({ bot, addString: "3", expectedResult: "3abcde1f2", input });

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await writeAndCheck({ bot, addString: "4", expectedResult: "3abcde1f24", input });

            await bot.emitKeyPress(BBBot.KeyCodes.Home);
            await writeAndCheck({ bot, addString: "5", expectedResult: "53abcde1f24", input });

            await bot.emitKeyPress(BBBot.KeyCodes.End);
            await writeAndCheck({ bot, addString: "6", expectedResult: "53abcde1f246", input });

            for (let i = 0; i < 8; i++) {
                await bot.emitKeyPress(BBBot.KeyCodes.LeftArrow);
            }
            await writeAndCheck({ bot, addString: " ", expectedResult: "53ab cde1f246", input });

            await bot.emitKeyPress(BBBot.KeyCodes.Escape);
            expect((<HTMLInputElement>input).value).toBe("");
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
    it("should not be posible to write in to disabled filter", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const disabledInput = BBSeeker.findElements(Selectors.input)![1];

            await bot.emitLeftMouseClickOnHTMLElement(disabledInput);
            await writeAndCheck({ bot, addString: "abc", expectedResult: "", input: disabledInput });
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
});

async function writeAndCheck(params: { bot: BBBot.IBBBot; addString: string; expectedResult: string; input: HTMLElement }) {
    await params.bot.writeExpression(params.addString, 200, true);
    expect((<HTMLInputElement>params.input).value).toBe(params.expectedResult);
}
