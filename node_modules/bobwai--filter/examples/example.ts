import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as LField from "bobwai--l-field";
import * as ColorPicker from "bobwai--color-picker";
import * as Color from "bobwai--color";
import * as Example from "bobwai--example";
import * as Icon from "bobwai--icon";
import * as Checkbox from "bobwai--checkbox";
import * as Filter from "../src/lib";

let value = "";
let value2 = "";
let value4 = "";
let enableRTL = true;
let valueWithRtlLanguage = "first part أتمنى لك نهارا سعيد last part";
let customColor: string | undefined = undefined;
const defaultColor = [Color.Success, Color.Chart_Yellow500, Color.Chart_Brown500];
let onChangeWithRtlLanguage = (value: string) => {
    valueWithRtlLanguage = value;
    b.invalidate();
};
const filterIcon = Icon.create({ sprite: b.sprite(Icon.search_small_png) });

Example.init({}, () => {
    Filter.setEnableRTL(enableRTL);
    return [
        Container.create({
            header: "bobwai--filter (without defined tooltip)",
            description: "There should be default tooltip on clear icon.",
            content: Filter.create({
                placeholder: "Optional placeholder",
                value: value,
                onChange: (v) => {
                    value = v;
                    b.invalidate();
                },
                onTextClear: () => {
                    value = "";
                    b.invalidate();
                },
            }),
        }),
        Container.create({
            header: "bobwai--filter with tooltip",
            content: Filter.create({
                value: value2,
                filterIconTooltip: {
                    tooltipHeader: "FILTER",
                    tooltipMessage: "Filter displayed content",
                },
                clearIconTooltip: {
                    tooltipHeader: "CLEAR TEXT",
                    tooltipMessage: "Clear filter text",
                },
                onChange: (v) => {
                    value2 = v;
                    b.invalidate();
                },
                onTextClear: () => {
                    value2 = "";
                    b.invalidate();
                },
            }),
        }),
        Container.create({
            header: "bobwai--filter with delay",
            content: [
                Filter.create({
                    value: value2,
                    onChange: (v: string) => {
                        value2 = v;
                        b.invalidate();
                    },
                    onTextClear: () => {
                        value2 = "";
                        b.invalidate();
                    },
                    isOnChangeWithDelay: true,
                }),
            ],
            description: "onChange is called when you finish typing",
            model: `Value: ${value2}`,
        }),
        Container.create({
            header: "bobwai--filter clear text value when press Escape button",
            content: Filter.create({
                value: value4,
                onChange: (v) => {
                    value4 = v;
                    b.invalidate();
                },
                onTextClear: () => {
                    value4 = "";
                    b.invalidate();
                },
                clearTextOnEscape: true,
            }),
            model: value4,
        }),
        Container.create({
            header: "bobwai--filter small variant",
            content: Filter.create({
                size: Filter.Size.Small,
                value: value,
                onChange: (v) => {
                    value = v;
                    b.invalidate();
                },
                onTextClear: () => {
                    value = "";
                    b.invalidate();
                },
            }),
        }),
        Container.create({
            header: "bobwai--filter disabled",
            content: Filter.create({
                size: Filter.Size.Default,
                value: value,
                onChange: (v) => {
                    value = v;
                    b.invalidate();
                },
                onTextClear: () => {
                    value = "";
                    b.invalidate();
                },
                isDisabled: true,
            }),
        }),
        Container.create({
            header: "bobwai--filter with custom filter icon",
            content: Filter.create({
                size: Filter.Size.Default,
                value: value,
                filterIcon: filterIcon,
                onChange: (v) => {
                    value = v;
                    b.invalidate();
                },
                onTextClear: () => {
                    value = "";
                    b.invalidate();
                },
            }),
        }),
        Container.create({
            header: "bobwai--filter with custom focus border color",
            content: [
                Filter.create({
                    size: Filter.Size.Default,
                    value: value,
                    customFocusBorderColor: customColor,
                    filterIcon: filterIcon,
                    onChange: (v) => {
                        value = v;
                        b.invalidate();
                    },
                    onTextClear: () => {
                        value = "";
                        b.invalidate();
                    },
                }),
                LField.create({
                    valueContentWidth: 125,
                    labelWidth: 150,
                    valueContent: ColorPicker.create({
                        value: customColor,
                        availableValues: defaultColor,
                        onChange: (value?: string) => {
                            customColor = value;
                            b.invalidate();
                        },
                    }),
                    labelContent: "Focus Border Color:",
                }),
            ],
        }),
        Container.create({
            header: "Filter with supporting right-to-left language",
            content: Filter.create({
                onChange: onChangeWithRtlLanguage,
                onTextClear: () => {
                    valueWithRtlLanguage = "";
                    b.invalidate();
                },
                value: valueWithRtlLanguage,
            }),
        }),
        Container.create({
            isForConstantOverride: true,
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField<boolean>({
                            label: "Enable Supporting Right To Left language",
                            labelWidth: 300,
                            value: enableRTL,
                            fieldFactory: Checkbox.create,
                            onChange: (v: boolean) => {
                                enableRTL = v;
                                Filter.setEnableRTL(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.Checkbox,
                        }),
                    ],
                }),
            ],
        }),
    ];
});
