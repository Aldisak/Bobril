import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as TooltipMessage from "bobwai--tooltip-message";
import * as RadioBtn from "bobwai--radio-button";
import * as Checkbox from "bobwai--checkbox";
import * as Example from "bobwai--example";
import * as Textbox from "bobwai--textbox";
import * as StateIcon from "bobwai--state-icon";
import * as Icon from "bobwai--icon";
import * as Spinner from "bobwai--spinner";
import * as Combobox from "bobwai--combobox";
import * as LField from "bobwai--l-field";
import * as LFieldGroup from "bobwai--l-field-group";
import * as TooltipEmplacer from "../src/lib";

let actualPreferedPlacement: TooltipEmplacer.Placement;
let actualSecondaryPreferedPlacement: TooltipEmplacer.Placement | undefined;
let actualBackground: string;
let timeDelay = 500;
let hasBorder = false;
let zoomRatio = 1;
let isVisibilityForced: boolean | undefined = undefined;

let left = false;
let right = false;
let topCenter = false;
let topLeft = false;
let topRight = false;
let bottomCenter = false;
let bottomLeft = false;
let bottomRight = false;

let secondaryUndefinated = true;
let secondaryLeft = false;
let secondaryRight = false;
let secondaryTopCenter = false;
let secondaryTopLeft = false;
let secondaryTopRight = false;
let secondaryBottomCenter = false;
let secondaryBottomLeft = false;
let secondaryBottomRight = false;

let parentElementsContainsScroll = false;
let isHiddenForPartiallyVisibleContent = false;
let isScrollableParentBlock = false;

let textboxValue = "text";

let messageVariants: string[] = [
    "Filled string - tooltip is created",
    "Empty string - no tooltip",
    "Filled array - tooltip is created",
    "Empty array - no tooltip",
    "Undefined - no tooltip"
];
let messageVariant: string = messageVariants[0];
let ellipsisWidth: TooltipEmplacer.EllipsisWidth;

let tooltipData = (): any => {
    return {
        tooltipHeader: "Tooltip header",
        tooltipMessage: ["Tooltip message 1", "Tooltip message 2"],
        preferedPlacement: actualPreferedPlacement,
        secondaryPreferedPlacement: actualSecondaryPreferedPlacement,
        customTheme: actualBackground ? { background: actualBackground } : null,
        openDelay: timeDelay,
        zoomRatio: zoomRatio,
        isVisibilityForced: isVisibilityForced
    };
};

Example.init({ preferredHeight: Example.PreferredHeight.Medium }, () => {
    return [
        Container.create({
            header: "bobwai--tooltip-emplacer",
            content: [
                getRadioButtons(),
                b.styledDiv(
                    [
                        TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                            content: mockContent({ right: "auto", bottom: "auto" })
                        })),
                        TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                            content: mockContent({ left: "auto", bottom: "auto" })
                        })),
                        TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                            content: mockContent({ left: "auto", top: "auto" })
                        })),
                        TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                            content: mockContent({ top: "auto" })
                        })),
                        TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                            content: mockContent({ left: "50%", top: "50%", right: "auto", bottom: "auto" })
                        })),
                        TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                            content: mockContent({ left: 250, right: "auto", bottom: "auto", position: "fixed" })
                        })),
                        TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                            content: mockContent({ left: "auto", bottom: "auto", position: "fixed" })
                        }))
                    ],
                    exampleStyle
                )
            ]
        }),
        Container.create({
            header: "Scrollable parent",
            description: "Current Limitation: works for max. 1 active scroll among parent elements (except window scroll)",
            content: [
                Checkbox.create({
                    title:
                        "computePositionFromVisibleContent - after change you have to move with scrollbar to invalidate whole tooltip position",
                    value: parentElementsContainsScroll,
                    isDisabled: isHiddenForPartiallyVisibleContent,
                    onChange: v => {
                        parentElementsContainsScroll = v;
                        b.invalidate();
                    }
                }),
                Checkbox.create({
                    title:
                        "isTooltipHiddenForPartiallyInvisibleContent - when content (blue box) is partially hidden, tooltip will not be displayed",
                    value: isHiddenForPartiallyVisibleContent,
                    onChange: v => {
                        isHiddenForPartiallyVisibleContent = v;
                        b.invalidate();
                    }
                }),
                Checkbox.create({
                    title: "Test - scrollable parent is block",
                    value: isScrollableParentBlock,
                    onChange: v => {
                        isScrollableParentBlock = v;
                        b.invalidate();
                    }
                }),
                b.styledDiv(
                    b.styledDiv(
                        [
                            TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                                hideOnClick: true,
                                computePositionFromVisibleContent: parentElementsContainsScroll,
                                isHiddenForPartiallyVisibleContent: isHiddenForPartiallyVisibleContent,
                                content: mockContent({
                                    left: 200,
                                    top: 50,
                                    right: "auto",
                                    bottom: "auto",
                                    position: "relative",
                                    height: 150
                                })
                            })),
                            TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                                hideOnClick: true,
                                computePositionFromVisibleContent: parentElementsContainsScroll,
                                isHiddenForPartiallyVisibleContent: isHiddenForPartiallyVisibleContent,
                                content: mockContent({
                                    left: 200,
                                    top: 50,
                                    right: "auto",
                                    bottom: "auto",
                                    position: "relative",
                                    height: 150,
                                    width: 1000,
                                    background: "#ff920b"
                                })
                            }))
                        ],
                        {
                            padding: 100,
                            height: 100,
                            width: isScrollableParentBlock ? "auto" : 500,
                            overflow: "auto",
                            border: "1px solid black",
                            display: isScrollableParentBlock ? "block" : "inline-block",
                            whiteSpace: "nowrap",
                            textAlign: "left"
                        }
                    )
                )
            ]
        }),
        Container.create({
            header: 'Tooltip with "hideOnClick" settings property',
            content: TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                hideOnClick: true,
                content: StateIcon.create({
                    content: Icon.create({ sprite: b.sprite(Icon.accept_large_png, "#FF6600") }),
                    hoverContent: Icon.create({ sprite: b.sprite(Icon.accept_large_png, "#FF4400") }),
                    onClick: () => {
                        alert("Item was clicked and tooltip was removed");
                    }
                })
            }))
        }),
        Container.create({
            header: "Tooltip with textbox in content",
            content: TooltipEmplacer.create(<TooltipEmplacer.IData>b.assign(tooltipData(), {
                hideOnClick: true,
                content: Textbox.create({
                    value: textboxValue,
                    onChange: (text: string) => {
                        textboxValue = text;
                        b.invalidate();
                    }
                })
            }))
        }),
        Container.create({
            header: "Tooltip message variant",
            isTest: true,
            content: getTooltipMessageVariantsContent()
        })
    ];
});

let exampleStyle = b.styleDef({
    background: "#fff",
    height: 250,
    position: "relative"
});

function getTooltipMessageVariantsContent(): b.IBobrilChildren {
    let tooltipMessage: string | string[] | undefined;
    let tooltipValue: string = "";
    switch (messageVariant) {
        case messageVariants[0]:
            tooltipMessage = "Value lorem ipsum dolor sit amet";
            tooltipValue = '"Value lorem ipsum dolor sit amet"';
            break;
        case messageVariants[1]:
            tooltipMessage = "";
            tooltipValue = '""';
            break;
        case messageVariants[2]:
            tooltipMessage = ["Value1 lorem ipsum dolor sit amet", "Value2 scelerisque nec leo eu, interdum accumsan neque"];
            tooltipValue = '["Value1 lorem ipsum dolor sit amet", "Value2 scelerisque nec leo eu, interdum accumsan neque"]';
            break;
        case messageVariants[3]:
            tooltipMessage = ["", ""];
            tooltipValue = '["", ""]';
            break;
        case messageVariants[4]:
            tooltipMessage = undefined;
            tooltipValue = "undefined";
            break;
    }

    const labelWidth: number = 220;
    const contentWidth: number = 300;
    return [
        LFieldGroup.create({
            children: [
                LField.create({
                    labelContent: "Message variants",
                    labelWidth: labelWidth,
                    valueContent: Combobox.create({
                        value: messageVariant,
                        items: messageVariants.map(item => {
                            return <Combobox.IItem>{ value: item, label: item };
                        }),
                        onChange: (value: string) => {
                            messageVariant = value;
                            b.invalidate();
                        }
                    }),
                    valueContentWidth: contentWidth
                }),
                LField.create({
                    labelContent: "Tooltip message value (read only)",
                    labelWidth: labelWidth,
                    valueContent: Textbox.create({
                        value: tooltipValue,
                        isReadOnlyWithBorder: true,
                        onChange: () => {}
                    }),
                    valueContentWidth: contentWidth
                }),
                LField.create({
                    labelContent: "EllipsisWidth",
                    labelWidth: labelWidth,
                    valueContent: Example.createComboEnum({
                        comboboxFactory: Combobox.create,
                        enum: TooltipEmplacer.EllipsisWidth,
                        value: ellipsisWidth,
                        onChange: value => {
                            ellipsisWidth = value;
                        }
                    }),
                    valueContentWidth: contentWidth
                })
            ]
        }),
        TooltipEmplacer.create({
            content: mockContent({ position: "relative" }),
            tooltipMessage: tooltipMessage,
            ellipsisWidth: ellipsisWidth
        })
    ];
}
let getRadioButtons = (): b.IBobrilNode => {
    return b.styledDiv(
        [
            b.styledDiv(
                [
                    /*
                     * PREFERED PLACEMENT
                     */
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Prefered placement - left",
                        value: left,
                        onChange: value => {
                            if (value) {
                                actualPreferedPlacement = TooltipEmplacer.Placement.left;
                            }
                            left = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Prefered placement - right",
                        value: right,
                        onChange: value => {
                            if (value) {
                                actualPreferedPlacement = TooltipEmplacer.Placement.right;
                            }
                            right = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Prefered placement - topCenter (DEFAULT)",
                        value: topCenter,
                        onChange: value => {
                            if (value) {
                                actualPreferedPlacement = TooltipEmplacer.Placement.topCenter;
                            }
                            topCenter = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Prefered placement - topLeft",
                        value: topLeft,
                        onChange: value => {
                            if (value) {
                                actualPreferedPlacement = TooltipEmplacer.Placement.topLeft;
                            }
                            topLeft = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Prefered placement - topRight",
                        value: topRight,
                        onChange: value => {
                            if (value) {
                                actualPreferedPlacement = TooltipEmplacer.Placement.topRight;
                            }
                            topRight = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Prefered placement - bottomCenter",
                        value: bottomCenter,
                        onChange: value => {
                            if (value) {
                                actualPreferedPlacement = TooltipEmplacer.Placement.bottomCenter;
                            }
                            bottomCenter = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Prefered placement - bottomLeft",
                        value: bottomLeft,
                        onChange: value => {
                            if (value) {
                                actualPreferedPlacement = TooltipEmplacer.Placement.bottomLeft;
                            }
                            bottomLeft = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Prefered placement - bottomRight",
                        value: bottomRight,
                        onChange: value => {
                            if (value) {
                                actualPreferedPlacement = TooltipEmplacer.Placement.bottomRight;
                            }
                            bottomRight = value;
                            b.invalidate();
                        }
                    }),
                    { tag: "br" },

                    /*
                     * SECONDARY PREFERED PLACEMENT
                     */
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary prefered placement - not definated (DEFAULT)",
                        value: secondaryUndefinated,
                        onChange: value => {
                            if (value) {
                                actualSecondaryPreferedPlacement = undefined;
                            }
                            secondaryUndefinated = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary prefered placement - left",
                        value: secondaryLeft,
                        onChange: value => {
                            if (value) {
                                actualSecondaryPreferedPlacement = TooltipEmplacer.Placement.left;
                            }
                            secondaryLeft = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary prefered placement - right",
                        value: secondaryRight,
                        onChange: value => {
                            if (value) {
                                actualSecondaryPreferedPlacement = TooltipEmplacer.Placement.right;
                            }
                            secondaryRight = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary prefered placement - topCenter",
                        value: secondaryTopCenter,
                        onChange: value => {
                            if (value) {
                                actualSecondaryPreferedPlacement = TooltipEmplacer.Placement.topCenter;
                            }
                            secondaryTopCenter = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary prefered placement - topLeft",
                        value: secondaryTopLeft,
                        onChange: value => {
                            if (value) {
                                actualSecondaryPreferedPlacement = TooltipEmplacer.Placement.topLeft;
                            }
                            secondaryTopLeft = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary prefered placement - topRight",
                        value: secondaryTopRight,
                        onChange: value => {
                            if (value) {
                                actualSecondaryPreferedPlacement = TooltipEmplacer.Placement.topRight;
                            }
                            secondaryTopRight = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary prefered placement - bottomCenter",
                        value: secondaryBottomCenter,
                        onChange: value => {
                            if (value) {
                                actualSecondaryPreferedPlacement = TooltipEmplacer.Placement.bottomCenter;
                            }
                            secondaryBottomCenter = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary prefered placement - bottomLeft",
                        value: secondaryBottomLeft,
                        onChange: value => {
                            if (value) {
                                actualSecondaryPreferedPlacement = TooltipEmplacer.Placement.bottomLeft;
                            }
                            secondaryBottomLeft = value;
                            b.invalidate();
                        }
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary prefered placement - bottomRight",
                        value: secondaryBottomRight,
                        onChange: value => {
                            if (value) {
                                actualSecondaryPreferedPlacement = TooltipEmplacer.Placement.bottomRight;
                            }
                            secondaryBottomRight = value;
                            b.invalidate();
                        }
                    }),
                    { tag: "br" },

                    /*
                     * CUSTOM BACKGROUND COLOR
                     */
                    b.styledDiv(
                        Textbox.create({
                            value: actualBackground,
                            placeholder: "Custom background color (#515151)",
                            onChange: value => {
                                actualBackground = value;
                                b.invalidate();
                            }
                        }),
                        { width: 250 }
                    ),
                    { tag: "br" },

                    /*
                    * CUSTOM DELAY TIME
                    */
                    b.styledDiv(
                        [
                            "Custom time delay: ",
                            Spinner.create({
                                minValue: 0,
                                variant: Spinner.variant.Vertical,
                                useLoopMode: true,
                                value: timeDelay,
                                onChange: (value: number) => {
                                    timeDelay = value;
                                    b.invalidate();
                                }
                            }),
                            " (DEFAULT 500ms)"
                        ],
                        { width: 400 }
                    ),
                    { tag: "br" },

                    /*
                    * ZOOM
                    */
                    b.styledDiv(
                        [
                            "ZoomRatio: ",
                            Spinner.create({
                                minValue: 0.1,
                                maxValue: 2,
                                step: 0.01,
                                decimalPlaces: 2,
                                variant: Spinner.variant.Vertical,
                                value: zoomRatio,
                                onChange: (value: number) => {
                                    zoomRatio = value;
                                    b.invalidate();
                                }
                            }),
                            " (DEFAULT 1)"
                        ],
                        { width: 400 }
                    ),
                    { tag: "br" },

                    /*
                     * HAS BORDER
                     */
                    b.styledDiv(
                        Checkbox.create({
                            value: hasBorder,
                            title: "Has border",
                            onChange: value => {
                                hasBorder = value;
                                b.invalidate();
                            }
                        }),
                        { width: 250 }
                    ),
                    { tag: "br" },

                    /*
                    * FORCE
                    */
                    b.styledDiv(
                        [
                            "IsVisibilityForced: ",
                            Combobox.create({
                                items: [
                                    { value: undefined, label: "undefined" },
                                    { value: true, label: "true" },
                                    { value: false, label: "false" }
                                ],
                                value: isVisibilityForced,
                                onChange: (value: boolean | undefined) => {
                                    isVisibilityForced = value;
                                    b.invalidate();
                                }
                            }),
                            " (DEFAULT undefined)"
                        ],
                        { width: 400 }
                    ),
                    { tag: "br" }
                ],
                { cssFloat: "left" }
            ),
            getTooltipMessageExample(actualPreferedPlacement)
        ],
        {
            clear: "both",
            marginBottom: 40,
            overflow: "hidden"
        }
    );
};

interface IMockContentData {
    left?: number | string;
    top?: number | string;
    right?: number | string;
    bottom?: number | string;
    position?: string;
    height?: number;
    width?: number;
    background?: string;
}
function mockContent(d: IMockContentData): b.IBobrilNode {
    return b.styledDiv("Tooltip test element", {
        display: "inline-block",
        width: d.width || 150,
        height: d.height || 30,
        lineHeight: "30px",
        textAlign: "center",
        background: d.background || "#0895D6",
        left: d.left !== undefined ? d.left : 0,
        top: d.top !== undefined ? d.top : 0,
        right: d.right !== undefined ? d.right : 0,
        bottom: d.bottom !== undefined ? d.bottom : 0,
        position: d.position || "absolute",
        marginBottom: 1000
    });
}

function getTooltipMessageExample(placement: TooltipEmplacer.Placement): b.IBobrilChildren {
    return [
        b.styledDiv(
            TooltipMessage.create({
                header: "Example of tooltip message",
                message: "This tooltip-message showing preferred placement of tooltip",
                placement: placement,
                customTheme: actualBackground ? { background: actualBackground } : undefined,
                hasBorder: hasBorder,
                zoomRatio: zoomRatio
            }),
            {
                padding: 30,
                border: "1px solid #515151",
                display: "inline-block",
                marginLeft: 50,
                background: "#0c0c0c"
            }
        )
    ];
}
