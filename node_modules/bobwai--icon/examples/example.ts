import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as Color from "bobwai--color";
import * as Checkbox from "bobwai--checkbox";
import * as Mixins from "bobwai--style-mixins";
import * as Filter from "bobwai--filter";
import * as FormElements from "bobwai--form-elements";
import * as LField from "bobwai--l-field";
import * as sprites from "../src/sprites";
import * as Icon from "../src/lib";

const iconSampleStyle = b.styleDef({
    backgroundColor: Color.Grey100,
    margin: 5,
    height: 65,
    width: 200,
    position: "relative",
    padding: 5,
    display: "inline-block",
    textAlign: "center",
    verticalAlign: "middle",
});

const nameStyle = b.styleDef([
    Mixins.lineEllipsis(),
    {
        paddingTop: 5,
    },
]);

const iconPreviewStyle = b.styleDef({
    height: 40,
});

interface IIconExample {
    [key: string]: any;
}

const largeIconPostfix = "_large_png";
let showAllSizes = false;
let filterValue = "";
let filterValueLowerCase = "";

Example.init({}, () => {
    const allIcons: IIconExample = sprites;
    return [
        Container.create({
            header: "Modify color",
            content: [
                Icon.create({ sprite: b.sprite(Icon.add_contact_large_png, Color.Grey500) }),
                Icon.create({ sprite: b.sprite(Icon.add_contact_large_png, Color.Basic) }),
                Icon.create({ sprite: b.sprite(Icon.add_contact_large_png, Color.Application) }),
                Icon.create({ sprite: b.sprite(Icon.add_contact_large_png, Color.Grey500_30) }),
                Icon.create({ sprite: b.sprite(Icon.add_contact_large_png, Color.Basic_30) }),
                Icon.create({ sprite: b.sprite(Icon.add_contact_large_png, Color.Error) }),
            ],
        }),
        Container.create({
            header: "All icons",
            content: [
                LField.create({
                    labelContent: "Icon name:",
                    labelWidth: FormElements.LabelWidth.Label300,
                    valueContentWidth: 200,
                    valueContent: Filter.create({
                        clearTextOnEscape: true,
                        value: filterValue,
                        onChange: (v: string) => {
                            updateFilterValue(v);
                        },
                        isOnChangeWithDelay: true,
                        onTextClear: () => {
                            updateFilterValue("");
                        },
                    }),
                }),
                LField.create({
                    labelContent: Checkbox.create({
                        title: "Show all sizes",
                        value: showAllSizes,
                        onChange: (v: boolean) => {
                            showAllSizes = v;
                            b.invalidate();
                        },
                    }),
                    labelWidth: FormElements.LabelWidth.Label300,
                }),
                Object.keys(allIcons)
                    .filter((name) => {
                        return showIcon(name);
                    })
                    .map((name) =>
                        b.styledDiv(
                            [b.styledDiv(Icon.create({ sprite: allIcons[name] }), iconPreviewStyle), b.styledDiv(name, nameStyle)],
                            iconSampleStyle
                        )
                    ),
            ],
        }),
    ];
});

function showIcon(name: string): boolean {
    const tempName = name.toLowerCase().trim();
    const showBySize = showAllSizes || name.indexOf(largeIconPostfix) > -1;
    const showByName = filterValueLowerCase.length === 0 || tempName.indexOf(filterValueLowerCase) > -1;
    return showBySize && showByName;
}

function updateFilterValue(value: string): void {
    filterValue = value;
    filterValueLowerCase = value.toLowerCase().trim();
    b.invalidate();
}
