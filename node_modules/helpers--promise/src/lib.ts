export interface IPromiseWithTypedError<TValue, TError> {
    then<TResult>(
        onfulfilled?: (value: TValue) => TResult | PromiseLike<TResult>,
        onrejected?: (reason: TError) => TResult | PromiseLike<TResult>
    ): IPromiseWithTypedError<TResult, TError>;
    then<TResult>(
        onfulfilled?: (value: TValue) => TResult | PromiseLike<TResult>,
        onrejected?: (reason: TError) => void
    ): IPromiseWithTypedError<TResult, TError>;

    catch(onrejected?: (reason: TError) => TValue | PromiseLike<TValue>): IPromiseWithTypedError<TValue, TError>;
    catch(onrejected?: (reason: TError) => void): IPromiseWithTypedError<TValue, TError>;
}

export interface IPromiseWithoutError<TValue> {
    then<TResult>(onfulfilled?: (value: TValue) => TResult | PromiseLike<TResult>): IPromiseWithoutError<TResult>;
}
