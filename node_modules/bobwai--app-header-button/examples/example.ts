import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Combobox from "bobwai--combobox";
import * as HeaderButton from "../src/lib";
import * as Icon from "bobwai--icon";
import * as Color from "bobwai--color";
import * as Example from "bobwai--example";
import * as TooltipEmplacer from "bobwai--tooltip-emplacer";
import * as Checkbox from "bobwai--checkbox";

let type: HeaderButton.Type | undefined;
let theme: HeaderButton.Theme | undefined;
let paddingSize: HeaderButton.Padding | undefined;

function modeOptions(): b.IBobrilChildren {
    return [
        Example.createControlPanel({
            items: [
                Example.createField({
                    label: "Note",
                    fieldType: Example.FieldType.Note,
                    value: "Configuration is propagated into all examples below",
                }),
                Example.createField({
                    label: "Type",

                    customValueContent: Example.createComboEnum({
                        comboboxFactory: Combobox.create,
                        onChange: (v) => {
                            type = v;
                            b.invalidate();
                        },
                        enum: HeaderButton.Type,
                        value: type,
                    }),
                }),
                Example.createField({
                    label: "Padding size",

                    customValueContent: Example.createComboEnum({
                        comboboxFactory: Combobox.create,
                        onChange: (v) => {
                            paddingSize = v;
                            b.invalidate();
                        },
                        enum: HeaderButton.Padding,
                        value: paddingSize,
                    }),
                    note: "Padding size, make sense only for NAVIGATION type button",
                }),
                Example.createField({
                    label: "Theme",
                    customValueContent: Example.createComboEnum({
                        comboboxFactory: Combobox.create,
                        onChange: (v) => {
                            theme = v;
                            b.invalidate();
                        },
                        enum: HeaderButton.Theme,
                        value: theme,
                    }),
                }),
            ],
        }),
    ];
}

let onClick = (): boolean => {
    alert("click");
    b.invalidate();
    return true;
};

let enableRTL = true;
let titleWithRtlLanguage = "Button أتمنى لك نهارا سعيد end";
const icon = Icon.create({ sprite: b.sprite(Icon.user_small_png, Color.White_75) });
const iconForLightTheme = Icon.create({ sprite: b.sprite(Icon.user_small_png, Color.Basic_80) });

const hoveredIcon = Icon.create({ sprite: b.sprite(Icon.user_small_png, Color.White) });
const hoveredIconForLightTheme = Icon.create({ sprite: b.sprite(Icon.user_small_png, Color.Basic) });

const rightIcon = Icon.create({ sprite: b.sprite(Icon.sort_desc_small_png, Color.White_75) });
const rightIconForLightTheme = Icon.create({ sprite: b.sprite(Icon.sort_desc_small_png, Color.Basic_80) });

const rightHoveredIcon = Icon.create({ sprite: b.sprite(Icon.sort_desc_small_png, Color.White) });
const rightHoveredIconForLightTheme = Icon.create({ sprite: b.sprite(Icon.sort_desc_small_png, Color.Basic) });

const customTheme: HeaderButton.ITheme = { color: "yellow", hoverColor: "red" };
const newStyleCustomTheme: HeaderButton.ITheme = {
    hoverColor: Color.White,
    selectedBackgroundColor: Color.Chart_Blue500,
    backgroundColor: Color.Chart_Orange700,
};

function getIcon(): b.IBobrilNode {
    return theme === HeaderButton.Theme.Light ? iconForLightTheme : icon;
}
function getHoverIcon(): b.IBobrilNode {
    return theme === HeaderButton.Theme.Light ? hoveredIconForLightTheme : hoveredIcon;
}
function getRightIcon(): b.IBobrilNode {
    return theme === HeaderButton.Theme.Light ? rightIconForLightTheme : rightIcon;
}
function getRightHoverIcon(): b.IBobrilNode {
    return theme === HeaderButton.Theme.Light ? rightHoveredIconForLightTheme : rightHoveredIcon;
}

function button(data: HeaderButton.IData, isSiblingButton?: boolean): b.IBobrilNode {
    return b.styledDiv(HeaderButton.create(b.assign(data, { type: type, theme: theme, padding: paddingSize })), {
        display: "inline-block",
        paddingRight: isSiblingButton ? undefined : 10,
    });
}

function getContainerBackground(): Container.Background | undefined {
    return theme === HeaderButton.Theme.Light ? Container.Background.Dark : undefined;
}

function buttonWithoutPadding(data: HeaderButton.IData): b.IBobrilNode {
    return b.styledDiv(HeaderButton.create(b.assign(data, { type: type, theme: theme })), { display: "inline-block" });
}

let mouseEventTxt = ``;
const onMouseEvent = (enter: boolean): boolean => {
    mouseEventTxt = enter ? `onMouseEnter event fired` : `onMouseLeave event fired`;
    b.invalidate();
    return true;
};

Example.init({}, () => {
    HeaderButton.setEnableRTL(enableRTL);
    return [
        modeOptions(),
        Container.create({
            background: getContainerBackground(),
            header: "Default",
            description:
                "Navigation type button is used in main navigation (usually on the left side of header ). Action type button should be used as right header action for current page",
            content: [
                button({ onClick: onClick, title: "BUTTON", icon: getIcon(), hoveredIcon: getHoverIcon() }),
                button({
                    onClick: onClick,
                    title: "BUTTON",
                }),
                button({
                    onClick: onClick,
                    title: "BUTTON",
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    rightIcon: getRightIcon(),
                    rightHoveredIcon: getRightHoverIcon(),
                }),
                button({
                    onClick: onClick,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                }),
                button({
                    title: "BUTTON",
                    onClick: onClick,
                    rightIcon: getRightIcon(),
                    rightHoveredIcon: getRightHoverIcon(),
                }),
                button({
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    onClick: onClick,
                    rightIcon: getRightIcon(),
                    rightHoveredIcon: getRightHoverIcon(),
                }),
                button(
                    {
                        onClick: onClick,
                        isSelected: true,
                        siblingButtons: HeaderButton.SiblingButtons.Right,
                        icon: getIcon(),
                        rightHoveredIcon: getHoverIcon(),
                    },
                    true
                ),
                button(
                    {
                        onClick: onClick,
                        siblingButtons: HeaderButton.SiblingButtons.Both,
                        icon: getIcon(),
                        rightHoveredIcon: getHoverIcon(),
                    },
                    true
                ),
                button({
                    onClick: onClick,
                    siblingButtons: HeaderButton.SiblingButtons.Left,
                    icon: getIcon(),
                    rightHoveredIcon: getHoverIcon(),
                }),
                button({ onClick: onClick, title: "SELECTED", isSelected: true, icon: getIcon(), hoveredIcon: getHoverIcon() }),
                button({ onClick: onClick, title: "DISABLED", isDisabled: true, icon: getIcon(), hoveredIcon: getHoverIcon() }),
                button({ title: "LINK", icon: getIcon(), hoveredIcon: getHoverIcon(), url: "http://google.com" }),
                button({ title: "No link, no click ( so no focus )", icon: getIcon(), hoveredIcon: getHoverIcon() }),
            ],
        }),
        Container.create({
            background: getContainerBackground(),
            header: "with preIconTitle - specific configuration for Interactive",
            description: "Make sense only in case left icon and normal title is defined",
            type: Container.Type.experimental,
            content: [
                button({ preIconTitle: "Pre title", title: "Title", icon: getIcon(), hoveredIcon: getHoverIcon(), onClick }),
                button({
                    preIconTitle: "Pre title",
                    title: "Disabled",
                    isDisabled: true,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    onClick,
                }),
                button({
                    preIconTitle: "Pre title",
                    title: "Selected",
                    isSelected: true,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    onClick,
                }),
                button({
                    preIconTitle: "Pre title",
                    title: "Link",
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    url: "http://google.com",
                }),
            ],
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Icon + title + rightIcon",
            content: button({
                onClick: onClick,
                title: "2.0.0",
                icon: getIcon(),
                hoveredIcon: getHoverIcon(),
                rightIcon: getRightIcon(),
                rightHoveredIcon: getRightHoverIcon(),
            }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Icon + title + URL",
            description: "If URL is set, it can be opened via middle button click or standard browser menu",
            content: button({ title: "CONTROL CENTER", icon: getIcon(), hoveredIcon: getHoverIcon(), url: "http://google.com" }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Icon + title + tooltip",
            content: button({
                onClick: onClick,
                title: "CONTROL CENTER",
                icon: getIcon(),
                hoveredIcon: getHoverIcon(),
                tooltip: { tooltipHeader: "CONTROL CENTER" },
            }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Icon only + tooltip with non default placement",
            content: button({
                onClick: onClick,
                icon: getIcon(),
                hoveredIcon: getHoverIcon(),
                tooltip: { tooltipHeader: "CONTROL CENTER" },
                tooltipPreferredPlacement: TooltipEmplacer.Placement.right,
            }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Icon + title with Small padding",
            content: button({
                onClick: onClick,
                title: "CONTROL CENTER",
                icon: getIcon(),
                hoveredIcon: getHoverIcon(),
                padding: HeaderButton.Padding.Small,
            }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Title only",
            content: button({ onClick: onClick, title: "HELP" }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Icon only",
            content: button({ onClick: onClick, icon: getIcon(), hoveredIcon: hoveredIcon }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Selected",
            content: button({ onClick: onClick, title: "CONFIGURATION", icon: getIcon(), hoveredIcon: getHoverIcon(), isSelected: true }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Disabled button with icon + title",
            content: button({
                title: "ALL CHANGES HAVE BEEN SAVED",
                onClick: onClick,
                icon: getIcon(),
                hoveredIcon: getHoverIcon(),
                isDisabled: true,
            }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Disabled button with icon only",
            content: button({ onClick: onClick, icon: getIcon(), hoveredIcon: getHoverIcon(), isDisabled: true }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Disabled button with title only",
            content: button({ title: "ALL CHANGES HAVE BEEN SAVED", onClick: onClick, isDisabled: true }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Custom theme (color+HoverColor)",
            content: [
                button({ onClick: onClick, title: "CUSTOM THEME", customTheme: customTheme }),
                button({ onClick: onClick, title: "CUSTOM THEME SELECTED", isSelected: true, customTheme: customTheme }),
                button({ title: "CUSTOM THEME DISABLED", onClick: onClick, isDisabled: true, customTheme: customTheme }),
            ],
        }),
        Container.create({
            background: getContainerBackground(),
            isTest: true,
            header: "No onClick event => no hover style TEST",
            content: button({ title: "CONTROL CENTER", icon: getIcon(), hoveredIcon: hoveredIcon }),
        }),
        Container.create({
            background: getContainerBackground(),
            isTest: true,
            header: "No onClick event + title only => no hover style TEST",
            content: button({ title: "ALL CHANGES HAVE BEEN SAVED" }),
        }),
        Container.create({
            background: getContainerBackground(),
            isTest: true,
            header: "Not hovered icon TEST",
            content: button({ onClick: onClick, title: "ALL CHANGES HAVE BEEN SAVED", icon: icon }),
        }),
        Container.create({
            background: getContainerBackground(),
            isTest: true,
            header: "Empty button TEST",
            content: button({ onClick: onClick }),
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Sibling buttons (use when section contains more buttons)",
            content: [
                buttonWithoutPadding({
                    onClick: onClick,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    siblingButtons: HeaderButton.SiblingButtons.Right,
                }),
                buttonWithoutPadding({
                    onClick: onClick,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    siblingButtons: HeaderButton.SiblingButtons.Both,
                }),
                buttonWithoutPadding({
                    onClick: onClick,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    siblingButtons: HeaderButton.SiblingButtons.Left,
                }),
            ],
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Sibling buttons with small padding (use when section contains more buttons)",
            content: [
                buttonWithoutPadding({
                    onClick: onClick,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    siblingButtons: HeaderButton.SiblingButtons.Right,
                    padding: HeaderButton.Padding.Small,
                }),
                buttonWithoutPadding({
                    onClick: onClick,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    siblingButtons: HeaderButton.SiblingButtons.Both,
                    padding: HeaderButton.Padding.Small,
                }),
                buttonWithoutPadding({
                    onClick: onClick,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    siblingButtons: HeaderButton.SiblingButtons.Left,
                    padding: HeaderButton.Padding.Small,
                }),
            ],
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Sibling with dropdown",
            content: [
                buttonWithoutPadding({
                    onClick: onClick,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    siblingButtons: HeaderButton.SiblingButtons.Right,
                    padding: HeaderButton.Padding.Small,
                }),
                buttonWithoutPadding({
                    onClick: onClick,
                    icon: getIcon(),
                    hoveredIcon: getHoverIcon(),
                    siblingButtons: HeaderButton.SiblingButtons.Right,
                    padding: HeaderButton.Padding.Small,
                }),
            ],
        }),
        Container.create({
            background: getContainerBackground(),
            header: "New theme style",
            description: "White hover color, orange background, blue selected background",
            type: Container.Type.experimental,
            content: [
                button({ onClick: onClick, title: "NEW THEME", customTheme: newStyleCustomTheme }),
                button({ onClick: onClick, title: "NEW THEME  - SELECTED", isSelected: true, customTheme: newStyleCustomTheme }),
            ],
            model: newStyleCustomTheme,
        }),
        Container.create({
            background: getContainerBackground(),
            header: "onMouseEnter onMouseLeave callbacks",
            type: Container.Type.default,
            content: [
                button({
                    onClick: onClick,
                    title: "onMouseEnter onMouseLeave events",
                    onMouseEnter: () => onMouseEvent(true),
                    onMouseLeave: () => onMouseEvent(false),
                }),
                b.styledDiv(
                    { children: mouseEventTxt },
                    {
                        display: "inline-block",
                        verticalAlign: "bottom",
                        lineHeight: "50px",
                        fontSize: "14px",
                        margin: "0 10px",
                    }
                ),
            ],
        }),
        Container.create({
            background: getContainerBackground(),
            header: "Button with supporting right-to-left language",
            content: button({
                onClick: onClick,
                title: titleWithRtlLanguage,
                icon: getIcon(),
                hoveredIcon: getHoverIcon(),
            }),
        }),
        Container.create({
            background: getContainerBackground(),
            isForConstantOverride: true,
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField<boolean>({
                            label: "Enable Supporting Right To Left language",
                            labelWidth: 300,
                            value: enableRTL,
                            fieldFactory: Checkbox.create,
                            onChange: (v: boolean) => {
                                enableRTL = v;
                                HeaderButton.setEnableRTL(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.Checkbox,
                        }),
                    ],
                }),
            ],
        }),
    ];
});
