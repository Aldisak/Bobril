import * as FormElements from "bobwai--form-elements";

export interface IWebContentAccessibility {
    /** Standard html element id attribute */
    id?: string;
    ariaLabel?: string;
    isDisabled?: boolean;
    isPressed?: boolean;
    isSelected?: boolean;
    /** Should be used in rare case - e.g. if
     * standard button has right arrow and is used for expand some independent section -
     * in case that element opens some popup window use popup settings instead of this
     */
    isExpanded?: boolean;
    role?: ContentAccessibilityRole;
    tooltip?: FormElements.ITooltipData;
    /** Use role dropdown as well */
    // TODO discuss and rename to something more descriptive - maybe merge it with popup
    dropdown?: IContentAccessibilityDropdown;
    sorting?: ContentAccessibilityShorting;
    isModal?: boolean;
    ariaLive?: ContentAccessibilityLive;
    popup?: IContentAccessibilityPopupState;
    /** Use role textbox as well.
     * Should be used for multiline textbox -> textarea
     */
    isMultiline?: boolean;
    /** Element will be hidden only for screen readers */
    isHidden?: boolean;
    /** Use e.g. as additional state information for checkbox or radio button */
    isChecked?: boolean;
    /** Use for e.g. listbox or menu with items, or tree list */
    listState?: IContentAccessibilityListState;
    /** Use e.g. for the filter and fill it with id of list element which is   */
    controlledElementId?: string;
    /** For the input with filtered items in listbox below. E.g. combobox items filter input */
    autocomplete?: ContentAccessibilityAutocomplete;
    /** For additional information in case of listbox or tree view */
    itemState?: IItemState;
    /** Mainly for datepicker and selected day */
    current?: ContentAccessibilityCurrentAttribute;
    /** Validation state in case of error */
    validationState?: ContentAccessibilityValidationState;
    /** for creating extra hidden element with validation message
     * validation validationMessageNodeId has to be also set
     */
    validationMessage?: string | string[];
    /** id of extra hidden element with validation messages
     * validationMessage property has to be also set
     */
    validationMessageNodeId?: string;
    /**
     * Can be used as additional information for input (note below input)
     * In case of validation message, validation message is preferred
     */
    descriptionNodeId?: string;

    /** id of related label
     *  should be used for the component which can not be paired with related native label via "for" attribute (via labelForInputId property)
     *  Native label "for" attribute works only with native inputs
     */
    nodeRelatedLabelId?: string;

    /** Set role spinner as well
     * There are additional settings
     */
    spinnerSettings?: IContentAccessibilitySpinner;
    /** Set role header as well
     * There are additional settings
     */
    headerSettings?: IContentAccessibilityHeader;
    /** In case of form set whether the field is required */
    isRequired?: boolean;
    /** Add special alt attribute for alternative text - it make sense mainly for IMG element */
    alternativeDescription?: string;
    /** id of related input element - used in bobwai--label to pair label with input */
    labelForInputId?: string;
}

export interface IContentAccessibilityHeader {
    headerLevel: ContentAccessibilityHeaderLevel;
}

export enum ContentAccessibilityHeaderLevel {
    H1 = 1,
    H2 = 2,
    H3 = 3,
    H4 = 4,
    H5 = 5,
}

export interface IContentAccessibilitySpinner {
    currentValue?: string | number;
    valueMax?: string | number;
    valueMin?: string | number;
}

export enum ContentAccessibilityAutocomplete {
    None,
    List,
}

export enum ContentAccessibilityValidationState {
    Valid,
    Invalid,
}

export enum ContentAccessibilityCurrentAttribute {
    Date,
}

export interface IItemState {
    /** For tree list item */
    level?: number;
    /** If items in tree view or list are lazy renderer - so not all items are visible at once in the DOM,
     *  you can set total count of item and actual index of the item
     */
    lazyRenderedState?: ILazyRendererItemState;
}

export interface ILazyRendererItemState {
    index: number;
    totalCountOfItems: number;
}

export interface IContentAccessibilityListState {
    /** Id of actual (virtually) focused item in the list */
    activeItemId: string | undefined;
}

export interface IContentAccessibilityDropdown {
    isExpanded: boolean;
    /** TODO add enum for list type */
    isListAsPopUp?: boolean;
    isTreeAsPopUp?: boolean;
}

export enum ContentAccessibilityShorting {
    None = "none",
    Ascending = "ascending",
    Descending = "descending",
}

export enum ContentAccessibilityRole {
    Button = "button",
    Link = "link",
    // TODO rename to listbox role
    Dropdown = "listbox",
    Dialog = "dialog",
    ColumnHeader = "columnheader",
    Menu = "menu",
    MenuItem = "menuitem",
    Checkbox = "checkbox",
    Textbox = "textbox",
    RadioGroup = "radiogroup",
    Radio = "radio",
    Tree = "tree",
    TreeItem = "treeitem",
    Option = "option",
    Combobox = "combobox",
    Group = "group",
    Application = "application",
    Spinner = "spinbutton",
    Header = "heading",
    /** For the case that HTML structure is only for visual purpose - e.g. display: table for styling purpose */
    Presentation = "presentation",
    Alert = "alert",
    Form = "form",
}

export enum ContentAccessibilityLive {
    Silent = "silent",
    Polite = "polite",
    Assertive = "assertive",
}

export interface IContentAccessibilityPopupState {
    isExpanded: boolean;
}
