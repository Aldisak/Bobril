import * as b from "bobril";
import * as FormElements from "bobwai--form-elements";
import { AriaAttributeName, AriaAttributeValue } from "./webContentAccessibilityAttributes";
import {
    IWebContentAccessibility,
    ContentAccessibilityRole,
    ContentAccessibilityAutocomplete,
    ContentAccessibilityCurrentAttribute,
    ContentAccessibilityValidationState,
} from "./data";

export const ariaLabelSentenceSeparatorChar: string = " ";

/**
 * Some components has special accessibility behavior and needs to set accessibility in some special way
 */
export enum ContentAccessibilityComponentType {
    Checkbox,
}

export function setWebContentAccessibilityAttributes(
    me: b.IBobrilNode,
    webContentAccessibility: IWebContentAccessibility,
    componentType?: ContentAccessibilityComponentType
): void {
    if (me.attrs === undefined) {
        me.attrs = {};
    }

    if (webContentAccessibility.ariaLabel || webContentAccessibility.tooltip) {
        let ariaLabel = "";
        if (webContentAccessibility.ariaLabel) {
            ariaLabel += webContentAccessibility.ariaLabel;
        }
        if (webContentAccessibility.tooltip) {
            const tooltipTexts = resolveTooltipToAriaLabel(webContentAccessibility.tooltip);
            if (tooltipTexts !== undefined) {
                if (ariaLabel) {
                    ariaLabel += ariaLabelSentenceSeparatorChar;
                }
                ariaLabel += tooltipTexts;
            }
        }

        if (ariaLabel) {
            me.attrs[AriaAttributeName.label] = ariaLabel;
        }
    }

    if (webContentAccessibility.role) {
        me.attrs[AriaAttributeName.role] = webContentAccessibility.role.toString();
    }

    if (webContentAccessibility.isDisabled !== undefined) {
        me.attrs[AriaAttributeName.disabled] = webContentAccessibility.isDisabled;
    }

    if (webContentAccessibility.isPressed !== undefined) {
        me.attrs[AriaAttributeName.pressed] = webContentAccessibility.isPressed;
    }

    if (webContentAccessibility.dropdown) {
        if (webContentAccessibility.dropdown.isListAsPopUp) {
            me.attrs[AriaAttributeName.hasPopup] = AriaAttributeValue.hasPopupListbox;
        }
        if (webContentAccessibility.dropdown.isTreeAsPopUp) {
            me.attrs[AriaAttributeName.hasPopup] = AriaAttributeValue.hasPopupTree;
        }
        me.attrs[AriaAttributeName.expanded] = webContentAccessibility.dropdown.isExpanded;
    }

    if (webContentAccessibility.sorting) {
        me.attrs[AriaAttributeName.sort] = webContentAccessibility.sorting.toString();
    }

    if (webContentAccessibility.isSelected !== undefined) {
        me.attrs[AriaAttributeName.selected] = webContentAccessibility.isSelected;
    }

    if (webContentAccessibility.popup) {
        me.attrs[AriaAttributeName.hasPopup] = true;
        if (webContentAccessibility.popup.isExpanded !== undefined) {
            me.attrs[AriaAttributeName.expanded] = webContentAccessibility.popup.isExpanded;
        }
    }

    if (webContentAccessibility.isExpanded !== undefined) {
        me.attrs[AriaAttributeName.expanded] = webContentAccessibility.isExpanded;
    }

    if (webContentAccessibility.isModal !== undefined) {
        me.attrs[AriaAttributeName.isModal] = webContentAccessibility.isModal;
    }

    if (webContentAccessibility.ariaLive) {
        me.attrs[AriaAttributeName.live] = webContentAccessibility.ariaLive;
    }

    if (webContentAccessibility.isMultiline !== undefined && webContentAccessibility.role === ContentAccessibilityRole.Textbox) {
        me.attrs[AriaAttributeName.multiline] = webContentAccessibility.isMultiline;
    }

    if (webContentAccessibility.isHidden !== undefined) {
        me.attrs[AriaAttributeName.hidden] = webContentAccessibility.isHidden;
    }

    if (webContentAccessibility.isChecked !== undefined) {
        me.attrs[AriaAttributeName.checked] = webContentAccessibility.isChecked;
    }

    if (webContentAccessibility.listState !== undefined) {
        if (webContentAccessibility.listState.activeItemId !== undefined) {
            me.attrs[AriaAttributeName.activeListItemId] = webContentAccessibility.listState.activeItemId;
        }
    }

    if (webContentAccessibility.controlledElementId !== undefined) {
        me.attrs[AriaAttributeName.controls] = webContentAccessibility.controlledElementId;
    }

    if (webContentAccessibility.id !== undefined) {
        me.attrs[AriaAttributeName.id] = webContentAccessibility.id;
    }

    if (webContentAccessibility.autocomplete !== undefined) {
        if (webContentAccessibility.autocomplete === ContentAccessibilityAutocomplete.List) {
            me.attrs[AriaAttributeName.autocomplete] = AriaAttributeValue.autocompleteList;
        }
    }

    if (webContentAccessibility.itemState) {
        if (webContentAccessibility.itemState.level !== undefined) {
            me.attrs[AriaAttributeName.level] = webContentAccessibility.itemState.level;
        }
        if (webContentAccessibility.itemState.lazyRenderedState) {
            me.attrs[AriaAttributeName.positionSet] = webContentAccessibility.itemState.lazyRenderedState.index;
            me.attrs[AriaAttributeName.setSize] = webContentAccessibility.itemState.lazyRenderedState.totalCountOfItems;
        }
    }

    if (webContentAccessibility.current !== undefined) {
        if (webContentAccessibility.current === ContentAccessibilityCurrentAttribute.Date) {
            me.attrs[AriaAttributeName.current] = AriaAttributeValue.currentDate;
        }
    }

    if (webContentAccessibility.validationState !== undefined) {
        if (webContentAccessibility.validationState === ContentAccessibilityValidationState.Invalid) {
            me.attrs[AriaAttributeName.invalid] = true;
        }
        if (webContentAccessibility.validationState === ContentAccessibilityValidationState.Valid) {
            me.attrs[AriaAttributeName.invalid] = false;
        }
    }

    if (webContentAccessibility.spinnerSettings !== undefined && webContentAccessibility.role === ContentAccessibilityRole.Spinner) {
        if (webContentAccessibility.spinnerSettings.currentValue !== undefined) {
            me.attrs[AriaAttributeName.valueNow] = webContentAccessibility.spinnerSettings.currentValue;
        }
        if (webContentAccessibility.spinnerSettings.valueMax !== undefined) {
            me.attrs[AriaAttributeName.valueMax] = webContentAccessibility.spinnerSettings.valueMax;
        }
        if (webContentAccessibility.spinnerSettings.valueMin !== undefined) {
            me.attrs[AriaAttributeName.valueMin] = webContentAccessibility.spinnerSettings.valueMin;
        }
    }

    if (webContentAccessibility.headerSettings !== undefined && webContentAccessibility.role === ContentAccessibilityRole.Header) {
        me.attrs[AriaAttributeName.level] = webContentAccessibility.headerSettings.headerLevel;
    }

    if (webContentAccessibility.isRequired !== undefined) {
        me.attrs[AriaAttributeName.required] = webContentAccessibility.isRequired;
    }

    if (webContentAccessibility.alternativeDescription !== undefined) {
        me.attrs[AriaAttributeName.alternativeDescription] = webContentAccessibility.alternativeDescription;
    }

    if (webContentAccessibility.validationMessageNodeId && webContentAccessibility.validationMessage) {
        me.attrs[AriaAttributeName.describedBy] = webContentAccessibility.validationMessageNodeId;
    } else if (webContentAccessibility.descriptionNodeId) {
        me.attrs[AriaAttributeName.describedBy] = webContentAccessibility.descriptionNodeId;
    }

    if (webContentAccessibility.labelForInputId !== undefined) {
        me.attrs[AriaAttributeName.labelFor] = webContentAccessibility.labelForInputId;
    }

    if (webContentAccessibility.nodeRelatedLabelId !== undefined) {
        // if labelledby and native label for are set for checkbox - the label is read twice - so in this case do not set labelledby
        // labelled by is set automatically inside form-item, so if checkbox has alread set labelForInputId (on input it is via id attribute), nodeRelatedLabelId should not be used
        if (
            componentType !== ContentAccessibilityComponentType.Checkbox ||
            (componentType === ContentAccessibilityComponentType.Checkbox && !webContentAccessibility.id)
        ) {
            me.attrs[AriaAttributeName.labelledBy] = webContentAccessibility.nodeRelatedLabelId;
        }
    }
}

export function resolveTooltipToAriaLabel(tooltip: FormElements.ITooltipData): string | undefined {
    if (tooltip) {
        let tooltipText = "";

        if (tooltip.tooltipHeader) {
            tooltipText += tooltip.tooltipHeader;
            if (tooltip.tooltipMessage) {
                tooltipText += ariaLabelSentenceSeparatorChar;
            }
        }
        if (tooltip.tooltipMessage) {
            if (b.isArray(tooltip.tooltipMessage)) {
                tooltipText += tooltip.tooltipMessage.join(ariaLabelSentenceSeparatorChar);
            } else {
                tooltipText += tooltip.tooltipMessage;
            }
        }
        if (tooltipText) {
            return tooltipText.trim();
        }
    }
    return undefined;
}
