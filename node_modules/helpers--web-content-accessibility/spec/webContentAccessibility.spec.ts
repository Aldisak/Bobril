import * as b from "bobril";
import * as FormElements from "bobwai--form-elements";

import {
    resolveTooltipToAriaLabel,
    setWebContentAccessibilityAttributes,
    ariaLabelSentenceSeparatorChar,
    ContentAccessibilityComponentType,
} from "../src/webContentAccessibility";

import {
    ContentAccessibilityRole,
    ContentAccessibilityShorting,
    ContentAccessibilityLive,
    ContentAccessibilityAutocomplete,
    ContentAccessibilityCurrentAttribute,
    ContentAccessibilityValidationState,
    ContentAccessibilityHeaderLevel,
    IWebContentAccessibility,
} from "../src/data";

describe("Web content accessibility", () => {
    beforeEach(() => {});

    it("ResolveTooltipToAriaLabel: Should parse tooltip message into aria text", () => {
        const emptyMessageTooltip: FormElements.ITooltipData = {
            tooltipMessage: "",
        };

        const emptyHeaderTooltip: FormElements.ITooltipData = {
            tooltipHeader: "",
        };

        const tooltipWithoutHeader: FormElements.ITooltipData = {
            tooltipMessage: "Tooltip message without header",
        };

        const tooltipWithHeader: FormElements.ITooltipData = {
            tooltipHeader: "Header message",
            tooltipMessage: "Tooltip message with header",
        };

        const tooltipWithArray: FormElements.ITooltipData = {
            tooltipHeader: "Header message for tooltip with array",
            tooltipMessage: ["First tooltip message", "Second tooltip message"],
        };

        const ariaLabelEmptyMessage = resolveTooltipToAriaLabel(emptyMessageTooltip);
        expect(ariaLabelEmptyMessage).toBe(undefined);

        const ariaLabelEmptyHeader = resolveTooltipToAriaLabel(emptyHeaderTooltip);
        expect(ariaLabelEmptyHeader).toBe(undefined);

        const ariaLabelFromTooltipWithoutHeader = resolveTooltipToAriaLabel(tooltipWithoutHeader);
        expect(ariaLabelFromTooltipWithoutHeader).toBe(<string>tooltipWithoutHeader.tooltipMessage);

        const ariaLabelFromTooltipWithHeader = resolveTooltipToAriaLabel(tooltipWithHeader);
        expect(ariaLabelFromTooltipWithHeader).toBe(
            tooltipWithHeader.tooltipHeader + ariaLabelSentenceSeparatorChar + tooltipWithHeader.tooltipMessage
        );

        const ariaLabelFromTooltipWithArray = resolveTooltipToAriaLabel(tooltipWithArray);
        expect(ariaLabelFromTooltipWithArray).toBe(
            tooltipWithArray.tooltipHeader +
                ariaLabelSentenceSeparatorChar +
                tooltipWithArray.tooltipMessage![0] +
                ariaLabelSentenceSeparatorChar +
                tooltipWithArray.tooltipMessage![1]
        );
    });

    it("setWebContentAccessibilityAttributes: Should add correct aria attribute", () => {
        const testNode: b.IBobrilNode = {};
        const accessibilityConfiguration: IWebContentAccessibility = {
            ariaLabel: "some aria label",
            isDisabled: true,
            isPressed: true,
            isSelected: true,
            role: ContentAccessibilityRole.Button,
            tooltip: {
                tooltipHeader: "Tooltip header",
                tooltipMessage: "Tooltip message",
            },
            sorting: ContentAccessibilityShorting.Ascending,
            isModal: false,
            popup: { isExpanded: true },
            ariaLive: ContentAccessibilityLive.Polite,
        };

        setWebContentAccessibilityAttributes(testNode, accessibilityConfiguration);
        expect(testNode.attrs).toBeDefined();
        expect(testNode.attrs!["aria-label"]).toBe(
            accessibilityConfiguration.ariaLabel +
                ariaLabelSentenceSeparatorChar +
                accessibilityConfiguration.tooltip!.tooltipHeader +
                ariaLabelSentenceSeparatorChar +
                accessibilityConfiguration.tooltip!.tooltipMessage
        );
        expect(testNode.attrs!["role"]).toBe(accessibilityConfiguration.role);
        expect(testNode.attrs!["aria-disabled"]).toBe(accessibilityConfiguration.isDisabled);
        expect(testNode.attrs!["aria-pressed"]).toBe(accessibilityConfiguration.isPressed);
        expect(testNode.attrs!["aria-sort"]).toBe(accessibilityConfiguration.sorting);
        expect(testNode.attrs!["aria-modal"]).toBe(accessibilityConfiguration.isModal);
        expect(testNode.attrs!["aria-live"]).toBe(accessibilityConfiguration.ariaLive);
        expect(testNode.attrs!["aria-haspopup"]).toBe(true);
        expect(testNode.attrs!["aria-expanded"]).toBe(accessibilityConfiguration.popup!.isExpanded);
        expect(testNode.attrs!["aria-selected"]).toBe(accessibilityConfiguration.isSelected);
    });

    it("setWebContentAccessibilityDropdown: Should add correct aria attribute", () => {
        const testNode: b.IBobrilNode = {};
        const accessibilityConfiguration: IWebContentAccessibility = {
            ariaLabel: "some aria label",
            role: ContentAccessibilityRole.Dropdown,
            dropdown: {
                isListAsPopUp: true,
                isExpanded: false,
            },
        };

        setWebContentAccessibilityAttributes(testNode, accessibilityConfiguration);
        expect(testNode.attrs).toBeDefined();
        expect(testNode.attrs!["aria-label"]).toBe(accessibilityConfiguration.ariaLabel);
        expect(testNode.attrs!["role"]).toBe(accessibilityConfiguration.role);
        expect(testNode.attrs!["aria-haspopup"]).toBe("listbox");
        expect(testNode.attrs!["aria-expanded"]).toBe(accessibilityConfiguration.dropdown!.isExpanded);

        const testNodeWithoutPopupExpanded: b.IBobrilNode = {};
        const accessibilityConfigurationWithoutPopupExpanded: IWebContentAccessibility = {
            dropdown: {
                isListAsPopUp: false,
                isExpanded: true,
            },
        };
        setWebContentAccessibilityAttributes(testNodeWithoutPopupExpanded, accessibilityConfigurationWithoutPopupExpanded);
        expect(testNodeWithoutPopupExpanded.attrs!["aria-haspopup"]).toBeUndefined();
        expect(testNodeWithoutPopupExpanded.attrs!["aria-expanded"]).toBe(
            accessibilityConfigurationWithoutPopupExpanded.dropdown!.isExpanded
        );
    });

    it("setWebContentAccessibilityRole: role attributes", () => {
        const columnHeaderNode: b.IBobrilNode = {};
        const columnHeaderRoleConfiguration: IWebContentAccessibility = {
            role: ContentAccessibilityRole.ColumnHeader,
        };

        setWebContentAccessibilityAttributes(columnHeaderNode, columnHeaderRoleConfiguration);
        expect(columnHeaderNode.attrs).toBeDefined();
        expect(columnHeaderNode.attrs!["role"]).toBe(columnHeaderRoleConfiguration.role);

        const linkNode: b.IBobrilNode = {};
        const linkRoleConfiguration: IWebContentAccessibility = {
            role: ContentAccessibilityRole.Link,
        };

        setWebContentAccessibilityAttributes(linkNode, linkRoleConfiguration);
        expect(linkNode.attrs).toBeDefined();
        expect(linkNode.attrs!["role"]).toBe(linkRoleConfiguration.role);
    });
    it("setWebContentAccessibilityAttributes: popup attributes should be set always and expanded attribute only if it has true value", () => {
        const testNode: b.IBobrilNode = {};
        let popupAccessibilityConfiguration: IWebContentAccessibility = {
            popup: { isExpanded: false },
        };

        setWebContentAccessibilityAttributes(testNode, popupAccessibilityConfiguration);
        expect(testNode.attrs).toBeDefined();
        expect(testNode.attrs!["aria-haspopup"]).toBe(true);
        expect(testNode.attrs!["aria-expanded"]).toBe(false);

        popupAccessibilityConfiguration = {
            popup: { isExpanded: true },
        };

        setWebContentAccessibilityAttributes(testNode, popupAccessibilityConfiguration);
        expect(testNode.attrs).toBeDefined();
        expect(testNode.attrs!["aria-haspopup"]).toBe(true);
        expect(testNode.attrs!["aria-expanded"]).toBe(true);
    });

    it("setWebContentAccessibilityDropdown: Should set correct expanded attribute", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            isExpanded: true,
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-expanded"]).toBe(true);

        testConfiguration.isExpanded = false;
        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-expanded"]).toBe(false);
    });

    it("setWebContentAccessibilityChecked: Should set correct checked state", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            role: ContentAccessibilityRole.Checkbox,
            isChecked: false,
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["role"]).toBe("checkbox");
        expect(testNode.attrs!["aria-checked"]).toBe(false);

        testConfiguration.isChecked = true;
        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-checked"]).toBe(true);
    });

    it("setWebContentAccessibilityAttributes: Textbox role should have corresponding multiline settings", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            role: ContentAccessibilityRole.Textbox,
            isMultiline: true,
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["role"]).toBe("textbox");
        expect(testNode.attrs!["aria-multiline"]).toBe(true);

        testConfiguration.isMultiline = false;
        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-multiline"]).toBe(false);
    });

    it("setWebContentAccessibilityAttributes: hidden attribute should be set correctly", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            isHidden: true,
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-hidden"]).toBe(true);

        testConfiguration.isHidden = false;
        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-hidden"]).toBe(false);
    });

    it("setWebContentAccessibility: configuration for the combobox should be set correctly into node attributes", () => {
        const comboboxNode: b.IBobrilNode = {};
        const comboboxListNode: b.IBobrilNode = {};
        const comboboxInputNode: b.IBobrilNode = {};
        const comboboxListItemNode: b.IBobrilNode = {};

        const comboboxConfiguration: IWebContentAccessibility = {
            role: ContentAccessibilityRole.Button,
            dropdown: {
                isExpanded: true,
                isListAsPopUp: true,
            },
        };

        const comboboxListConfiguration: IWebContentAccessibility = {
            role: ContentAccessibilityRole.Dropdown,
            listState: {
                activeItemId: "item-1",
            },
            id: "combobox-listbox",
        };

        const filterInputConfiguration: IWebContentAccessibility = {
            ariaLabel: "Filter of items",
            controlledElementId: "elementId",
            autocomplete: ContentAccessibilityAutocomplete.List,
            listState: {
                activeItemId: "item-1",
            },
        };

        const comboboxListItemConfiguration: IWebContentAccessibility = {
            role: ContentAccessibilityRole.Option,
            isSelected: true,
            isDisabled: true,
            itemState: {
                level: 3,
                lazyRenderedState: {
                    index: 15,
                    totalCountOfItems: 1500,
                },
            },
        };

        setWebContentAccessibilityAttributes(comboboxNode, comboboxConfiguration);
        expect(comboboxNode.attrs!["role"]).toBe("button");
        expect(comboboxNode.attrs!["aria-expanded"]).toBe(true);
        expect(comboboxNode.attrs!["aria-haspopup"]).toBe("listbox");

        setWebContentAccessibilityAttributes(comboboxListNode, comboboxListConfiguration);
        expect(comboboxListNode.attrs!["role"]).toBe("listbox");
        expect(comboboxListNode.attrs!["aria-activedescendant"]).toBe("item-1");
        expect(comboboxListNode.attrs!["id"]).toBe("combobox-listbox");

        setWebContentAccessibilityAttributes(comboboxInputNode, filterInputConfiguration);
        expect(comboboxInputNode.attrs!["aria-activedescendant"]).toBe("item-1");
        expect(comboboxInputNode.attrs!["aria-autocomplete"]).toBe("list");
        expect(comboboxInputNode.attrs!["aria-controls"]).toBe("elementId");
        expect(comboboxInputNode.attrs!["aria-label"]).toBe("Filter of items");

        setWebContentAccessibilityAttributes(comboboxListItemNode, comboboxListItemConfiguration);
        expect(comboboxListItemNode.attrs!["role"]).toBe("option");
        expect(comboboxListItemNode.attrs!["aria-selected"]).toBe(true);
        expect(comboboxListItemNode.attrs!["aria-disabled"]).toBe(true);
        expect(comboboxListItemNode.attrs!["aria-setsize"]).toBe(1500);
        expect(comboboxListItemNode.attrs!["aria-posinset"]).toBe(15);
        expect(comboboxListItemNode.attrs!["aria-level"]).toBe(3);
    });

    it("setWebContentAccessibilityAttributes: current date should be set correctly", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            /** role does not effect on current.Date just for testing  */
            role: ContentAccessibilityRole.Application,
            current: ContentAccessibilityCurrentAttribute.Date,
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["role"]).toBe("application");
        expect(testNode.attrs!["aria-current"]).toBe("date");
    });

    it("setWebContentAccessibilityAttributes: validation state is set correctly", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            validationState: ContentAccessibilityValidationState.Invalid,
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-invalid"]).toBe(true);

        testConfiguration.validationState = ContentAccessibilityValidationState.Valid;
        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-invalid"]).toBe(false);
    });

    it("setWebContentAccessibilityAttributes: spinner additional settings is set correctly", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            role: ContentAccessibilityRole.Spinner,
            spinnerSettings: {
                currentValue: 0,
                valueMax: 0,
                valueMin: 0,
            },
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["role"]).toBe("spinbutton");
        expect(testNode.attrs!["aria-valuenow"]).toBe(0);
        expect(testNode.attrs!["aria-valuemin"]).toBe(0);
        expect(testNode.attrs!["aria-valuemax"]).toBe(0);

        testConfiguration.spinnerSettings = {
            currentValue: 1000,
            valueMin: -1000,
            valueMax: 10000,
        };
        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["role"]).toBe("spinbutton");
        expect(testNode.attrs!["aria-valuenow"]).toBe(1000);
        expect(testNode.attrs!["aria-valuemin"]).toBe(-1000);
        expect(testNode.attrs!["aria-valuemax"]).toBe(10000);
    });

    it("setWebContentAccessibilityAttributes: header role should have correct level", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            role: ContentAccessibilityRole.Header,
            headerSettings: {
                headerLevel: ContentAccessibilityHeaderLevel.H1,
            },
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["role"]).toBe("heading");
        expect(testNode.attrs!["aria-level"]).toBe(1);
    });

    it("setWebContentAccessibilityAttributes: required value is set correctly", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            isRequired: true,
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-required"]).toBe(true);
    });

    it("setWebContentAccessibilityAttributes: alt attribute is correctly added", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            alternativeDescription: "Some alternative description",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["alt"]).toBe("Some alternative description");
    });

    it("setWebContentAccessibilityAttributes: existing attributes on node are keeped", () => {
        const testNode: b.IBobrilNode = { attrs: { attribute1: "value", attribute2: "value" } };
        const testConfiguration: IWebContentAccessibility = {
            alternativeDescription: "Some alternative description",
            ariaLabel: "aria-label",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["attribute1"]).toBe("value");
        expect(testNode.attrs!["attribute2"]).toBe("value");
        expect(testNode.attrs!["alt"]).toBe("Some alternative description");
        expect(testNode.attrs!["aria-label"]).toBe("aria-label");
    });

    it("setWebContentAccessibilityAttributes: if validation message and validation node id are set it should add describe by attribute", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            validationMessageNodeId: "someId",
            validationMessage: "Validation message",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-describedby"]).toBe("someId");
    });

    it("setWebContentAccessibilityAttributes: if only validation message node id without validation message is set, described by attribute is ignored", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            validationMessageNodeId: "someId",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-describedby"]).toBeUndefined();
    });

    it("setWebContentAccessibilityAttributes: if description node id is set it should add described by attribute ", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            descriptionNodeId: "someId",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-describedby"]).toBe("someId");
    });

    it("setWebContentAccessibilityAttributes: when validation message, validation node id and description node id is set it should prefer only validation node id", () => {
        const testNode: b.IBobrilNode = {};
        // when description node id and validation message node id are set - validation node id is preferred (when also validation message is set)
        let testConfiguration: IWebContentAccessibility = {
            descriptionNodeId: "someDescriptionId",
            validationMessage: "Validation message",
            validationMessageNodeId: "someValidationNodeId",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-describedby"]).toBe("someValidationNodeId");

        // when validation message is missing, description node id should be used
        testConfiguration = {
            descriptionNodeId: "someDescriptionId",
            validationMessageNodeId: "someValidationNodeId",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-describedby"]).toBe("someDescriptionId");
    });

    it("setWebContentAccessibilityAttributes: label for is correctly set", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            labelForInputId: "labelForId",
            id: "someId",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["for"]).toBe("labelForId");
        expect(testNode.attrs!["id"]).toBe("someId");
    });

    it("setWebContentAccessibilityAttributes: label node id is correctly set as aria-labelledby", () => {
        const testNode: b.IBobrilNode = {};
        const testConfiguration: IWebContentAccessibility = {
            nodeRelatedLabelId: "labelId",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration);
        expect(testNode.attrs!["aria-labelledby"]).toBe("labelId");
    });

    it("setWebContentAccessibilityAttributes: nodeRelatedLabelId for checkbox should not be set if there is already set labelForInputId", () => {
        let testNode: b.IBobrilNode = {};
        let testConfiguration: IWebContentAccessibility = {
            nodeRelatedLabelId: "labelId",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration, ContentAccessibilityComponentType.Checkbox);
        expect(testNode.attrs!["aria-labelledby"]).toBe("labelId");

        testNode = {};
        testConfiguration = {
            nodeRelatedLabelId: "labelId",
            // if there is id, it means that labelForInputId on label was already set and therefore labelled by should not be set in case of combobox
            id: "someId",
        };

        setWebContentAccessibilityAttributes(testNode, testConfiguration, ContentAccessibilityComponentType.Checkbox);
        expect(testNode.attrs!["aria-labelledby"]).toBeUndefined();
    });
});
