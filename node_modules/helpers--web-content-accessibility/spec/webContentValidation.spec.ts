import { tryToGetAccessibleValidationMessageNode } from "../src/validationMessage";
import { IWebContentAccessibility } from "../src/data";

describe("Web content accessibility - tryToGetAccessibleValidationMessageNode", () => {
    it("tryToGetAccessibleValidationMessageNode: node is undefined if validation message is not set", () => {
        const accessibilityConfiguration: IWebContentAccessibility = {};

        const node = tryToGetAccessibleValidationMessageNode(accessibilityConfiguration);
        expect(node).toBeUndefined();
    });

    it("tryToGetAccessibleValidationMessageNode: node is defined and array of validation message is set as child", () => {
        const accessibilityConfiguration: IWebContentAccessibility = {
            validationMessageNodeId: "someId",
            validationMessage: ["Validation message 1", "Validation message 2"],
        };

        const node = tryToGetAccessibleValidationMessageNode(accessibilityConfiguration);
        expect(node).toBeDefined();
        expect(node!.attrs!["id"]).toBe("someId");
        expect(node!.children).toBe("Validation message 1 Validation message 2");
    });

    it("tryToGetAccessibleValidationMessageNode: node is defined and validation message is set as child", () => {
        const accessibilityConfiguration: IWebContentAccessibility = {
            validationMessageNodeId: "someId",
            validationMessage: "Validation message 1",
        };

        const node = tryToGetAccessibleValidationMessageNode(accessibilityConfiguration);
        expect(node).toBeDefined();
        expect(node!.attrs!["id"]).toBe("someId");
        expect(node!.children).toBe("Validation message 1");
    });
});
