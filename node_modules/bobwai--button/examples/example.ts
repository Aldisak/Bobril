import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Color from "bobwai--color";
import * as Button from "../src/lib";
import * as Icon from "bobwai--icon";
import * as Example from "bobwai--example";
import * as Textbox from "bobwai--textbox";
import * as FormElements from "bobwai--form-elements";
import { getControlPanelContainer } from "./src/controlPanel";

const spacer = { tag: "div", style: { margin: "15px", display: "inline-block" } };
const onClick = () => {
    alert("button has been clicked");
};

const iconForButton = Icon.create({ sprite: b.sprite(Icon.download_small_png, Color.White) });
const iconForTextButton = Icon.create({ sprite: b.sprite(Icon.download_small_png, Color.Basic) });
const forSignInPageOnlyMessage = "This variant should be used only on SignIn page";
let longLabelForDisplayedAsBlock = "For buttons with displayed as block is applied tooltip and ellipsis for very long labels.";

function container(
    header: string,
    containerType: Container.Type,
    isTest: boolean,
    highlightedDescription: string,
    a: any[],
    description?: string,
    id?: string
) {
    return Container.create({
        type: containerType,
        highlightedDescription: highlightedDescription,
        isTest: isTest,
        header: header,
        content: {
            tag: "div",
            style: { width: "100%", padding: "15px", position: "relative", boxSizing: "border-box" },
            children: a.reduce((prev, current) => {
                if (prev.length > 0) {
                    prev.push(spacer);
                }
                prev.push(current);
                return prev;
            }, []),
        },
        description: description,
        id: id,
    });
}

function createTextButtons(size: Button.Size, color?: Color.IColor, isDisabled?: boolean): b.IBobrilNode[] {
    const leftArrowIcon = Icon.create({ sprite: b.sprite(Icon.arrow_left_small_png, color ? color : Color.Basic) });
    const leftArrowIconHover = Icon.create({ sprite: b.sprite(Icon.arrow_left_small_png, Color.Application) });
    const rightArrowIcon = Icon.create({ sprite: b.sprite(Icon.arrow_right_small_png, color ? color : Color.Basic) });
    const rightArrowIconHover = Icon.create({ sprite: b.sprite(Icon.arrow_right_small_png, Color.Application) });
    const addIcon = Icon.create({ sprite: b.sprite(Icon.add_small_png, Color.Success) });
    const sortIcon = Icon.create({ sprite: b.sprite(Icon.sort_desc_small_png, color ? color : Color.Basic) });
    const sortIconHover = Icon.create({ sprite: b.sprite(Icon.sort_desc_small_png, Color.Application) });
    const sortIconXSmall = Icon.create({ sprite: b.sprite(Icon.sort_desc_xsmall_png, color ? color : Color.Basic) });
    const sortIconXSmallHover = Icon.create({ sprite: b.sprite(Icon.sort_desc_xsmall_png, Color.Application) });
    const detailIconSmall = Icon.create({ sprite: b.sprite(Icon.details_small_png, color ? color : Color.Basic) });
    const detailIconMedium = Icon.create({ sprite: b.sprite(Icon.details_medium_png, color ? color : Color.Basic) });
    const detailIconLarge = Icon.create({ sprite: b.sprite(Icon.details_large_png, color ? color : Color.Basic) });
    const detailIconSmallHover = Icon.create({ sprite: b.sprite(Icon.details_small_png, Color.Application) });
    const detailIconMediumHover = Icon.create({ sprite: b.sprite(Icon.details_medium_png, Color.Application) });
    const detailIconLargeHover = Icon.create({ sprite: b.sprite(Icon.details_large_png, Color.Application) });

    let detailsIcon = detailIconSmall;
    let detailsIconHover = detailIconSmallHover;
    switch (size) {
        case Button.Size.Medium: {
            detailsIcon = detailIconMedium;
            detailsIconHover = detailIconMediumHover;
            break;
        }
        case Button.Size.Large:
            detailsIcon = detailIconLarge;
            detailsIconHover = detailIconLargeHover;
            break;
    }

    const applicationColorStyle = color
        ? <Button.IButtonTheme>{
              color: color,
          }
        : undefined;

    return [
        Button.create({
            isDisabled: isDisabled,
            onClick: onClick,
            label: "CLOSE",
            size: size,
            color: Button.Theme.None,
            customTheme: applicationColorStyle,
        }),
        Button.create({
            leftIcon: leftArrowIcon,
            leftIconHover: leftArrowIconHover,
            isDisabled: isDisabled,
            onClick: onClick,
            label: "Previous",
            size: size,
            color: Button.Theme.None,
            customTheme: applicationColorStyle,
        }),
        Button.create({
            rightIcon: rightArrowIcon,
            rightIconHover: rightArrowIconHover,
            isDisabled: isDisabled,
            onClick: onClick,
            label: "Next",
            size: size,
            color: Button.Theme.None,
            customTheme: applicationColorStyle,
        }),
        Button.create({
            leftIcon: addIcon,
            isDisabled: isDisabled,
            onClick: onClick,
            label: "ADD",
            size: size,
            color: Button.Theme.None,
            customTheme: applicationColorStyle,
        }),
        Button.create({
            leftIcon: addIcon,
            rightIcon: sortIcon,
            rightIconHover: sortIconHover,
            rightIconWithoutIndent: true,
            isDisabled: isDisabled,
            onClick: onClick,
            label: "ADD CATEGORIZATION",
            size: size,
            color: Button.Theme.None,
            customTheme: applicationColorStyle,
        }),
        Button.create({
            leftIcon: detailsIcon,
            leftIconHover: detailsIconHover,
            rightIcon: sortIconXSmall,
            rightIconHover: sortIconXSmallHover,
            rightIconWithoutIndent: true,
            isDisabled: isDisabled,
            onClick: onClick,
            label: "",
            size: size,
            color: Button.Theme.None,
            customTheme: applicationColorStyle,
        }),
        b.styledDiv("See also bobwai--button-with-menu", {
            display: "inline-block",
            color: "red",
        }),
    ];
}

Example.init(
    {
        preferredHeight: Example.PreferredHeight.Medium,
    },
    () => {
        return [
            Container.create({
                type: Container.Type.typical,
                content: [getControlPanelContainer()],
            }),
            container(
                "Solid button color",
                Container.Type.typical,
                false,
                "",
                [
                    Button.create({ onClick: onClick, label: "Default button" }),

                    Button.create({
                        onClick: onClick,
                        label: "Primary button",
                        color: Button.Theme.App,
                    }),
                ],
                "A solid background with light text. These buttons are prominent on the page. " +
                    "Default - Button for most use cases. Use for non critical actions. Primary - " +
                    "Use for highest-priority actions that are required to complete the user’s task.",
                "solid"
            ),
            container(
                "Button sizes",
                Container.Type.typical,
                false,
                "",
                [
                    Button.create({ onClick: onClick, label: "Small", size: Button.Size.Small }),
                    Button.create({ onClick: onClick, label: "Medium", size: Button.Size.Medium }),
                    Button.create({ onClick: onClick, label: "Large", size: Button.Size.Large }),
                ],
                "Small - Use in condense variants. Medium – Default size. Large – usage for Sign In a Sign Up pages.",
                "sizes"
            ),
            container(
                "Button states",
                Container.Type.typical,
                false,
                "",
                [
                    Button.create({ onClick: onClick, label: "Warning", color: Button.Theme.Warning }),
                    Button.create({ onClick: onClick, label: "Error", color: Button.Theme.Error }),
                    Button.create({ onClick: onClick, label: "Disabled", isDisabled: true }),
                ],
                "A solid background with light text. These buttons are prominent on the page.",
                "states"
            ),
            container(
                "Button with left icon",
                Container.Type.typical,
                false,
                "",
                [Button.create({ onClick: onClick, label: "Button with left icon", leftIcon: iconForButton })],
                "Icon emphasize meaning to a button. Typical usage for Sign in page.",
                "icon"
            ),
            container(
                "Text button color",
                Container.Type.typical,
                false,
                "",
                [
                    Button.create({ onClick: onClick, label: "Default", color: Button.Theme.None }),

                    Button.create({
                        onClick: onClick,
                        label: "Primary",
                        color: Button.Theme.None,
                        customTheme: {
                            color: Color.Application,
                        },
                    }),
                ],
                "Use for tertiary actions including those located: In dialogs In cards.",
                "colorText"
            ),
            container(
                "Text Button sizes",
                Container.Type.typical,
                false,
                "",
                [
                    Button.create({ onClick: onClick, label: "Small", color: Button.Theme.None, size: Button.Size.Small }),
                    Button.create({ onClick: onClick, label: "Medium", color: Button.Theme.None, size: Button.Size.Medium }),
                    Button.create({ onClick: onClick, label: "Large", color: Button.Theme.None, size: Button.Size.Large }),
                ],
                undefined,
                "sizesText"
            ),
            container(
                "Button with left icon",
                Container.Type.typical,
                false,
                "",
                [Button.create({ onClick: onClick, label: "", leftIcon: iconForTextButton, color: Button.Theme.None })],
                "For the icon-only button variant, tooltip must also be always used.",
                "iconText"
            ),

            container("Button themes", Container.Type.default, false, "", [
                Button.create({ onClick: onClick, label: "Default button" }),

                Button.create({
                    onClick: onClick,
                    label: "Application button",
                    color: Button.Theme.App,
                }),

                Button.create({
                    onClick: onClick,
                    label: "Warning",
                    color: Button.Theme.Warning,
                }),

                Button.create({
                    onClick: onClick,
                    label: "Error",
                    color: Button.Theme.Error,
                }),
            ]),
            container("Button sizes", Container.Type.default, false, "", [
                Button.create({ onClick: onClick, label: "Large (experimental)", size: Button.Size.Large }),

                Button.create({ onClick: onClick, label: "Medium", size: Button.Size.Medium }),

                Button.create({ onClick: onClick, label: "Small", size: Button.Size.Small }),

                Button.create({ onClick: onClick, label: "Extra Small", size: Button.Size.ExtraSmall }),
            ]),
            container("Button disabled", Container.Type.default, false, "", [
                Button.create({
                    onClick: onClick,
                    color: Button.Theme.Warning,
                    size: Button.Size.ExtraSmall,
                    label: "Disabled Warning Extra Small",
                    isDisabled: true,
                }),

                Button.create({
                    onClick: onClick,
                    label: "Disabled",
                    isDisabled: true,
                }),

                Button.create({
                    onClick: onClick,
                    label: "Disabled Application",
                    size: Button.Size.Medium,
                    color: Button.Theme.App,
                    isDisabled: true,
                }),

                Button.create({
                    onClick: onClick,
                    label: "Disabled Large (experimental) Error",
                    size: Button.Size.Large,
                    color: Button.Theme.Error,
                    isDisabled: true,
                }),
            ]),
            container("Button with left icon", Container.Type.default, false, "", [
                Button.create({
                    leftIcon: iconForButton,
                    label: "Button with left icon",
                    onClick: onClick,
                }),
                Button.create({
                    leftIcon: iconForButton,
                    label: "Button with left icon",
                    onClick: onClick,
                    isDisabled: true,
                }),
                Button.create({
                    leftIcon: iconForButton,
                    label: "Button with left icon",
                    color: Button.Theme.App,
                    onClick: onClick,
                }),
                Button.create({
                    leftIcon: iconForButton,
                    label: "Button with left icon",
                    color: Button.Theme.App,
                    onClick: onClick,
                    isDisabled: true,
                }),
                Button.create({
                    leftIcon: iconForButton,
                    label: "Button with left icon",
                    color: Button.Theme.Warning,
                    onClick: onClick,
                }),
                Button.create({
                    leftIcon: iconForButton,
                    label: "Button with left icon",
                    color: Button.Theme.Warning,
                    onClick: onClick,
                    isDisabled: true,
                }),
                Button.create({
                    leftIcon: iconForButton,
                    label: "Button with left icon",
                    color: Button.Theme.Error,
                    onClick: onClick,
                }),
                Button.create({
                    leftIcon: iconForButton,
                    label: "Button with left icon",
                    color: Button.Theme.Error,
                    onClick: onClick,
                    isDisabled: true,
                }),
            ]),
            container("Button sizes with left icon", Container.Type.default, false, "", [
                Button.create({ onClick: onClick, label: "Large (experimental)", size: Button.Size.Large, leftIcon: iconForButton }),

                Button.create({ onClick: onClick, label: "Medium", size: Button.Size.Medium, leftIcon: iconForButton }),

                Button.create({ onClick: onClick, label: "Small", leftIcon: iconForButton }),

                Button.create({ onClick: onClick, label: "Extra Small", size: Button.Size.ExtraSmall, leftIcon: iconForButton }),
            ]),
            container("Button with DisplayAs block", Container.Type.default, false, "", [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            fieldFactory: Textbox.create,
                            fieldType: Example.FieldType.Textbox,
                            value: longLabelForDisplayedAsBlock,
                            onChange: (v) => {
                                longLabelForDisplayedAsBlock = v;
                                b.invalidate();
                            },
                            label: "Label for all block buttons",
                        }),
                    ],
                }),
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock,
                    displayAs: Button.DisplayAs.Block,
                }),
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock,
                    color: Button.Theme.None,
                    displayAs: Button.DisplayAs.Block,
                }),
            ]),
            container(
                "Button with DisplayAs block with left icon blockTitleTextAlign center",
                Container.Type.experimental,
                false,
                forSignInPageOnlyMessage,
                [
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForButton,
                        size: Button.Size.ExtraSmall,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForTextButton,
                        color: Button.Theme.None,
                        size: Button.Size.ExtraSmall,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForButton,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForTextButton,
                        color: Button.Theme.None,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForButton,
                        size: Button.Size.Medium,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForTextButton,
                        size: Button.Size.Medium,
                        color: Button.Theme.None,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock + " (EXPERIMENTAL)",
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForButton,
                        size: Button.Size.Large,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock + " (EXPERIMENTAL)",
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForTextButton,
                        size: Button.Size.Large,
                        color: Button.Theme.None,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                ]
            ),
            container(
                "Button with DisplayAs block with left icon blockTitleTextAlign left",
                Container.Type.experimental,
                false,
                forSignInPageOnlyMessage,
                [
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForButton,
                        size: Button.Size.ExtraSmall,
                        blockTitleTextAlign: FormElements.TextAlign.Left,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForTextButton,
                        color: Button.Theme.None,
                        size: Button.Size.ExtraSmall,
                        blockTitleTextAlign: FormElements.TextAlign.Left,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForButton,
                        blockTitleTextAlign: FormElements.TextAlign.Left,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        color: Button.Theme.None,
                        leftIcon: iconForTextButton,
                        blockTitleTextAlign: FormElements.TextAlign.Left,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForButton,
                        size: Button.Size.Medium,
                        blockTitleTextAlign: FormElements.TextAlign.Left,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock,
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForTextButton,
                        color: Button.Theme.None,
                        size: Button.Size.Medium,
                        blockTitleTextAlign: FormElements.TextAlign.Left,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock + " (experimental)",
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForButton,
                        size: Button.Size.Large,
                        blockTitleTextAlign: FormElements.TextAlign.Left,
                    }),
                    Button.create({
                        onClick: onClick,
                        label: longLabelForDisplayedAsBlock + " (experimental)",
                        displayAs: Button.DisplayAs.Block,
                        leftIcon: iconForTextButton,
                        size: Button.Size.Large,
                        color: Button.Theme.None,
                        blockTitleTextAlign: FormElements.TextAlign.Left,
                    }),
                ]
            ),
            container("Button with DisplayAs block with icon default behavior", Container.Type.default, false, "", [
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock,
                    displayAs: Button.DisplayAs.Block,
                    leftIcon: iconForButton,
                    size: Button.Size.ExtraSmall,
                }),
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock,
                    displayAs: Button.DisplayAs.Block,
                    leftIcon: iconForTextButton,
                    color: Button.Theme.None,
                    size: Button.Size.ExtraSmall,
                }),
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock,
                    displayAs: Button.DisplayAs.Block,
                    leftIcon: iconForButton,
                }),
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock,
                    displayAs: Button.DisplayAs.Block,
                    leftIcon: iconForTextButton,
                    color: Button.Theme.None,
                }),
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock,
                    displayAs: Button.DisplayAs.Block,
                    leftIcon: iconForButton,
                    size: Button.Size.Medium,
                }),
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock,
                    displayAs: Button.DisplayAs.Block,
                    leftIcon: iconForTextButton,
                    size: Button.Size.Medium,
                    color: Button.Theme.None,
                }),
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock + " (experimental)",
                    displayAs: Button.DisplayAs.Block,
                    leftIcon: iconForButton,
                    size: Button.Size.Large,
                }),
                Button.create({
                    onClick: onClick,
                    label: longLabelForDisplayedAsBlock + " (experimental)",
                    displayAs: Button.DisplayAs.Block,
                    leftIcon: iconForTextButton,
                    size: Button.Size.Large,
                    color: Button.Theme.None,
                }),
            ]),
            container("Text button variants", Container.Type.default, false, "", createTextButtons(Button.Size.Small)),
            container(
                "Text button variants with Application color",
                Container.Type.default,
                false,
                "",
                createTextButtons(Button.Size.Small, Color.Application)
            ),
            container("TEST: Button with long text", Container.Type.default, true, "", [
                Button.create({
                    onClick: onClick,
                    label: "This button has awkward long text with more than usual number of characters.",
                    size: Button.Size.Medium,
                    color: Button.Theme.Warning,
                }),
            ]),
            container(
                "TEST: Text button variants EXTRA SMALL",
                Container.Type.default,
                false,
                "",
                createTextButtons(Button.Size.ExtraSmall)
            ),
            container("TEST: Text button variants MEDIUM", Container.Type.default, true, "", createTextButtons(Button.Size.Medium)),
            container(
                "TEST: Text button variants MEDIUM with Application color",
                Container.Type.default,
                true,
                "",
                createTextButtons(Button.Size.Medium, Color.Application)
            ),
            container("TEST: Text button variants LARGE", Container.Type.experimental, true, "", createTextButtons(Button.Size.Large)),
            container(
                "TEST: Text button variants LARGE with Application color",
                Container.Type.experimental,
                true,
                "",
                createTextButtons(Button.Size.Large, Color.Application)
            ),
            container(
                "Disabled Text button variants",
                Container.Type.default,
                false,
                "",
                createTextButtons(Button.Size.Small, undefined, true)
            ),
            container("TEST: Buttons with and without text", Container.Type.default, true, "", [
                Button.create({
                    leftIcon: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Basic),
                    }),
                    leftIconHover: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Application),
                    }),
                    onClick: onClick,
                    label: "Default",
                    color: Button.Theme.None,
                }),
                Button.create({
                    leftIcon: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Basic),
                    }),
                    leftIconHover: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Application),
                    }),
                    onClick: onClick,
                    label: "",
                    color: Button.Theme.None,
                }),
                Button.create({
                    leftIcon: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Basic),
                    }),
                    leftIconHover: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Application),
                    }),
                    onClick: onClick,
                    label: "Small",
                    size: Button.Size.Small,
                    color: Button.Theme.None,
                }),
                Button.create({
                    leftIcon: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Basic),
                    }),
                    leftIconHover: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Application),
                    }),
                    onClick: onClick,
                    label: "",
                    size: Button.Size.Small,
                    color: Button.Theme.None,
                }),
                Button.create({
                    leftIcon: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Basic),
                    }),
                    leftIconHover: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Application),
                    }),
                    onClick: onClick,
                    label: "Medium",
                    size: Button.Size.Medium,
                    color: Button.Theme.None,
                }),
                Button.create({
                    leftIcon: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Basic),
                    }),
                    leftIconHover: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Application),
                    }),
                    onClick: onClick,
                    label: "",
                    size: Button.Size.Medium,
                    color: Button.Theme.None,
                }),
                Button.create({
                    leftIcon: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Basic),
                    }),
                    leftIconHover: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Application),
                    }),
                    onClick: onClick,
                    label: "Large (experimental)",
                    size: Button.Size.Large,
                    color: Button.Theme.None,
                }),
                Button.create({
                    leftIcon: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Basic),
                    }),
                    leftIconHover: Icon.create({
                        sprite: b.sprite(Icon.arrow_left_small_png, Color.Application),
                    }),
                    onClick: onClick,
                    label: "",
                    size: Button.Size.Large,
                    color: Button.Theme.None,
                }),
            ]),
            container("Some applications need custom theme for button (e.g. CPM)", Container.Type.default, false, "", [
                Button.create({
                    onClick: onClick,
                    label: "Button with custom background and color",
                    customTheme: { backgroundColor: "#D6C93E", color: "#000000" },
                }),
                Button.create({
                    onClick: onClick,
                    label: "Button with custom background and color - disabled",
                    isDisabled: true,
                    customTheme: { backgroundColor: "#D6C93E", color: "#000000" },
                }),
                Button.create({
                    onClick: onClick,
                    label: "Button with custom background",
                    customTheme: { backgroundColor: "#D6C93E" },
                }),
                Button.create({
                    onClick: onClick,
                    label: "Button with custom background - disabled",
                    isDisabled: true,
                    customTheme: { backgroundColor: "#D6C93E" },
                }),
                Button.create({
                    onClick: onClick,
                    label: "Button with custom color",
                    color: Button.Theme.App,
                    customTheme: { color: "#ff0000" },
                }),
                Button.create({
                    onClick: onClick,
                    label: "Button with custom color - disabled",
                    color: Button.Theme.App,
                    isDisabled: true,
                    customTheme: { color: "#ff0000" },
                }),
                b.styledDiv(
                    Button.create({
                        onClick: onClick,
                        label: "Facebook",
                        leftIcon: Icon.create({ sprite: b.sprite(Icon.facebook_small_png, Color.White) }),
                        customTheme: { backgroundColor: "#3b5998" },
                        displayAs: Button.DisplayAs.Block,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                    { width: 300, marginTop: 20 }
                ),
                b.styledDiv(
                    Button.create({
                        onClick: onClick,
                        label: "LDAP",
                        leftIcon: Icon.create({ sprite: b.sprite(Icon.view_of_comments_from_cjm_small_png, Color.White) }),
                        color: Button.Theme.App,
                        displayAs: Button.DisplayAs.Block,
                        blockTitleTextAlign: FormElements.TextAlign.Center,
                    }),
                    { width: 300 }
                ),
            ]),
            Container.create({
                isForConstantOverride: true,
                content: [
                    Example.createControlPanel({
                        items: [
                            Example.createField<Color.IColor>({
                                label: "TextThemeForegroundColor",
                                onChange: (v: Color.IColor) => {
                                    Button.setTextThemeForegroundColor(v);
                                    b.invalidateStyles();
                                },
                                fieldType: Example.FieldType.IColor,
                            }),
                            Example.createField<Color.IColor>({
                                label: "TextThemeForegroundDisabledColor",
                                onChange: (v: Color.IColor) => {
                                    Button.setTextThemeForegroundDisabledColor(v);
                                    b.invalidateStyles();
                                },
                                fieldType: Example.FieldType.IColor,
                            }),
                            Example.createField<Color.IColor>({
                                label: "TextThemeForegroundHoverColor",
                                onChange: (v: Color.IColor) => {
                                    Button.setTextThemeForegroundHoverColor(v);
                                    b.invalidateStyles();
                                },
                                fieldType: Example.FieldType.IColor,
                            }),
                        ],
                    }),
                ],
            }),
        ];
    }
);
