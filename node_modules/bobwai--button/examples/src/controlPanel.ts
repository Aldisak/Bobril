import * as b from "bobril";
import * as Example from "bobwai--example";
import * as Button from "../../src/lib";
import * as Textbox from "bobwai--textbox";
import * as Icon from "bobwai--icon";
import * as Combobox from "bobwai--combobox";
import * as Color from "bobwai--color";
import * as SwitchButton from "bobwai--switch-button";

const defaultData: Button.IData = {
    label: "Label",
    onClick: () => {},
};

export function getControlPanelContainer(): b.IBobrilNode {
    return Example.createControlPanelContainer({
        fullComponentName: "bobwai--button",
        data: defaultData,
        content: Button.create(defaultData),

        controlPanelItems: [
            {
                fieldCategory: Example.FieldCategory.Content,
                codeGeneratorAdditionalSettings: { propertyPath: "label", isStringValueTranslated: false },
                fieldParam: {
                    value: defaultData.label,
                    fieldFactory: Textbox.create,
                    fieldType: Example.FieldType.Textbox,
                    onChange: (v) => {
                        defaultData.label = v;
                        b.invalidate();
                    },
                },
            },

            {
                codeGeneratorAdditionalSettings: { propertyPath: "isDisabled" },
                fieldCategory: Example.FieldCategory.Behavior,
                fieldParam: {
                    fieldFactory: SwitchButton.create,
                    fieldType: Example.FieldType.Switch,
                    value: defaultData.isDisabled,
                    onChange: (v) => {
                        if (!v) {
                            delete defaultData.isDisabled;
                        } else {
                            defaultData.isDisabled = v;
                        }
                        b.invalidate();
                    },
                },
            },
            {
                codeGeneratorAdditionalSettings: {
                    propertyPath: "size",
                    enumSettings: {
                        enum: Button.Size,
                        enumPropertyName: "Size",
                    },
                },
                fieldCategory: Example.FieldCategory.Appearance,
                fieldParam: {
                    customValueContent: Example.createComboEnum({
                        allowedEnumValues: [Button.Size.ExtraSmall, Button.Size.Small, Button.Size.Medium],
                        comboboxFactory: Combobox.create,
                        enum: Button.Size,
                        onChange: (v) => {
                            if (v === Button.Size.Small) {
                                delete defaultData.size;
                            } else {
                                defaultData.size = v;
                            }
                            b.invalidate();
                        },
                        value: defaultData.size || Button.Size.Small,
                    }),
                },
            },
            {
                codeGeneratorAdditionalSettings: { propertyPath: "leftIcon", shouldHaveIconAsContent: true },
                fieldCategory: Example.FieldCategory.Content,
                fieldParam: {
                    fieldFactory: SwitchButton.create,
                    fieldType: Example.FieldType.Switch,
                    value: !!defaultData.leftIcon,
                    onChange: (v) => {
                        if (v) {
                            defaultData.leftIcon = exampleIcon;
                        } else {
                            delete defaultData.leftIcon;
                        }
                        b.invalidate();
                    },
                },
            },
            {
                codeGeneratorAdditionalSettings: {
                    propertyPath: "color",
                    enumSettings: {
                        enumPropertyName: "Theme",
                        enum: Button.Theme,
                    },
                },
                fieldCategory: Example.FieldCategory.Appearance,
                fieldParam: {
                    customValueContent: Example.createComboEnum({
                        comboboxFactory: Combobox.create,
                        enum: Button.Theme,
                        onChange: (v) => {
                            defaultData.color = v;
                            b.invalidate();
                        },
                        value: defaultData.color,
                    }),
                },
            },
            // {
            //     codeGeneratorAdditionalSettings: { propertyPath: "customTheme.fontSize", isStringValueTranslated: false },
            //     fieldCategory: Example.FieldCategory.Appearance,
            //     groupName: "customTheme",
            //     isAdvancedField: true,
            //     fieldParam: {
            //         fieldFactory: Spinner.create,
            //         fieldType: Example.FieldType.Spinner,
            //         value: defaultData.customTheme && defaultData.customTheme.fontSize && parseInt(defaultData.customTheme.fontSize),
            //         onChange: v => {
            //             if (v) {
            //                 if (!defaultData.customTheme) {
            //                     defaultData.customTheme = {};
            //                 }
            //                 defaultData.customTheme.fontSize = `${v}px`;
            //             }
            //             b.invalidate();
            //         },
            //         note: "Is applied only if left icon is set"
            //     }
            // },
            // {
            //     codeGeneratorAdditionalSettings: { propertyPath: "customTheme.color" },
            //     fieldCategory: Example.FieldCategory.Appearance,
            //     groupName: "customTheme",
            //     isAdvancedField: true,
            //     fieldParam: {
            //         fieldType: Example.FieldType.IColor,
            //         value: defaultData.customTheme && defaultData.customTheme.color,
            //         onChange: v => {
            //             if (v) {
            //                 if (!defaultData.customTheme) {
            //                     defaultData.customTheme = {};
            //                 }
            //                 defaultData.customTheme.color = v;
            //             }
            //             b.invalidate();
            //         }
            //     }
            // },

            // {
            //     codeGeneratorAdditionalSettings: { propertyPath: "customTheme.backgroundColor" },
            //     fieldCategory: Example.FieldCategory.Appearance,
            //     groupName: "customTheme",
            //     isAdvancedField: true,
            //     fieldParam: {
            //         fieldType: Example.FieldType.IColor,
            //         value: defaultData.customTheme && defaultData.customTheme.backgroundColor,
            //         onChange: v => {
            //             if (v) {
            //                 if (!defaultData.customTheme) {
            //                     defaultData.customTheme = {};
            //                 }
            //                 defaultData.customTheme.backgroundColor = v;
            //             }
            //             b.invalidate();
            //         }
            //     }
            // }
        ],
    });
}

const exampleIcon = Icon.create({
    sprite: b.sprite(Icon.add_small_png, Color.White),
});
