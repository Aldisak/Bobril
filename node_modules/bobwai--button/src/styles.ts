import * as b from "bobril";
import * as mixins from "bobwai--style-mixins";
import * as colorOperations from "bobwai--color-operations";
import * as Color from "bobwai--color";
import * as Font from "bobwai--font";
import * as constants from "./publicConstants";

const spaceBetweenLabelAndIcon = 5;
const iconSize = 20;

// extra small button for Theme.None
const extraSmallButtonForThemeNone = { height: "24px", minWidth: "62px", fontSize: "13px" };

// extra small button
const extraSmallButton = { height: "30px", minWidth: "62px", fontSize: "13px" };

// small button
const smallButton = { height: "35px", minWidth: "62px", fontSize: "13px" };

// medium button
const mediumButton = { height: "45px", minWidth: "82px", fontSize: "15px" };

// large button
const largeButton = { height: "55px", minWidth: "102px", fontSize: "18px" };

// THEMES
export const textTheme = createTextTheme();
export const lightTheme = createTheme("light", Color.Grey600, Color.Grey600_30);
export const infoTheme = createTheme("info", Color.Info, Color.Info_30);
export const successTheme = createTheme("success", Color.Success, Color.Success_30);
export const warningTheme = createTheme("warning", Color.Warning, Color.Warning_30);
export const errorTheme = createTheme("error", Color.Error, Color.Error_30);
export const appTheme = createTheme("app", Color.Application, Color.Application_30);
export const basicTheme = createTheme("basic", Color.Basic, Color.Basic_30);

// BASE
export const baseStyle: string = b.styleDef(
    [
        {
            height: smallButton.height,
            fontSize: smallButton.fontSize,
            fontWeight: Font.FontWeightSemibold,
            lineHeight: smallButton.height,
            boxSizing: "content-box",
            border: "0",
            display: "inline-block",
            textAlign: "center",
            verticalAlign: "middle",
            textTransform: "uppercase",
            whiteSpace: "nowrap",
            position: "relative",
        },
    ],
    undefined,
    "btn"
);

export const baseThemeNoneWithoutLeftIconStyle = b.styleDefEx(baseStyle, {
    paddingLeft: 2,
});

export const baseThemeNoneWithoutRightIconStyle = b.styleDefEx(baseStyle, {
    paddingRight: 2,
});

export const leftAlignButtonStyle = b.styleDefEx(
    baseStyle,
    {
        textAlign: "left",
    },
    {},
    "btn--left-align"
);

export const buttonWithIconStyle: string = b.styleDefEx(baseStyle, {
    fontSize: "0 !important",
});

export const buttonWithBlockStyle: string = b.styleDefEx(baseStyle, {
    display: "block",
});

export const labelWithIconStyle = b.styleDef(
    {
        verticalAlign: "middle",
        display: "inline-block",
    },
    {},
    "btn--label"
);

export const labelWithIconExtraSmallStyle = b.styleDefEx(
    labelWithIconStyle,
    {
        lineHeight: extraSmallButton.height,
        height: extraSmallButton.height,
        fontSize: extraSmallButton.fontSize,
    },
    {},
    "btn--label-extra-small"
);

export const labelWithIconExtraSmallThemeNoneStyle = b.styleDefEx(
    labelWithIconStyle,
    {
        lineHeight: extraSmallButtonForThemeNone.height,
        height: extraSmallButtonForThemeNone.height,
        fontSize: extraSmallButtonForThemeNone.fontSize,
    },
    {},
    "btn--label-extra-small-theme-none"
);

export const labelWithIconSmallStyle = b.styleDefEx(
    labelWithIconStyle,
    {
        lineHeight: smallButton.height,
        height: smallButton.height,
        fontSize: smallButton.fontSize,
    },
    {},
    "btn--label-small"
);

export const labelWithIconMediumStyle = b.styleDefEx(
    labelWithIconStyle,
    {
        lineHeight: mediumButton.height,
        height: mediumButton.height,
        fontSize: mediumButton.fontSize,
    },
    {},
    "btn--label-medium"
);

export const labelWithIconLargeStyle = b.styleDefEx(
    labelWithIconStyle,
    {
        lineHeight: largeButton.height,
        height: largeButton.height,
        fontSize: largeButton.fontSize,
    },
    {},
    "btn--label-large"
);

export const labelWithLeftIconStyle = b.styleDefEx(labelWithIconStyle, { paddingLeft: spaceBetweenLabelAndIcon }, {}, "btn--label-left");

export const labelWithRightIconStyle = b.styleDefEx(labelWithIconStyle, { paddingRight: spaceBetweenLabelAndIcon }, {}, "btn--label-right");

export const labelWithRightIconWithoutIndentStyle = b.styleDefEx(
    labelWithRightIconStyle,
    { paddingRight: 0 },
    {},
    "btn--label-right-without-indent"
);

// SIZES
export const sizeExtraSmallThemeNoneStyle = createSizeStyle("extraSmallForThemeNone", extraSmallButtonForThemeNone);
export const sizeExtraSmallStyle = createSizeStyle("extraSmall", extraSmallButton);
export const sizeSmallStyle = createSizeStyle("small", smallButton);
export const sizeMediumStyle = createSizeStyle("medium", mediumButton);
export const sizeLargeStyle = createSizeStyle("large", largeButton);

export interface IColorTheme {
    backgroundColor: Color.IColor;
    backgroundColorDisabled: Color.IColor;
    foregroundColor: Color.IColor;
    foregroundColorDisabled: Color.IColor;
    baseStyle: string;
}

interface IButtonSize {
    height: string;
    minWidth: string;
    fontSize: string;
}

function createTheme(name: string, backgroundColor: Color.IColor, backgroundColor30: Color.IColor): IColorTheme {
    const className = `btn--${name}`;
    return {
        backgroundColor: backgroundColor,
        backgroundColorDisabled: backgroundColor30,
        foregroundColor: constants.TextThemeColor,
        foregroundColorDisabled: constants.TextThemeColor,
        baseStyle: b.styleDefEx(
            baseStyle,
            [
                mixins.getClickableElement(),
                {
                    background: backgroundColor,
                    minWidth: smallButton.minWidth,
                    padding: `0 20px`,
                    borderRadius: "2px",
                    color: constants.TextThemeColor,
                },
            ],
            {
                hover: {
                    background: colorOperations.changeShade(backgroundColor, -0.08),
                },
                active: {
                    background: colorOperations.changeShade(backgroundColor, -0.16),
                },
            },
            className
        ),
    };
}
export const disabledStyle = b.styleDef([mixins.getClickableElementDisabled()], {}, "btn-disabled");

function createTextTheme(): IColorTheme {
    const className = `btn--text`;
    return {
        backgroundColor: Color.Transparent,
        backgroundColorDisabled: Color.Transparent,
        foregroundColor: constants.TextThemeForegroundColor,
        foregroundColorDisabled: constants.TextThemeForegroundDisabledColor,
        baseStyle: b.styleDefEx(
            baseStyle,
            [
                mixins.getClickableElement(),
                {
                    background: Color.Transparent,
                    color: Color.Basic,
                    padding: 0,
                    minWidth: "0 !important",
                },
            ],
            {
                hover: {
                    color: constants.TextThemeForegroundHoverColor,
                },
                active: {
                    color: constants.TextThemeForegroundHoverColor,
                },
            },
            className
        ),
    };
}

function createSizeStyle(name: string, buttonSize: IButtonSize): string {
    return b.styleDefEx(
        baseStyle,
        {
            height: buttonSize.height,
            lineHeight: buttonSize.height,
            minWidth: buttonSize.minWidth,
            fontSize: buttonSize.fontSize,
        },
        {},
        `btn--${name}`
    );
}

export const extraSmallButtonStyle = b.styleDef(
    {
        paddingLeft: 12,
        paddingRight: 12,
    },
    {},
    "btn-extra-small"
);

export const absoluteIconStyle = b.styleDef(
    {
        position: "absolute",
    },
    {},
    "block-button-icon"
);

export const blockButtonIconStyleExtraSmall = b.styleDefEx(absoluteIconStyle, {
    top: 5,
    left: 8,
});

export const blockButtonIconStyleSmall = b.styleDefEx(absoluteIconStyle, {
    top: 7,
    left: 11,
});

export const blockButtonIconStyleMedium = b.styleDefEx(absoluteIconStyle, {
    top: 12,
    left: 13,
});

export const blockButtonIconStyleLarge = b.styleDefEx(absoluteIconStyle, {
    top: 17,
    left: 18,
});

export const maxWidthStyle = b.styleDef({
    maxWidth: "100%",
});
export const maxWidthLabelWithIconStyle = b.styleDefEx(maxWidthStyle, {
    maxWidth: `calc(100% - ${spaceBetweenLabelAndIcon + iconSize}px)`,
});
