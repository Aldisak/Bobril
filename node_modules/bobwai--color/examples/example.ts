import * as b from "bobril";
import * as Color from "../src/lib";
import * as Container from "./src/Container";
import { DefaultApplicationColor, getChartItemColor } from "../src/lib";
import getGradientsExample from "./src/gradients";

// note (p.stovik): intantionaly not using Example or Container component,
// because it makes circular dependency on the bobwai--color itself (through bobwai--font)

let chartItemsCount: number = 27;

b.init(() => {
    return [
        Container.create({
            header: "1) Application specific colors - Each application and sample company can have different",
            content: [showColor("Application", Color.Application), showColor("Basic", Color.Basic)]
        }),
        Container.create({
            header: "1.1) Primary, secondary color - Each application can have different",
            content: [showColor("Primary", Color.Primary), showColor("Secondary", Color.Secondary)]
        }),
        Container.create({
            header: "2) Notifications",
            content: [
                showColor("Success", Color.Success),
                showColor("Warning", Color.Warning),
                showColor("Error", Color.Error),
                showColor("Info", Color.Info)
            ]
        }),
        Container.create({
            header: "3) Greys",
            content: [
                showColor("White", Color.White),
                showColor("Grey000", Color.Grey000),
                showColor("Grey100", Color.Grey100),
                showColor("Grey200", Color.Grey200),
                showColor("Grey250", Color.Grey250),
                showColor("Grey300", Color.Grey300),
                showColor("Grey400", Color.Grey400),
                showColor("Grey500", Color.Grey500),
                showColor("Grey600", Color.Grey600),
                showColor("Black", Color.Black)
            ]
        }),
        Container.create({
            header:
                "4a) With opacity - Using of new opacity tokens is according the latest UX specification from 03/2020. See https://confluence.quadient.group/display/IDS/Color for more details. If some colors missing contact component team",
            content: [showColor("Basic_Opacity200", Color.Basic_Opacity200), showColor("Basic_Opacity300", Color.Basic_Opacity300)]
        }),
        Container.create({
            header:
                "4b) With transparency - DEPRECATED - for new implementation (according to UX specification) use opacity colors - if some colors missing contact component team",
            content: [
                showColor("Application_10", Color.Application_10),
                showColor("Application_30", Color.Application_30),
                showColor("Application_40", Color.Application_40),
                showColor("Application_64", Color.Application_64),
                showColor("White_08", Color.White_08),
                showColor("White_16", Color.White_16),
                showColor("White_24", Color.White_24),
                showColor("White_30", Color.White_30),
                showColor("White_50", Color.White_50),
                showColor("White_60", Color.White_60),
                showColor("White_75", Color.White_75),
                showColor("Success_20", Color.Success_20),
                showColor("Success_30", Color.Success_30),
                showColor("Info_30", Color.Info_30),
                showColor("Error_05", Color.Error_05),
                showColor("Error_10", Color.Error_10),
                showColor("Error_20", Color.Error_20),
                showColor("Error_30", Color.Error_30),
                showColor("Error_32", Color.Error_32),
                showColor("Error_40", Color.Error_40),
                showColor("Warning_05", Color.Warning_05),
                showColor("Warning_10", Color.Warning_10),
                showColor("Warning_30", Color.Warning_30),
                showColor("Basic_08", Color.Basic_08),
                showColor("Basic_16", Color.Basic_16),
                showColor("Basic_24", Color.Basic_24),
                showColor("Basic_30", Color.Basic_30),
                showColor("Basic_32", Color.Basic_32),
                showColor("Basic_80", Color.Basic_80),
                showColor("Black_16", Color.Black_16),
                showColor("Black_20", Color.Black_20),
                showColor("Black_24", Color.Black_24),
                showColor("Black_42", Color.Black_42),
                showColor("Black_75", Color.Black_75),
                showColor("Grey300_30", Color.Grey300_30),
                showColor("Grey500_15", Color.Grey500_15),
                showColor("Grey500_30", Color.Grey500_30),
                showColor("Grey500_80", Color.Grey500_80),
                showColor("Grey600_30", Color.Grey600_30)
            ]
        }),
        Container.create({
            header: "5) Invisible",
            content: [showColor("Transparent", Color.Transparent)]
        }),
        Container.create({
            header: "6a) Additional colors",
            content: [
                showColor("Error300", Color.Error300),
                showColor("Error500", Color.Error500),
                showColor("Error_05_solid", Color.Error_05_solid),
                showColor("Warning300", Color.Warning300),
                showColor("Warning500", Color.Warning500),
                showColor("Warning_05_solid", Color.Warning_05_solid),
                showColor("Info_05_solid", Color.Info_05_solid)
            ]
        }),
        Container.create({
            header: "6b) Additional colors - mostly used in charts",
            content: [
                showColor("Chart_Green_32", Color.Chart_Green_32),
                showColor("Chart_Green100", Color.Chart_Green100),
                showColor("Chart_Green300", Color.Chart_Green300),
                showColor("Chart_Green500", Color.Chart_Green500),
                showColor("Chart_Blue100", Color.Chart_Blue100),
                showColor("Chart_Blue300", Color.Chart_Blue300),
                showColor("Chart_Blue500", Color.Chart_Blue500),
                showColor("Chart_Violet_32", Color.Chart_Violet_32),
                showColor("Chart_Violet100", Color.Chart_Violet100),
                showColor("Chart_Violet300", Color.Chart_Violet300),
                showColor("Chart_Violet500", Color.Chart_Violet500),
                showColor("Chart_Yellow_32", Color.Chart_Yellow_32),
                showColor("Chart_Yellow100", Color.Chart_Yellow100),
                showColor("Chart_Yellow300", Color.Chart_Yellow300),
                showColor("Chart_Yellow500", Color.Chart_Yellow500),
                showColor("Chart_Yellow700", Color.Chart_Yellow700),
                showColor("Chart_Brown100", Color.Chart_Brown100),
                showColor("Chart_Brown300", Color.Chart_Brown300),
                showColor("Chart_Brown500", Color.Chart_Brown500),
                showColor("Chart_Purple100", Color.Chart_Purple100),
                showColor("Chart_Purple300", Color.Chart_Purple300),
                showColor("Chart_Purple500", Color.Chart_Purple500),
                showColor("Chart_Orange100", Color.Chart_Orange100),
                showColor("Chart_Orange300", Color.Chart_Orange300),
                showColor("Chart_Orange500", Color.Chart_Orange500),
                showColor("Chart_Orange700", Color.Chart_Orange700),
                showColor("Chart_GreenB100", Color.Chart_GreenB100),
                showColor("Chart_GreenB300", Color.Chart_GreenB300),
                showColor("Chart_GreenB500", Color.Chart_GreenB500),
                showColor("Chart_GreenB700", Color.Chart_GreenB700)
            ]
        }),
        Container.create({
            header: "7) Change application color on the fly",
            content: [
                {
                    tag: "div",
                    component: {
                        onClick: () => {
                            Color.Application() === "#ff0000"
                                ? Color.setApplicationColor(DefaultApplicationColor)
                                : Color.setApplicationColor("#ff0000");
                            return true;
                        },
                        render: (_ctx: b.IBobrilCtx, me: b.IBobrilNode) => {
                            me.children = b.styledDiv("Click me to change application color", mainStyle);
                        }
                    }
                },
                showColor("Application", Color.Application),
                showColor("Application_10", Color.Application_10),
                showColor("Application_30", Color.Application_30),
                showColor("Application_40", Color.Application_40)
            ]
        }),
        Container.create({
            header: "8) Chart dynamic colors - got from the item index (27 cyclic colors)",
            content: [
                {
                    tag: "div",
                    component: {
                        onClick: () => {
                            chartItemsCount += 27;

                            b.invalidate();
                            return true;
                        },
                        render: (_ctx: b.IBobrilCtx, me: b.IBobrilNode) => {
                            me.children = b.styledDiv("Click me to add colors set", mainStyle);
                        }
                    }
                },
                showChartColors()
            ]
        }),
        Container.create({
            header: "Gradients",
            content: getGradientsExample()
        })
    ];
});

function showChartColors(): b.IBobrilChildren {
    const colorNodes: b.IBobrilChildren = [];

    for (let index = 0; index < chartItemsCount; index++) {
        colorNodes.push(showColor("Chart color " + ((index % 27) + 1) + " i=" + index, getChartItemColor(index)));
    }

    return colorNodes;
}

function showColor(colorName: string, colorValue: string | (() => string)): b.IBobrilChildren {
    return [
        b.styledDiv(
            [
                "something behind",
                b.styledDiv(null, {
                    backgroundColor: colorValue,
                    position: "absolute",
                    left: 150,
                    right: 0,
                    top: 0,
                    height: "100%",
                    textAlign: "right",
                    paddingRight: 10
                }),
                b.styledDiv(colorName, colorNameStyle)
            ],
            mainStyle
        )
    ];
}

const colorNameStyle = {
    position: "absolute",
    left: 0,
    top: 0,
    width: 140,
    textAlign: "left",
    padding: 5
};

const mainStyle = {
    background:
        'rgba(0, 0, 0, 0) url("data:image/png;base64,' +
        "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQAQMAAAAlPW0iAAAAAXNSR0IArs4c6QAAAAZQTFRF+vr6////" +
        '+o8bnQAAABBJREFUCB1jYPjPgBXhEAYAfr8P8bm+jEoAAAAASUVORK5CYII=") repeat scroll 0 0',
    width: 300,
    border: "1px solid",
    margin: 5,
    textAlign: "right",
    padding: 5,
    position: "relative"
};
