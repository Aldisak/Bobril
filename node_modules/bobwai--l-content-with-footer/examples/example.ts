import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as LContentWithFooter from "../src/lib";
import * as Spinner from "bobwai--spinner";
import * as Checkbox from "bobwai--checkbox";
import { ExampleColor } from "bobwai--example";
import { FooterPosition } from "../src/lib";

let actualSize: number = 0;
let actualContentSize: number = 20;
let hasScrollShadow: boolean = true;
let contentMinHeight: number = 0;

Example.init({}, () => {
    return [
        Example.createControlPanel({
            items: [
                Example.createField({
                    fieldFactory: Spinner.create,
                    fieldType: Example.FieldType.Spinner,
                    onChange: (v) => {
                        actualSize = v;
                        b.invalidate();
                    },
                    value: actualSize,
                    label: "Footer dynamic size test",
                    minValue: 0,
                    step: 20,
                    note: "0 - means auto height for footer in this test",
                }),
            ],
        }),
        Container.create({
            header: "l-content-with-footer",
            description: "Content has rest of space and support 100% height of child, footer size is according to content",
            content: [
                b.styledDiv(
                    LContentWithFooter.create({
                        children: getMockContent(),
                        footerContent: getMockFooterContent(),
                    }),
                    {
                        height: 300,
                        background: "rgba(94, 158, 55, .3)",
                    }
                ),
            ],
        }),

        Container.create({
            header: "l-content-with-footer, FooterPosition.BelowContent",
            description:
                "In this configuration footer is exactly below content. If content height is more then 100% footer keep at the bottom. This configuration should be used also with 'hasScrollShadow' property or make sure that inner content has own scrollbar",
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createGroup({
                            name: "FooterPosition.BelowContent",
                            items: [
                                Example.createField({
                                    fieldFactory: Spinner.create,
                                    fieldType: Example.FieldType.Spinner,
                                    onChange: (v) => {
                                        actualContentSize = v;
                                        b.invalidate();
                                    },
                                    value: actualContentSize,
                                    label: "Content height test",
                                    minValue: 0,
                                    step: 20,
                                    note: "0 - means 100% of available height",
                                }),

                                Example.createField({
                                    fieldFactory: Checkbox.create,
                                    fieldType: Example.FieldType.Checkbox,
                                    onChange: (v) => {
                                        hasScrollShadow = v;
                                        b.invalidate();
                                    },
                                    value: hasScrollShadow,
                                    label: "Has Scroll Shadow",
                                    note: "Make sure that this option is set or the inner content has own scrollbar",
                                }),
                                Example.createField({
                                    fieldFactory: Spinner.create,
                                    fieldType: Example.FieldType.Spinner,
                                    onChange: (v) => {
                                        contentMinHeight = v;
                                        b.invalidate();
                                    },
                                    value: contentMinHeight,
                                    label: "Content min height",
                                    minValue: 0,
                                    step: 20,
                                    note:
                                        "For special case if whole layout is also overflowed and you can be sure that this content will be always visible - at least the min height.",
                                }),
                            ],
                        }),
                    ],
                }),
                b.styledDiv(
                    LContentWithFooter.create({
                        children: getMockContent(actualContentSize),
                        footerContent: getMockFooterContent(),
                        footerPosition: LContentWithFooter.FooterPosition.BelowContent,
                        hasScrollShadow: hasScrollShadow,
                        contentMinHeight: contentMinHeight,
                    }),
                    {
                        height: 300,
                        background: "rgba(94, 158, 55, .3)",
                    }
                ),
            ],
        }),
        Container.create({
            header: "l-content-with-footer, FooterPosition.AlwaysBottomScrollable",
            description: " - footer is bottom, but can overflow when content is more than 100%. ",
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createGroup({
                            name: "FooterPosition.AlwaysBottomScrollable",
                            items: [
                                Example.createField({
                                    fieldFactory: Spinner.create,
                                    fieldType: Example.FieldType.Spinner,
                                    onChange: (v) => {
                                        actualContentSize = v;
                                        b.invalidate();
                                    },
                                    value: actualContentSize,
                                    label: "Content height test",
                                    minValue: 0,
                                    step: 20,
                                    note: "0 - means 100% of available height",
                                    obsoleteMessage: "Make sure that some parent component has overflow!",
                                }),
                            ],
                        }),
                    ],
                }),
                b.styledDiv(
                    getMockParentElementWithOverflow(
                        LContentWithFooter.create({
                            children: getMockContent(actualContentSize),
                            footerContent: getMockFooterContent(),
                            footerPosition: FooterPosition.AlwaysBottomScrollable,
                        })
                    ),
                    {
                        height: 300,
                        background: "rgba(94, 158, 55, .3)",
                    }
                ),
            ],
        }),
    ];
});

function getMockParentElementWithOverflow(content: b.IBobrilChildren): b.IBobrilNode {
    return b.styledDiv(content, { height: "100%", overflow: "auto" });
}

function getMockContent(height?: number): b.IBobrilNode {
    return b.styledDiv("CONTENT", { height: height || "100%", background: ExampleColor.Color1 });
}

function getMockFooterContent(): b.IBobrilNode {
    return b.styledDiv("FOOTER CONTENT with dynamic size", {
        height: actualSize > 0 ? `${actualSize}px` : "auto",
        background: ExampleColor.Color2,
    });
}
