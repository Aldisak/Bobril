import * as b from "bobril";
import * as ScrollShadow from "bobwai--scroll-shadow";

export interface IData {
    children: b.IBobrilChildren;
    footerContent: b.IBobrilChildren;
    footerPosition?: FooterPosition;
    hasScrollShadow?: boolean;
    /** hasScrollShadow has to be also set */
    scrollShadowRightOffset?: number;
    /** For special case if whole layout can be also overflowed and we can be sure that main content will be always visible - at least the min height */
    contentMinHeight?: number;
    /** For the case that you need e.g. loader to cover whole content area  */
    hasChildrenContentPositionRelative?: boolean;
}

export enum FooterPosition {
    /** Default */
    AlwaysBottom,
    /** Footer is just below content, if whole height is over 100% footer keep at the bottom and is always visible
     * Make sure you are using scrollShadow inside content or the property 'hasScrollShadow' is set
     */
    BelowContent,
    /** Footer is at the bottom by default but in the case of hight content, footer will move  around the corner and activate parent component scrollbar
     * Make sure that parent component has overflow
     */
    AlwaysBottomScrollable,
}

interface IContext extends b.IBobrilCtx {
    data: IData;
}

export let create = b.createComponent<IData>({
    id: "bobwai--l-content-with-footer",
    render(ctx: IContext, me: b.IBobrilNode) {
        me.children = [
            b.styledDiv(wrapContentWithScrollShadowIfNeeded(ctx.data), [
                contentStyle,
                ctx.data.footerPosition === FooterPosition.BelowContent && contentWithFooterBelowStyle,
                ctx.data.contentMinHeight && { minHeight: ctx.data.contentMinHeight },
                ctx.data.hasChildrenContentPositionRelative && contentRelativeStyle,
                ctx.data.footerPosition === FooterPosition.AlwaysBottomScrollable && contentWithFooterBottomScrollableStyle,
            ]),
            b.styledDiv(ctx.data.footerContent, footerStyle),
        ];
        b.style(me, baseStyle);
    },
});

function wrapContentWithScrollShadowIfNeeded(data: IData): b.IBobrilChildren {
    if (data.hasScrollShadow) {
        return ScrollShadow.create({
            content: data.children,
            scrollbarOffset: data.scrollShadowRightOffset || undefined,
        });
    }
    return data.children;
}

const baseStyle = b.styleDef(
    {
        height: "100%",
        display: "flex",
        flexDirection: "column",
    },
    {},
    "l-content-with-footer"
);

const contentStyle = b.styleDef(
    {
        flex: 1,
        minHeight: 0,
    },
    {},
    "l-content-with-footer--content"
);

const contentWithFooterBelowStyle = b.styleDefEx(
    contentStyle,
    {
        flexGrow: 0,
        flexBasis: "auto",
        // due to IE-11
        minHeight: 1,
    },
    {},
    "l-content-with-footer--content-below"
);
const contentWithFooterBottomScrollableStyle = b.styleDefEx(
    contentStyle,
    {
        flexGrow: 1,
        flexShrink: 0,
        flexBasis: "auto",
    },
    {},
    "l-content-with-footer--content-with-footer-scrollable"
);

const footerStyle = b.styleDef({}, {}, "l-content-with-footer--footer");

const contentRelativeStyle = b.styleDef({ position: "relative" });

// added by script - BEGIN
export const LContentWithFooter = create;
// added by script - END
