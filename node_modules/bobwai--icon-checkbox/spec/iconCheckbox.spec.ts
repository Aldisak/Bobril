import { BBSeeker, BBBot } from "bbseeker-extended";
import * as IconCheckbox from "../src/lib";
import * as b from "bobril";
import * as Icon from "bobwai--icon";
import * as Color from "bobwai--color";

const iconCheck = b.withKey(
    Icon.create({
        sprite: b.sprite(Icon.visible_small_png, Color.Grey600)
    }),
    "test-icon-check"
);
const iconUnCheck = b.withKey(
    Icon.create({
        sprite: b.sprite(Icon.invisible_small_png, Color.Grey600)
    }),
    "test-icon-uncheck"
);

describe("bobwai--icon-checkbox test", () => {
    beforeEach(() => {
        b.init(() => {
            return [
                IconCheckbox.create({
                    value: true,
                    checkedImage: iconCheck,
                    uncheckedImage: iconUnCheck
                }),
                IconCheckbox.create({
                    value: false,
                    checkedImage: iconCheck,
                    uncheckedImage: iconUnCheck
                })
            ];
        });
    });
    it("should find the right element according the key", async () => {
        await BBBot.checkIfFullyRendered(5);
        const checked = await BBSeeker.findElement(".bobwai--icon-checkbox[0]/~#test-icon-check");
        const unCheckedFirstCheckbox = await BBSeeker.findElement(".bobwai--icon-checkbox[0]/~#test-icon-uncheck");
        const unChecked = await BBSeeker.findElement(".bobwai--icon-checkbox[1]/~#test-icon-uncheck");
        const checkedSecondCheckbox = await BBSeeker.findElement(".bobwai--icon-checkbox[1]/~#test-icon-check");
        expect(checked).not.toBeNull();
        expect(unCheckedFirstCheckbox).toBeNull();
        expect(unChecked).not.toBeNull();
        expect(checkedSecondCheckbox).toBeNull();
    });
});
