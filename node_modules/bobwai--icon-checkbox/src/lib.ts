import * as b from "bobril";
import * as FormElements from "bobwai--form-elements";
import * as Focus from "bobwai--focus";
import * as KeyCodes from "helpers--key-codes";

export let create = b.createComponent<IData>({
    id: "bobwai--icon-checkbox",
    onMouseLeave(ctx: IContext): boolean {
        ctx.isHover = false;
        b.invalidate(ctx);
        return true;
    },
    onMouseEnter(ctx: IContext): boolean {
        ctx.isHover = true;
        b.invalidate(ctx);
        return true;
    },
    onClick(ctx: IContext): boolean {
        if (ctx.data.onChange) {
            ctx.data.onChange(!ctx.data.value);
            return true;
        }
        return false;
    },
    render(ctx: IContext, me: b.IBobrilNode): void {
        me.children = Focus.create({
            content: createInput(ctx),
            offsetBottom: 0,
            offsetTop: 1,
            offsetLeft: 0,
            offsetRight: 0,
            webContentAccessibility: b.assign(
                {
                    role: Focus.ContentAccessibilityRole.Checkbox,
                    checkbox: {
                        isChecked: ctx.data.value
                    }
                },
                ctx.data.webContentAccessibility
            ),
            focusCommandKeys: [KeyCodes.KeyCode.Space],
            onFocusCommand: () => {
                if (ctx.data.onChange) {
                    ctx.data.onChange(!ctx.data.value);
                }
            }
        });

        b.style(
            me,
            iconCheckboxStyle,
            ctx.data.backgroundColor && {
                backgroundColor: ctx.data.backgroundColor
            },
            ctx.data.displayAs === FormElements.DisplayAs.InlineBlock && inlineStyle
        );
    }
});

export interface IData {
    value: boolean;
    checkedImage: b.IBobrilNode;
    checkedHoverImage?: b.IBobrilNode;
    uncheckedImage: b.IBobrilNode;
    uncheckedHoverImage?: b.IBobrilNode;
    backgroundColor?: string;
    displayAs?: FormElements.DisplayAs;
    onChange?: (value: boolean) => void;
    webContentAccessibility?: WebContentAccessibility;
}

export type WebContentAccessibility = Required<Pick<Focus.IWebContentAccessibility, "ariaLabel">>;

interface IContext extends b.IBobrilCtx {
    data: IData;
    isHover: boolean;
}

function createInput(ctx: IContext): b.IBobrilNode {
    const check = ctx.isHover
        ? ctx.data.checkedHoverImage === undefined
            ? ctx.data.checkedImage
            : ctx.data.checkedHoverImage
        : ctx.data.checkedImage;
    const unCheck = ctx.isHover
        ? ctx.data.uncheckedHoverImage === undefined
            ? ctx.data.uncheckedImage
            : ctx.data.uncheckedHoverImage
        : ctx.data.uncheckedImage;
    return ctx.data.value ? check : unCheck;
}

const iconCheckboxStyle = b.styleDef({
    position: "relative",
    fontSize: 0
});

const inlineStyle = b.styleDef({
    display: "inline-block"
});

// added by script - BEGIN
export const IconCheckbox = create;
// added by script - END
