import * as b from "bobril";
import * as stylesHelper from "./stylesHelper";
import * as HorizontalScrollCorrection from "bobwai--horizontal-scroll-correction";
import * as styles from "./styles";
import * as constants from "./publicConstants";
import * as LViewAppToolbar from "bobwai--l-view-app-toolbar";

export let create = b.createVirtualComponent<IData>({
    id: "bobwai--l-view-sidebar",
    render(ctx: IContext, me: b.IBobrilNode): void {
        let styleList = [
            styles.baseStyle,
            ctx.data.scrollbarsMode === ScrollbarsMode.NoScrollbars && styles.baseWithoutScrollbarsStyle,
            stylesHelper.getTopStyle(
                ctx.data.isCombinedWithAppHeader,
                ctx.data.isCombinedWithAppBreadcrumb,
                ctx.data.isCombinedWithAppToolbar,
                ctx.data.toolbarSize
            ),
            ctx.data.isRightSidebar && styles.rightSidebarStyle,
            { width: getWidthValue(ctx.data.width) }
        ];
        let children = b.styledDiv(
            [
                (ctx.data.headerContent || ctx.data.headerTabContent) && b.withKey(getHeader(ctx.data), "header"),
                b.withKey(getBody(ctx.data), "body")
            ],
            styleList
        );

        me.children = ctx.data.isRightSidebar
            ? children
            : HorizontalScrollCorrection.create({
                  content: children
              });
    }
});

export enum SidebarWidth {
    Default,
    Large,
    Medium,
    SmallMedium,
    Small
}

export enum ScrollbarsMode {
    Default,
    NoScrollbars
}

export interface IData {
    /** experimental */
    headerContent?: b.IBobrilChildren;
    /** experimental */
    headerTabContent?: b.IBobrilChildren;
    children?: b.IBobrilChildren;
    isCombinedWithAppHeader?: boolean;
    isCombinedWithAppBreadcrumb?: boolean;
    isCombinedWithAppToolbar?: boolean;
    toolbarSize?: LViewAppToolbar.Size;
    width?: SidebarWidth;
    isRightSidebar?: boolean;
    scrollbarsMode?: ScrollbarsMode;
}

export * from "./publicConstants";

interface IContext extends b.IBobrilCtx {
    data: IData;
}

export function getWidthValue(width?: SidebarWidth): number {
    switch (width) {
        case SidebarWidth.Large:
            return constants.WidthLarge;
        case SidebarWidth.Medium:
            return constants.WidthMedium;
        case SidebarWidth.SmallMedium:
            return constants.WidthSmallMedium;
        case SidebarWidth.Small:
            return constants.WidthSmall;
        default:
            return constants.Width;
    }
}

function getHeader(data: IData): b.IBobrilNode {
    return b.styledDiv(
        [
            data.headerContent && b.withKey(headerContent(data), "headerContent"),
            data.headerTabContent && b.withKey(headerTabContent(data), "headerTabContent")
        ],
        styles.headerStyle,
        data.headerContent && data.headerTabContent && styles.headerFullHeightStyle,
        data.headerTabContent && styles.headerWithTabsStyle
    );
}

function headerContent(data: IData): b.IBobrilNode {
    return b.styledDiv(data.headerContent, styles.headerContentStyle);
}

function headerTabContent(data: IData): b.IBobrilNode {
    return b.styledDiv(data.headerTabContent, styles.headerTabContentStyle);
}

function getBody(data: IData): b.IBobrilNode {
    return b.styledDiv(
        data.children,
        styles.bodyStyle,
        (data.headerContent || data.headerTabContent) && styles.bodyWithHeaderStyle,
        data.headerContent && data.headerTabContent && styles.bodyWithFullHeightHeaderStyle
    );
}

// added by script - BEGIN
export const LViewSidebar = create;
// added by script - END
