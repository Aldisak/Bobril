import * as b from "bobril";
import * as LApp from "bobwai--l-app";
import * as LAppHeader from "bobwai--l-view-app-header";
import * as LViewAppBreadcrumb from "bobwai--l-view-app-breadcrumb";
import * as LViewAppToolbar from "bobwai--l-view-app-toolbar";
import * as Checkbox from "bobwai--checkbox";
import * as Combobox from "bobwai--combobox";
import * as Color from "bobwai--color";
import * as Example from "bobwai--example";
import * as LViewSidebar from "../src/lib";

let isCombinedWithAppHeader: boolean = true;
let isCombinedWithAppBreadcrumb: boolean = true;
let isCombinedWithAppToolbar: boolean = true;
let isOnRightSide: boolean = false;
let sidebarWidth: LViewSidebar.SidebarWidth;
let toolbarSize: LViewAppToolbar.Size;
let isWithoutScrollbar: boolean = false;

let loremIpsum =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus massa tortor, tempus " +
    "quis ullamcorper non, blandit at sapien. Fusce tempus turpis in gravida aliquet. Pellentesque " +
    "maximus purus elit, in rhoncus sem fermentum et. Donec aliquet leo erat, vel porttitor elit " +
    "posuere vitae. Nam mattis eget felis ut sagittis. Mauris ultricies ac orci hendrerit ultrices.";

let sidebarContent = b.styledDiv(
    "Here is sidebar",
    b.styleDef({
        background: Color.Chart_Green100
    })
);

let headerContent = b.styledDiv(
    "Here is header content",
    b.styleDef({
        background: Color.Chart_Yellow100,
        height: LAppHeader.Height
    })
);

let toolbarContent = b.styledDiv(
    "Here is toolbar content",
    b.styleDef({
        background: Color.Chart_Blue100,
        height: LViewAppToolbar.Height
    })
);

let toolbarContentSmall = b.styledDiv(
    "Here is toolbar content",
    b.styleDef({
        background: Color.Chart_Blue100,
        height: LViewAppToolbar.SmallHeight
    })
);

Example.init({}, () => {
    return LApp.create({
        children: [
            isCombinedWithAppHeader &&
                LAppHeader.create({
                    children: headerContent
                }),
            isCombinedWithAppBreadcrumb &&
                LViewAppBreadcrumb.create({
                    children: "Breadcrumb content",
                    isCombinedWithAppHeader: isCombinedWithAppHeader
                }),
            isCombinedWithAppToolbar &&
                LViewAppToolbar.create({
                    children: toolbarSize === LViewAppToolbar.Size.Small ? toolbarContentSmall : toolbarContent,
                    isCombinedWithAppHeader: isCombinedWithAppHeader,
                    isCombinedWithAppBreadcrumb: isCombinedWithAppBreadcrumb,
                    toolbarSize: toolbarSize
                }),
            LViewSidebar.create({
                isCombinedWithAppHeader: isCombinedWithAppHeader,
                isCombinedWithAppBreadcrumb: isCombinedWithAppBreadcrumb,
                isCombinedWithAppToolbar: isCombinedWithAppToolbar,
                toolbarSize: toolbarSize,
                isRightSidebar: isOnRightSide,
                width: sidebarWidth,
                scrollbarsMode: isWithoutScrollbar ? LViewSidebar.ScrollbarsMode.NoScrollbars : undefined,
                children: [
                    sidebarContent,
                    Checkbox.create({
                        value: isCombinedWithAppHeader,
                        title: "Combined with appHeader",
                        onChange: (value: boolean): void => {
                            isCombinedWithAppHeader = value;
                            b.invalidate();
                        }
                    }),
                    Checkbox.create({
                        value: isCombinedWithAppBreadcrumb,
                        title: "Combined with breadcrumb",
                        onChange: (value: boolean): void => {
                            isCombinedWithAppBreadcrumb = value;
                            b.invalidate();
                        }
                    }),
                    Checkbox.create({
                        value: isCombinedWithAppToolbar,
                        title: "Combined with toolbar",
                        onChange: (value: boolean): void => {
                            isCombinedWithAppToolbar = value;
                            b.invalidate();
                        }
                    }),
                    b.styledDiv(
                        [
                            "Sidebar width: ",
                            Combobox.create({
                                value: toolbarSize,
                                items: getToolbarComboValues(),
                                onChange: (value: number) => {
                                    toolbarSize = value;
                                    b.invalidate();
                                },
                                size: Combobox.Size.Small
                            })
                        ],
                        { paddingLeft: 25 }
                    ),
                    Checkbox.create({
                        title: "is on right side",
                        value: isOnRightSide,
                        onChange: (value: boolean) => {
                            isOnRightSide = value;
                            b.invalidate();
                        }
                    }),
                    b.styledDiv(
                        [
                            "Sidebar width: ",
                            Combobox.create({
                                value: sidebarWidth,
                                items: getComboValues(),
                                onChange: (value: number) => {
                                    sidebarWidth = value;
                                    b.invalidate();
                                },
                                size: Combobox.Size.Small
                            })
                        ],
                        { paddingLeft: 25 }
                    ),
                    Checkbox.create({
                        title: "no scrollbar",
                        value: isWithoutScrollbar,
                        onChange: (value: boolean) => {
                            isWithoutScrollbar = value;
                            b.invalidate();
                        }
                    }),
                    b.styledDiv(
                        "NOTE: Mode without scrollbar is useful in special cases when scrollbar is handled " +
                            "automatically by inner content - for example in bobwai-controls--comments.",
                        { color: "gray", fontSize: "80%" }
                    ),
                    b.styledDiv(loremIpsum, loremIpsumStyle),
                    b.styledDiv(loremIpsum, loremIpsumStyle),
                    b.styledDiv(loremIpsum, loremIpsumStyle),
                    b.styledDiv(loremIpsum, loremIpsumStyle)
                ]
            })
        ]
    });
});

function getComboValues(): Combobox.IItem[] {
    let items = [];
    for (let width in LViewSidebar.SidebarWidth) {
        if (!isNaN(parseInt(width, 10))) {
            let widthNr = +width;
            items.push(<Combobox.IItem>{
                label: LViewSidebar.SidebarWidth[width].toString(),
                value: widthNr
            });
        }
    }
    return items;
}

function getToolbarComboValues(): Combobox.IItem[] {
    let items: Combobox.IItem[] = [];
    items.push({
        label: "Default",
        value: LViewAppToolbar.Size.Default
    });
    items.push({
        label: "Small",
        value: LViewAppToolbar.Size.Small
    });
    return items;
}

const loremIpsumStyle = b.styleDef({ color: "lightgray", marginTop: 15 });
