import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as Mixins from "bobwai--style-mixins";
import * as TooltipEllipsis from "../src/lib";
import * as FormElements from "bobwai--form-elements";
import * as Combobox from "bobwai--combobox";

let validationState = FormElements.ValidationState.Default;

Example.init({}, () => {
    return [
        Container.create({
            header: "Change window size to activate ellipsis",
            content: getMockElement(true, longText)
        }),
        Container.create({
            header: "Change window size to activate ellipsis - permanent tooltip set",
            content: getMockElement(true, longText, true)
        }),
        Container.create({
            header: "Show tooltip when content is 90deg rotated",
            content: TooltipEllipsis.create({
                content: b.styledDiv(longText, [
                    {
                        width: 400,
                        height: 25,
                        transform: `rotate(-90deg)`,
                        background: "#1DACF9",
                        top: 430,
                        left: -170,
                        position: "absolute"
                    },
                    Mixins.lineEllipsis()
                ]),
                tooltipMessage: longText,
                useContentHeightInsteadOfWidth: true,
                validationState: validationState
            }),
            size: Container.Size.small
        }),
        Container.create({
            header: "Options",
            content: Example.createField({
                label: "Validation state",
                customValueContent: Example.createComboEnum({
                    enum: FormElements.ValidationState,
                    comboboxFactory: Combobox.create,
                    onChange: v => {
                        validationState = v;
                        b.invalidate();
                    },
                    value: validationState
                })
            })
        })
    ];
});

const getMockElement = (hasEllipsis?: boolean, content?: b.IBobrilChild, setPermanentTooltip?: boolean): b.IBobrilNode => {
    return TooltipEllipsis.create({
        tooltipMessage: <string>content,
        permanentTooltipHeader: setPermanentTooltip ? "Permanent tooltip header" : undefined,
        permanentTooltipMessage: setPermanentTooltip ? "Permanent tooltip message" : undefined,
        content: b.styledDiv(content, [{ padding: "5px 0", background: "#1DACF9", marginTop: 5 }, hasEllipsis && ellipsisStyle]),
        validationState: validationState
    });
};

const ellipsisStyle = b.styleDef(Mixins.lineEllipsis());

const longText =
    "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Lorem ipsum dolor sit amet, " +
    "consectetuer adipiscing elit. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. consectetuer adipiscing elit.";
