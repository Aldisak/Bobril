import * as lib from "../src/lib";

describe("lib", () => {
    describe("hexToRgba", () => {
        it("converts hex to rgba field", () => {
            let rgba = lib.hexToRgba("#32281e", 0.5);
            expect(rgba).toEqual("rgba(50,40,30,0.5)");
        });
        it("converts short hex to rgba field", () => {
            let rgba = lib.hexToRgba("#aef", 0.1);
            expect(rgba).toEqual("rgba(170,238,255,0.1)");
        });
        describe("hexToCmyk", () => {
            it("converts HEX to CMYK model (to percentage value)", () => {
                // translated by w3schools.com converter:
                // #3296fa -> cmyk(80%, 40%, 0%, 2%)

                let original = "cmyk(80%, 40%, 0%, 2%)";
                let cmyk = lib.hexToCmyk("#3296fa", true);
                expect(original).toEqual("cmyk(" + cmyk[0] + "%, " + cmyk[1] + "%, " + cmyk[2] + "%, " + cmyk[3] + "%)");
            });
            it("converts HEX to CMYK model (to float value)", () => {
                // translated by w3schools.com converter:
                // #3296fa -> cmyk(0.80, 0.40, 0.00, 0.02)
                // result is rounded to two fixed decimal!

                let original = "cmyk(0.80, 0.40, 0.00, 0.02)";
                let cmyk = lib.hexToCmyk("#3296fa", false);
                expect(original).toEqual(
                    "cmyk(" + cmyk[0].toFixed(2) + ", " + cmyk[1].toFixed(2) + ", " + cmyk[2].toFixed(2) + ", " + cmyk[3].toFixed(2) + ")"
                );
            });
        });
        describe("cmykToRgb", () => {
            it("converts CMYK to RGB model (from percentage value)", () => {
                // translated by w3schools.com converter:
                // cmyk(80%, 40%, 0%, 2%) -> rgb(50, 150, 250)

                let original = "rgb(50, 150, 250)";
                let rgb = lib.cmykToRgb(80, 40, 0, 2, true);
                expect(original).toEqual("rgb(" + rgb[0] + ", " + rgb[1] + ", " + rgb[2] + ")");
            });
            it("converts CMYK to RGB model (from float value)", () => {
                // translated by w3schools.com converter:
                // cmyk(0.80, 0.40, 0.00, 0.02) -> rgb(50, 150, 250)

                let original = "rgb(50, 150, 250)";
                let rgb = lib.cmykToRgb(0.8, 0.4, 0.0, 0.02, false);
                expect(original).toEqual("rgb(" + rgb[0] + ", " + rgb[1] + ", " + rgb[2] + ")");
            });
        });
    });
    describe("changeShade", () => {
        function assertIsLighter(lighterHex: lib.IColor, darkerHex: lib.IColor): void {
            let lighterRgb = lib.hexToRgb(lib.makeFixedValue(lighterHex));
            let darkerRgb = lib.hexToRgb(lib.makeFixedValue(darkerHex));

            expect(lighterRgb[0]).toBeGreaterThan(darkerRgb[0]);
            expect(lighterRgb[1]).toBeGreaterThan(darkerRgb[1]);
            expect(lighterRgb[2]).toBeGreaterThan(darkerRgb[2]);
        }

        it("darkens hex color", () => {
            let original = "#aabbcc";

            let result = lib.changeShade(original, -0.1);

            assertIsLighter(original, result);
        });

        it("darkens hex color based on lum", () => {
            let original = "#aabbcc";

            let tenPercent = lib.changeShade(original, -0.1);
            let twentyPercent = lib.changeShade(original, -0.2);

            assertIsLighter(tenPercent, twentyPercent);
        });

        it("darkens hex color to max", () => {
            let original = "#aabbcc";

            let result = lib.changeShade(original, -1);

            expect(result).toBe("#000000");
        });

        it("lightens hex color", () => {
            let original = "#aabbcc";

            let result = lib.changeShade(original, 0.1);

            assertIsLighter(result, original);
        });

        it("lightens hex color based on lum", () => {
            let original = "#aabbcc";

            let tenPercent = lib.changeShade(original, 0.1);
            let twentyPercent = lib.changeShade(original, 0.2);

            assertIsLighter(twentyPercent, tenPercent);
        });

        it("lightens short hex color", () => {
            let original = "#abc";

            let result = lib.changeShade(original, 0.1);

            assertIsLighter(result, original);
        });
    });
    describe("mixColors", () => {
        it("mix color with ratio of 0", () => {
            let color1 = "#234567";
            let color2 = "#abcdef";

            expect(lib.mixColors(color1, color2, 0)).toEqual(color2);
            expect(lib.mixColors(color2, color1, 0)).toEqual(color1);
        });

        it("mix color with ratio of 1", () => {
            let color1 = "#234567";
            let color2 = "#abcdef";

            expect(lib.mixColors(color1, color2, 1)).toEqual(color1);
            expect(lib.mixColors(color2, color1, 1)).toEqual(color2);
        });

        it("mix color with ratio of 0.5", () => {
            let color1 = "#234567";
            let color2 = "#abcdef";

            expect(lib.mixColors(color1, color2, 0.5)).toEqual("#6789ab");
            expect(lib.mixColors(color2, color1, 0.5)).toEqual("#6789ab");
        });

        it("mix color with ratio of 0.25 and 0.75", () => {
            let color1 = "#234567";
            let color2 = "#abcdef";

            expect(lib.mixColors(color1, color2, 0.25)).toEqual("#89abcd");
            expect(lib.mixColors(color1, color2, 0.75)).toEqual("#456789");
        });
    });
    describe("Contrast Ratio <1, 21>", () => {
        it("Black and white - highest ratio => 21", () => {
            let color1 = rgbArrayToObject(lib.hexToRgb("#ffffff"));
            let color2 = rgbArrayToObject(lib.hexToRgb("#000000"));
            let ratio = 21;

            expect(lib.getContrastRatio(color1, color2)).toEqual(ratio);
            expect(lib.isColorCombinationSafe(color1, color2)).toBe(true);
        });
        it("Same colors - lowest ratio => 1", () => {
            let color = rgbArrayToObject(lib.hexToRgb("#ff0000"));
            let ratio = 1;

            expect(lib.getContrastRatio(color, color)).toEqual(ratio);
            expect(lib.isColorCombinationSafe(color, color)).toBe(false);
        });
        it("Minimal contrast ratio according to WCAG 2.1 for AAA level of any text size => 7", () => {
            let color1 = rgbArrayToObject(lib.hexToRgb("#ffffff"));
            let color2 = rgbArrayToObject(lib.hexToRgb("#b50800"));
            let ratio = 7;

            expect(lib.getContrastRatio(color1, color2)).toEqual(ratio);
            expect(lib.isColorCombinationSafe(color1, color2)).toBe(true);
        });
        it("Minimal contrast ratio according to WCAG 2.1 for AA level of any text size or AAA level of large text size => 4.5", () => {
            let color1 = rgbArrayToObject(lib.hexToRgb("#ffffff"));
            let color2 = rgbArrayToObject(lib.hexToRgb("#ee0500"));
            let ratio = 4.5;

            expect(lib.getContrastRatio(color1, color2)).toEqual(ratio);
        });
        it("Minimal contrast ratio according to WCAG 2.1 for AA level of large text size => 3", () => {
            let color1 = rgbArrayToObject(lib.hexToRgb("#ffffff"));
            let color2 = rgbArrayToObject(lib.hexToRgb("#ee7100"));
            let ratio = 3;

            expect(lib.getContrastRatio(color1, color2)).toEqual(ratio);
            expect(lib.isColorCombinationSafe(color1, color2)).toBe(false);
        });
        it("Blue and green => 1.67", () => {
            let color1 = rgbArrayToObject(lib.hexToRgb("#008000"));
            let color2 = rgbArrayToObject(lib.hexToRgb("#0000ff"));
            let ratio = 1.67;

            expect(lib.getContrastRatio(color1, color2)).toEqual(ratio);
            expect(lib.isColorCombinationSafe(color1, color2)).toBe(false);
        });
        /**
         * @description Source: https://www.w3.org/TR/WCAG21/#contrast-minimum
         */
        describe("Is contrast ratio large enough for text to be well readable according to WCAG 2.1", () => {
            it("Ratio 21 => true", () => {
                let ratio = 21;

                expect(lib.isContrastRatioSafe(ratio)).toBe(true);
            });
            it("Ratio 4.5 => true", () => {
                let ratio = 4.5;

                expect(lib.isContrastRatioSafe(ratio)).toBe(true);
            });
            it("Ratio 4.4 => false", () => {
                let ratio = 4.4;

                expect(lib.isContrastRatioSafe(ratio)).toBe(false);
            });
            it("Ratio 1 => false", () => {
                let ratio = 1;

                expect(lib.isContrastRatioSafe(ratio)).toBe(false);
            });
        });
    });
});

function rgbArrayToObject(rgbArray: number[]): lib.IRGBColor {
    return {
        r: rgbArray[0],
        g: rgbArray[1],
        b: rgbArray[2]
    };
}
