import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as Animation from "bobwai--animation";
import * as Checkbox from "bobwai--checkbox";
import * as animationFrame from "../src/lib";
import * as mockComponent from "./src/mockComponent";

let isClosing: boolean | undefined = undefined;
let isVisible: boolean = false;

Example.init({}, () => {
    return [
        Example.createControlPanel({
            items: [
                Example.createField({
                    label: "Note",
                    fieldType: Example.FieldType.Note,
                    value: "Parent component for some content which has to be animated when it is added/removed into/from DOM"
                }),
                Example.createField({
                    label: "Using note",
                    fieldType: Example.FieldType.Note,
                    value: "Should be used only inside other component not directly in application"
                }),
                Example.createField({
                    fieldFactory: Checkbox.create,
                    label: "Show frame",
                    value: isVisible,
                    fieldType: Example.FieldType.Checkbox,
                    onChange: v => {
                        if (v === false) {
                            isClosing = true;
                            isVisible = v;
                        } else {
                            isClosing = undefined;
                            isVisible = v;
                        }
                        b.invalidate();
                    }
                })
            ]
        }),
        Container.create({
            header: "animation-frame",
            description:
                "Parent component for some content which has to be animate according to animation settings from bobwai--animation component",
            content: [
                (isVisible || isClosing) &&
                    animationFrame.create({
                        content: getMockContent(),
                        isHiding: isClosing,
                        showHideAnimation: Animation.fadeInFadeOutAnimation(),
                        onHideAnimationFinished: () => {
                            isClosing = false;
                            isVisible = false;
                            b.invalidate();
                        }
                    })
            ]
        }),
        Container.create({
            isTest: true,
            header: "animation-frame - show/hide child element animation example",
            description: "This example demonstrates using inside another component",
            content: mockComponent.create({
                content: getMockContent()
            })
        })
    ];
});

function getMockContent(): b.IBobrilNode {
    return b.style(
        {
            children: "Some content",
            tag: "div",
            component: {
                onClick(_ctx: b.IBobrilCtx, _e: b.IBobrilMouseEvent): boolean {
                    isClosing = true;
                    b.invalidate();
                    return false;
                }
            }
        },
        {
            height: 250,
            width: 250,
            background: "orange"
        }
    );
}
