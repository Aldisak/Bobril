import * as b from "bobril";

export const id = "bobwai--overlay";

export const create = b.createComponent<IData>({
    id,
    init(ctx: IContext): void {
        if (ctx.data.shouldRestrictFocus !== false) {
            b.registerFocusRoot(ctx);
        }
    },
    render(ctx: IContext, me: b.IBobrilNode): void {
        b.style(me, baseStyle, ctx.data.isVisible && visibleStyle, ctx.data.hasOverflow && overflowStyle);
        me.children = ctx.data.content;
    },
    onClick(ctx: IContext): boolean {
        if (ctx.data.onClick) {
            ctx.data.onClick(ctx);
        }
        return false;
    },
    onMouseDown(ctx: IContext, e: b.IBobrilMouseEvent): boolean {
        if (e.button === 3 && ctx.data.onClick) {
            ctx.data.onClick(ctx);
        }
        return false;
    },
    postInitDom() {
        b.revalidateMouseIn();
    },
});

export interface IData {
    onClick?: (ctx: b.IBobrilCtx) => void;
    isVisible?: boolean;
    content?: b.IBobrilChildren;
    hasOverflow?: boolean;
    /** True (default) means that user can't go under overlay with TAB key. */
    shouldRestrictFocus?: boolean;
}

interface IContext extends b.IBobrilCtx {
    data: IData;
}

const baseStyle = b.styleDef(
    {
        position: "fixed",
        left: 0,
        right: 0,
        bottom: 0,
        top: 0,
        background: "rgba(0,0,0,0)",
        userSelect: "none",
    },
    {},
    "overlayStyle"
);

const overflowStyle = b.styleDefEx(baseStyle, {
    overflow: "auto",
});

const visibleStyle = b.styleDefEx(
    baseStyle,
    {
        background: "rgba(0,0,0,0.42)",
    },
    {},
    "overlayStyle"
);

// added by script - BEGIN
export const Overlay = create;
// added by script - END
