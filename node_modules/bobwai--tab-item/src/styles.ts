import * as b from "bobril";
import * as c from "./publicConstants";
import * as mixins from "bobwai--style-mixins";
import * as font from "bobwai--font";
import * as Color from "bobwai--color";
import * as Mixins from "bobwai--style-mixins";

export namespace localVariables {
    export const backgroundColor = c.BackgroundColor;
    export const backgroundColorActive = c.BackgroundColorActive;
    export const fontSize = font.FontSizeDefault;
    export const fontWeight = font.FontWeightSemibold;
    export const height = c.Height;
    export const smallSizeHeight = c.SmallSizeHeight;

    export const borderColor = Color.Grey300;
    export const borderRadius = 2;
    export const borderWidth = 1;

    export const iconContentPadding = 15;
    export const counterPaddingLeft = 12;

    export const minWidth = 80;
    export const maxWidth = 250;
    export const marginRightIcon = 10;
    export const deleteIconPaddingTop = 8;

    export const textItemMarginTopCorrection = -2;
}

export const deleteIconStyle = b.styleDef(
    [
        Mixins.getClickableElement(),
        {
            display: "inline-block",
            position: "absolute",
            marginRight: localVariables.marginRightIcon,
            marginLeft: c.MarginLeftIcon,
            top: localVariables.deleteIconPaddingTop,
            right: 0,
            fontSize: 0,
        },
    ],
    {},
    "delete-icon"
);

export const tabItemBaseStyle = b.styleDef(
    [
        mixins.getClickableElement(),
        mixins.centerVerticalParent(localVariables.height - localVariables.borderWidth * 2),
        {
            display: "inline-block",
            whiteSpace: "nowrap",
            position: "relative",
            height: localVariables.height - localVariables.borderWidth * 2,
            fontSize: 0,
            fontWeight: localVariables.fontWeight,
            color: c.TextColor,
            backgroundColor: localVariables.backgroundColor,
            padding: `0 ${c.TextPaddingRightLeft}px`,
            border: `solid ${localVariables.borderWidth}px ${localVariables.borderColor}`,
            borderTopLeftRadius: localVariables.borderRadius,
            borderTopRightRadius: localVariables.borderRadius,
            borderBottom: Color.Transparent,
        },
    ],
    {},
    "tab-item-base"
);

export const tabItemWithLabelStyle = b.styleDef({
    minWidth: localVariables.minWidth - c.TextPaddingRightLeft * 2 - localVariables.borderWidth * 2,
});

export const tabItemSmallStyle = b.styleDefEx(tabItemBaseStyle, [
    mixins.centerVerticalParent(localVariables.smallSizeHeight - localVariables.borderWidth * 2),
    {
        height: localVariables.smallSizeHeight - localVariables.borderWidth * 2,
    },
]);

export const tabItemDisabledStyle = b.styleDefEx(tabItemBaseStyle, [mixins.getUnselectable()], {}, "tab-item-disabled");

export const tabItemActiveStyle = b.styleDefEx(
    tabItemBaseStyle,
    [
        mixins.getUnselectable(),
        {
            background: localVariables.backgroundColorActive,
            color: c.TextColorActive,
            borderBottom: `solid ${localVariables.borderWidth}px ${localVariables.backgroundColorActive}`,
            marginBottom: -localVariables.borderWidth,
        },
    ],
    {},
    "tab-item-active"
);

export const tabItemIconStyle = b.styleDefEx(
    tabItemBaseStyle,
    {
        padding: `0 ${localVariables.iconContentPadding}px`,
    },
    {},
    "tab-item-icon"
);

export const tabItemIconActiveStyle = b.styleDefEx(
    tabItemIconStyle,
    [
        mixins.getUnselectable(),
        {
            borderBottomColor: "transparent",
            backgroundColor: localVariables.backgroundColorActive,
            borderBottom: `solid ${localVariables.borderWidth}px ${localVariables.backgroundColorActive}`,
            marginBottom: -localVariables.borderWidth,
        },
    ],
    {},
    "tab-item-icon-active"
);

export const contentStyle = b.styleDef([mixins.centerVerticalChild(), { fontSize: 0 }], {}, "tab-item-content");

export const contentDisabledStyle = b.styleDefEx(contentStyle, { opacity: 0.3 }, {}, "tab-item-content-disabled");

export const labelStyle = b.styleDef(
    [
        Mixins.lineEllipsis(),
        {
            display: "inline-block",
            maxWidth: localVariables.maxWidth,
            textAlign: "left",
            fontSize: localVariables.fontSize,
            verticalAlign: "middle",
            marginTop: localVariables.textItemMarginTopCorrection,
        },
    ],
    {},
    "tab-title"
);

export const counterStyle = b.styleDef({
    display: "inline-block",
    paddingLeft: localVariables.counterPaddingLeft,
    position: "relative",
    fontSize: localVariables.fontSize,
    verticalAlign: "middle",
    marginTop: localVariables.textItemMarginTopCorrection,
});

export const errorStyle = b.styleDef({
    background: Color.Error_05_solid,
    color: Color.Error,
    borderColor: Color.Error,
});

export const errorActiveStyle = b.styleDefEx(errorStyle, {
    background: Color.White,
    color: Color.Error,
    borderBottom: `solid ${localVariables.borderWidth}px ${localVariables.backgroundColorActive}`,
});

export const warningStyle = b.styleDef({
    background: Color.Warning_05_solid,
    color: Color.Warning,
    borderColor: Color.Warning,
});

export const warningActiveStyle = b.styleDefEx(warningStyle, {
    background: Color.White,
    color: Color.Warning,
    borderBottom: `solid ${localVariables.borderWidth}px ${localVariables.backgroundColorActive}`,
});

export const infoStyle = b.styleDef({
    background: Color.Info_05_solid,
    color: Color.Info,
    borderColor: Color.Info,
});

export const infoActiveStyle = b.styleDefEx(infoStyle, {
    background: Color.White,
    color: Color.Info,
    borderBottom: `solid ${localVariables.borderWidth}px ${localVariables.backgroundColorActive}`,
});

export const centeredStyle = b.styleDef({
    textAlign: "center",
});
