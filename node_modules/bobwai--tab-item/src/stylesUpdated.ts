import * as b from "bobril";
import * as c from "./publicConstants";
import * as Font from "bobwai--font";
import * as Color from "bobwai--color";
import * as ColorOperations from "bobwai--color-operations";
import * as Mixins from "bobwai--style-mixins";

export namespace localVariables {
    export const defaultTextColor = Color.Basic;
    export const defaultTextFontFamily = Font.FontFamily;
    export const defaultTextFontSize = Font.FontSizeDefault;
    export const defaultTextFontWeight = Font.FontWeightSemibold;
    export const defaultBgColor = Color.Basic;
    export const defaultBgOpacity = 0.08; // opacity100
    export const defaultBgResolved = ColorOperations.hexToRgba(defaultBgColor, defaultBgOpacity);

    export const hoverTextColor = Color.Basic;
    export const hoverBgColor = Color.Basic;
    export const hoverBgOpacity = 0; // opacity000
    export const hoverBgResolved = ColorOperations.hexToRgba(hoverBgColor, hoverBgOpacity);

    export const activeTextColor = Color.Basic;
    export const activeBgColor = Color.Basic;
    export const activeBgOpacity = 0; // opacity000
    export const activeBgResolved = ColorOperations.hexToRgba(activeBgColor, activeBgOpacity);

    export const activeTopStripeColor = Color.Application;
    export const activeTopStripeHeight = 3;

    export const activeErrorTopStripeColor = Color.Error;
    export const activeWarningTopStripeColor = Color.Warning;
    export const activeInfoTopStripeColor = Color.Info;

    export const focusedTextColor = Color.Basic;
    export const focusedBgColor = Color.Basic;
    export const focusedBgOpacity = "opacity100";

    export const focusedBorderColor = Color.Basic;
    export const focusedBorderOpacity = "opacity600";

    export const disabledOpacity = 0.32; // opacity400

    export const iconSize = 20;

    export const textPadding = 4;

    export const verticalMargin = 8;
    export const horizontalMargin = 16;

    export const condensedVerticalMargin = 4;
    export const condensedHorizontalMargin = 12;

    export const innerSpacing = 4;

    export const height = c.Height;
    export const lineHeight = "20px";

    export const borderColor = Color.Grey300;
    export const borderRadius = 2;
    export const borderWidth = 1;

    export const iconContentPadding = 15;

    export const minWidth = 0; // original was 80
    export const maxWidth = 250;
}

export const baseStyle = b.styleDef([
    Mixins.getUnselectable(),
    {
        position: "relative",
        height: localVariables.lineHeight,
        boxSizing: "content-box",
        paddingLeft: localVariables.horizontalMargin,
        paddingRight: localVariables.horizontalMargin,
        paddingTop: localVariables.verticalMargin,
        paddingBottom: localVariables.verticalMargin,
        background: localVariables.defaultBgResolved,
        fontSize: localVariables.defaultTextFontSize,
        fontWeight: localVariables.defaultTextFontWeight,
        fontFamily: localVariables.defaultTextFontFamily,
        whiteSpace: "nowrap",

        maxWidth: localVariables.maxWidth,
        minWidth: localVariables.minWidth,
        overflow: "hidden",

        flexShrink: 0,
    },
]);

export const baseSmallStyle = b.styleDefEx(baseStyle, {
    paddingLeft: localVariables.condensedHorizontalMargin,
    paddingRight: localVariables.condensedHorizontalMargin,
    paddingTop: localVariables.condensedVerticalMargin,
    paddingBottom: localVariables.condensedVerticalMargin,
});

export const baseHoverableStyle = b.styleDef(Mixins.getClickableElement(), {
    hover: {
        background: localVariables.hoverBgResolved,
    },
});

export const baseDisabledStyle = b.styleDefEx(baseStyle, {
    opacity: localVariables.disabledOpacity,
});

export const baseActiveStyle = b.styleDefEx(
    baseStyle,
    {
        background: localVariables.activeBgResolved,
    },
    {
        before: {
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            display: "block",
            content: "",
            height: localVariables.activeTopStripeHeight,
            background: localVariables.activeTopStripeColor,
        },
    }
);

export const baseActiveErrorStyle = b.styleDefEx(
    baseActiveStyle,
    {},
    {
        before: {
            background: localVariables.activeErrorTopStripeColor,
        },
    }
);

export const baseActiveWarningStyle = b.styleDefEx(
    baseActiveStyle,
    {},
    {
        before: {
            background: localVariables.activeWarningTopStripeColor,
        },
    }
);

export const baseActiveInfoStyle = b.styleDefEx(
    baseActiveStyle,
    {},
    {
        before: {
            background: localVariables.activeInfoTopStripeColor,
        },
    }
);

export const withInnerSpacing = b.styleDef({
    marginLeft: localVariables.innerSpacing,
});

export const textStyle = b.styleDef({
    lineHeight: localVariables.lineHeight,
    verticalAlign: "middle",
    display: "inline-block",
    paddingLeft: localVariables.textPadding,
    paddingRight: localVariables.textPadding,
    position: "relative",
    top: -1,
});

export const lineEllipsis = b.styleDef(Mixins.lineEllipsis());

export const iconStyle = b.styleDef({
    verticalAlign: "middle",
    display: "inline-block",
});
