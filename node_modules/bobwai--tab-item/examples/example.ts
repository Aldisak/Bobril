import * as b from "bobril";
import * as TabItem from "../src/lib";
import * as Container from "bobwai--viewer-container";
import * as FormElements from "bobwai--form-elements";
import * as Icon from "bobwai--icon";
import * as Color from "bobwai--color";
import * as Checkbox from "bobwai--checkbox";
import * as Label from "bobwai--label";
import * as Example from "bobwai--example";

function getTab(data: TabItem.IData): b.IBobrilChildren {
    data.onClick = () => {
        alert("click");
    };
    const smallData = <TabItem.IData>JSON.parse(JSON.stringify(data));
    b.assign(smallData, { size: TabItem.Size.Small });
    smallData.onClick = () => {
        alert("click on small variant");
    };
    return [
        b.styledDiv(TabItem.create(data), { display: "inline-block", paddingRight: 20, verticalAlign: "bottom" }),
        smallData.iconContent === undefined
            ? b.styledDiv(TabItem.create(smallData), { display: "inline-block", paddingRight: 20, verticalAlign: "bottom" })
            : null,
    ];
}

Example.init(
    {
        preferredHeight: Example.PreferredHeight.Medium,
    },
    () => {
        return [
            Container.create({
                header: "Tab item with delete icon long title ",
                content: [
                    Label.create({
                        isSimple: true,
                        isBold: true,
                        validationState: FormElements.ValidationState.Error,
                        displayAs: FormElements.DisplayAs.Block,
                        children: "Small variant of tab item works only with no icon content!",
                    }),
                    b.styledDiv(
                        TabItem.create({
                            label: "Normal Longggggggggggggggggggggg Title",
                            onDelete: () => {
                                alert("Click");
                            },
                            deletionTooltip: "Delete Item",
                        }),
                        { display: "inline-block", verticalAlign: "bottom" }
                    ),
                ],
            }),
            Container.create({
                header: "Tab item has min width with delete icon ",
                content: [
                    Label.create({
                        isSimple: true,
                        isBold: true,
                        validationState: FormElements.ValidationState.Error,
                        displayAs: FormElements.DisplayAs.Block,
                        children: "Small variant of tab item works only with no icon content!",
                    }),
                    b.styledDiv(
                        TabItem.create({
                            label: "A",
                            onDelete: () => {
                                alert("Click");
                            },
                            deletionTooltip: "Delete Item",
                        }),
                        { display: "inline-block", verticalAlign: "bottom" }
                    ),
                ],
            }),
            Container.create({
                header: "Tab item with delete icon small size and tab is disabled",
                content: [
                    Label.create({
                        isSimple: true,
                        isBold: true,
                        validationState: FormElements.ValidationState.Error,
                        displayAs: FormElements.DisplayAs.Block,
                        children: "Small variant of tab item works only with no icon content!",
                    }),
                    b.styledDiv(
                        TabItem.create({
                            label: "Normal",
                            onDelete: () => {
                                alert("Click");
                            },
                            deletionTooltip: "Delete Item",
                            size: TabItem.Size.Small,
                            isDisabled: true,
                        }),
                        { display: "inline-block", verticalAlign: "bottom" }
                    ),
                ],
            }),
            Container.create({
                header: "Tab item centered",
                content: [getTab({ label: "All", isCentered: true })],
            }),
            Container.create({
                header: "Tab item with text - small variant not work with icon content",
                content: [
                    Label.create({
                        isSimple: true,
                        isBold: true,
                        validationState: FormElements.ValidationState.Error,
                        displayAs: FormElements.DisplayAs.Block,
                        children: "Small variant of tab item works only with no icon content!",
                    }),
                    getTab({ label: "Normal" }),
                    getTab({ label: "Normal Longgggggggggggggggggggggggggssssssssssssssssggggg" }),
                    getTab({ label: "Disabled", isDisabled: true }),
                ],
            }),
            Container.create({
                header: "Tab item with text + counter",
                content: [getTab({ label: "Normal", counter: "29" }), getTab({ label: "Disabled", counter: "29", isDisabled: true })],
            }),
            Container.create({
                header: "Selected tab item with text",
                content: [
                    getTab({ label: "Selected", isSelected: true }),
                    getTab({ label: "Disabled", isSelected: true, isDisabled: true }),
                ],
            }),
            Container.create({
                header: "Selected tab item with text + counter",
                content: [
                    getTab({ label: "Selected", counter: 0, isSelected: true }),
                    getTab({ label: "Disabled", counter: 0, isSelected: true, isDisabled: true }),
                ],
            }),
            Container.create({
                header: "Tab item with icon",
                content: [
                    getTab({
                        label: "icon",
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                    }),
                    getTab({
                        label: "icon",
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Selected tab item with icon",
                content: [
                    getTab({
                        label: "icon with active",
                        isSelected: true,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                    }),
                    getTab({
                        label: "icon with active",
                        isSelected: true,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Tab item with icon in error state",
                content: [
                    getTab({
                        label: "icon with active",
                        validationState: FormElements.ValidationState.Error,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                        errorIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Error) }),
                    }),
                    getTab({
                        label: "icon with active",
                        validationState: FormElements.ValidationState.Error,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                        errorIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Error) }),
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Selected tab item with icon in error state",
                content: [
                    getTab({
                        label: "icon with active",
                        isSelected: true,
                        validationState: FormElements.ValidationState.Error,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                        errorIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Error) }),
                    }),
                    getTab({
                        label: "icon with active",
                        isSelected: true,
                        validationState: FormElements.ValidationState.Error,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                        errorIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Error) }),
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Tab item with icon in info state",
                content: [
                    getTab({
                        label: "icon with active",
                        isInfo: true,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                        infoIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Info) }),
                    }),
                    getTab({
                        label: "icon with active",
                        isInfo: true,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                        infoIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Info) }),
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Selected tab item with icon in info state",
                content: [
                    getTab({
                        label: "icon with active",
                        isSelected: true,
                        isInfo: true,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                        infoIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Info) }),
                    }),
                    getTab({
                        label: "icon with active",
                        isSelected: true,
                        isInfo: true,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Basic) }),
                        selectedIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Application) }),
                        infoIconContent: Icon.create({ sprite: b.sprite(Icon.plugin_medium_png, Color.Info) }),
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Error state",
                content: [
                    getTab({
                        label: "Error state item",
                        counter: 123,
                        validationState: FormElements.ValidationState.Error,
                    }),
                    getTab({
                        label: "Error state item disabled",
                        counter: 123,
                        validationState: FormElements.ValidationState.Error,
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Error state active state",
                content: [
                    getTab({
                        label: "Error state active item",
                        counter: 123,
                        isSelected: true,
                        validationState: FormElements.ValidationState.Error,
                    }),
                    getTab({
                        label: "Error state active item disabled",
                        counter: 123,
                        isSelected: true,
                        validationState: FormElements.ValidationState.Error,
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Warning state",
                content: [
                    getTab({
                        label: "Warning state item",
                        counter: 123,
                        validationState: FormElements.ValidationState.Warning,
                    }),
                    getTab({
                        label: "Warning state item disabled",
                        counter: 123,
                        validationState: FormElements.ValidationState.Warning,
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Warning state active state",
                content: [
                    getTab({
                        label: "Warning state active item",
                        counter: 123,
                        isSelected: true,
                        validationState: FormElements.ValidationState.Warning,
                    }),
                    getTab({
                        label: "Warning state active item disabled",
                        counter: 123,
                        isSelected: true,
                        validationState: FormElements.ValidationState.Warning,
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Info state",
                content: [
                    getTab({
                        label: "Info state item",
                        counter: 123,
                        isInfo: true,
                    }),
                    getTab({
                        label: "Info state item disabled",
                        counter: 123,
                        isInfo: true,
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                header: "Info state active state",
                content: [
                    getTab({
                        label: "Info state active item",
                        counter: 123,
                        isSelected: true,
                        isInfo: true,
                    }),
                    getTab({
                        label: "Info state active item disabled",
                        counter: 123,
                        isSelected: true,
                        isInfo: true,
                        isDisabled: true,
                    }),
                ],
            }),
            Container.create({
                isForConstantOverride: true,
                content: [
                    Example.createControlPanel({
                        items: [
                            Example.createField<Color.IColor>({
                                label: "TextColor",
                                onChange: (v: Color.IColor) => {
                                    TabItem.setTextColor(v);
                                    b.invalidateStyles();
                                },
                                fieldType: Example.FieldType.IColor,
                            }),
                            Example.createField<Color.IColor>({
                                label: "TextColorActive",
                                onChange: (v: Color.IColor) => {
                                    TabItem.setTextColorActive(v);
                                    b.invalidateStyles();
                                },
                                fieldType: Example.FieldType.IColor,
                            }),
                            Example.createField<boolean>({
                                label: "UseLatestStyles",
                                value: TabItem.UseLatestStyles(),
                                onChange: (v: boolean) => {
                                    TabItem.setUseLatestStyles(v);
                                    b.invalidateStyles();
                                },
                                fieldType: Example.FieldType.Checkbox,
                                fieldFactory: Checkbox.create,
                            }),
                        ],
                    }),
                ],
            }),
        ];
    }
);
