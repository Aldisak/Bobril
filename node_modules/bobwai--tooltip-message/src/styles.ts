import * as b from "bobril";
import * as Color from "bobwai--color";
import * as Font from "bobwai--font";
import { Variant } from "./data";
import * as constants from "./publicConstants";

export interface IVariantVariables {
    variant: Variant;
    messageTopBottomPadding: number;
    messageLeftRightPadding: number;
    messageLineHeight: number;
    fontSize?: number;
    arrowSize: number;
    transformationOriginArrowSize: number;
    transformationOriginArrowOffset: number;
    arrowEdgeOffset: number;
}

export namespace localVariables {
    export const defaultVariables: IVariantVariables = {
        variant: Variant.Default,
        messageTopBottomPadding: 12,
        messageLeftRightPadding: 16,
        messageLineHeight: 19,
        arrowSize: 6,
        transformationOriginArrowSize: 6,
        transformationOriginArrowOffset: 20,
        arrowEdgeOffset: 15
    };

    export const satelliteVariables: IVariantVariables = {
        variant: Variant.Satellite,
        messageTopBottomPadding: 4,
        messageLeftRightPadding: 7,
        messageLineHeight: 16,
        fontSize: 11,
        arrowSize: 3,
        transformationOriginArrowSize: 3,
        transformationOriginArrowOffset: 10,
        arrowEdgeOffset: 8
    };

    export const messageColor = Color.White;
    export const borderColor = Color.White;
    export const borderStyle = "solid";
    export const borderWidth = 1;
}

export const baseStyle = b.styleDef(
    {
        display: "inline-block",
        position: "relative",
        maxWidth: constants.MaxWidth,
        backgroundColor: constants.Background,
        color: localVariables.messageColor,
        wordWrap: "break-word",
        whiteSpace: "pre-wrap",
        pointerEvents: "none"
    },
    {},
    "tooltip-message"
);

export const borderStyle = b.styleDefEx(
    baseStyle,
    {
        borderColor: localVariables.borderColor,
        borderStyle: localVariables.borderStyle,
        borderWidth: localVariables.borderWidth
    },
    {},
    "tooltip-message-border"
);

export const extendedWidthStyle = b.styleDefEx(
    baseStyle,
    {
        maxWidth: 2 * constants.MaxWidth
    },
    {},
    "tooltip-message-extended-width"
);

export const errorStyle = b.styleDefEx(
    baseStyle,
    {
        backgroundColor: Color.Error
    },
    {},
    "tooltip-message-invalid"
);

export const warningStyle = b.styleDefEx(
    baseStyle,
    {
        backgroundColor: Color.Warning
    },
    {},
    "tooltip-message-warning"
);

export const headerStyle = b.styleDef(
    {
        fontWeight: Font.FontWeightSemibold
    },
    {},
    "tooltip-message-header"
);

export const arrowBaseStyle = b.styleDef({
    border: "1px solid transparent",
    width: 0,
    height: 0,
    display: "inline-block",
    position: "absolute"
});

export interface IVariantStyle {
    style: b.IBobrilStyles;
    arrowUpStyle: b.IBobrilStyles;
    arrowUpBorderStyle: b.IBobrilStyles;
    arrowDownStyle: b.IBobrilStyles;
    arrowDownBorderStyle: b.IBobrilStyles;
    arrowLeftStyle: b.IBobrilStyles;
    arrowLeftBorderStyle: b.IBobrilStyles;
    arrowRightStyle: b.IBobrilStyles;
    arrowRightBorderStyle: b.IBobrilStyles;
    arrowHorizontalRightStyle: b.IBobrilStyles;
    arrowHorizontalRightBorderStyle: b.IBobrilStyles;
    arrowHorizontalLeftStyle: b.IBobrilStyles;
    arrowHorizontalLeftBorderStyle: b.IBobrilStyles;
}

const variantStyles = {
    default: getStylesForVariantVariables(localVariables.defaultVariables),
    satellite: getStylesForVariantVariables(localVariables.satelliteVariables)
};

export function getStyleForVariant(variant: Variant | undefined): IVariantStyle {
    switch (variant) {
        case Variant.Satellite:
            return variantStyles.satellite;
        default:
            return variantStyles.default;
    }
}

function getStylesForVariantVariables(variantVariables: IVariantVariables): IVariantStyle {
    return {
        style: b.styleDefEx(baseStyle, getVariantBaseStyle(variantVariables), {}, "style" + variantVariables.variant),
        arrowUpStyle: b.styleDefEx(arrowBaseStyle, getArrowUpStyle(variantVariables), {}, "arrowUp" + variantVariables.variant),
        arrowUpBorderStyle: b.styleDefEx(
            arrowBaseStyle,
            getArrowUpBorderStyle(variantVariables),
            {},
            "arrowUpBorder" + variantVariables.variant
        ),
        arrowDownStyle: b.styleDefEx(arrowBaseStyle, getArrowDownStyle(variantVariables), {}, "arrowDown" + variantVariables.variant),
        arrowDownBorderStyle: b.styleDefEx(
            arrowBaseStyle,
            getArrowDownBorder(variantVariables),
            {},
            "arrowDownBorder" + variantVariables.variant
        ),
        arrowLeftStyle: b.styleDefEx(arrowBaseStyle, getArrowLeftStyle(variantVariables), {}, "arrowLeft" + variantVariables.variant),
        arrowLeftBorderStyle: b.styleDefEx(
            arrowBaseStyle,
            getArrowLeftBorderStyle(variantVariables),
            {},
            "arrowLeftBorder" + variantVariables.variant
        ),
        arrowRightStyle: b.styleDefEx(
            arrowBaseStyle,
            getArrowRightBorderStyle(variantVariables),
            {},
            "arrowRight" + variantVariables.variant
        ),
        arrowRightBorderStyle: b.styleDefEx(
            arrowBaseStyle,
            getRightBorderStyle(variantVariables),
            {},
            "arrowRightBorder" + variantVariables.variant
        ),
        arrowHorizontalRightStyle: b.styleDefEx(
            arrowBaseStyle,
            getArrowHorizontalRightStyle(variantVariables),
            {},
            "arrowHorizontalRight" + variantVariables.variant
        ),
        arrowHorizontalRightBorderStyle: b.styleDefEx(
            arrowBaseStyle,
            getArrowHorizontalRightBorderStyle(variantVariables),
            {},
            "arrowHorizontalRightBorder" + variantVariables.variant
        ),
        arrowHorizontalLeftStyle: b.styleDefEx(
            arrowBaseStyle,
            getArrowHorizontalLeftStyle(variantVariables),
            {},
            "arrowHorizontalLeft" + variantVariables.variant
        ),
        arrowHorizontalLeftBorderStyle: b.styleDefEx(
            arrowBaseStyle,
            getArrowHorizontalLeftBorderStyle(variantVariables),
            {},
            "arrowHorizontalLeftBorder" + variantVariables.variant
        )
    };
}

function getArrowPositionSize(arrowSize: number): number {
    return arrowSize + 1;
}

function getArrowForBorderEdgeOffset(arrowEdgeOffset: number): number {
    return arrowEdgeOffset - localVariables.borderWidth;
}

function getArrowForBorderSize(arrowSize: number): number {
    return arrowSize + localVariables.borderWidth;
}

function getArrowForBorderPositionSize(arrowSize: number): number {
    return getArrowForBorderSize(arrowSize) + localVariables.borderWidth;
}

function getVariantBaseStyle(variantVariables: IVariantVariables): b.CSSStyles {
    return {
        paddingBottom: variantVariables.messageTopBottomPadding,
        paddingTop: variantVariables.messageTopBottomPadding,
        paddingLeft: variantVariables.messageLeftRightPadding,
        paddingRight: variantVariables.messageLeftRightPadding,
        lineHeight: `${variantVariables.messageLineHeight}px`,
        fontSize: variantVariables.fontSize ? `${variantVariables.fontSize}px` : undefined
    };
}

function getArrowUpStyle(variantVariables: IVariantVariables): b.CSSStyles {
    return {
        borderLeftWidth: variantVariables.arrowSize,
        borderRightWidth: variantVariables.arrowSize,
        borderBottomWidth: variantVariables.arrowSize,
        borderBottomColor: constants.Background,
        left: "50%",
        top: -getArrowPositionSize(variantVariables.arrowSize),
        marginLeft: -variantVariables.arrowSize
    };
}

function getArrowUpBorderStyle(variantVariables: IVariantVariables): b.CSSStyles {
    let arrowForBorderSize = getArrowForBorderSize(variantVariables.arrowSize);
    return {
        borderLeftWidth: arrowForBorderSize,
        borderRightWidth: arrowForBorderSize,
        borderBottomWidth: arrowForBorderSize,
        borderBottomColor: localVariables.borderColor,
        left: "50%",
        top: -getArrowForBorderPositionSize(variantVariables.arrowSize),
        marginLeft: -arrowForBorderSize
    };
}

function getArrowDownStyle(variantVariables: IVariantVariables) {
    return {
        borderLeftWidth: variantVariables.arrowSize,
        borderRightWidth: variantVariables.arrowSize,
        borderTopWidth: variantVariables.arrowSize,
        borderTopColor: constants.Background,
        top: "100%",
        left: "50%",
        marginLeft: -variantVariables.arrowSize
    };
}

function getArrowDownBorder(variantVariables: IVariantVariables) {
    const arrowForBorderSize = getArrowForBorderSize(variantVariables.arrowSize);
    return {
        borderLeftWidth: arrowForBorderSize,
        borderRightWidth: arrowForBorderSize,
        borderTopWidth: arrowForBorderSize,
        borderTopColor: localVariables.borderColor,
        top: "100%",
        left: "50%",
        marginLeft: -arrowForBorderSize
    };
}

function getArrowLeftStyle(variantVariables: IVariantVariables) {
    return {
        borderTopWidth: variantVariables.arrowSize,
        borderRightWidth: variantVariables.arrowSize,
        borderBottomWidth: variantVariables.arrowSize,
        borderRightColor: constants.Background,
        top: "50%",
        left: -getArrowPositionSize(variantVariables.arrowSize),
        marginTop: -variantVariables.arrowSize
    };
}

function getArrowLeftBorderStyle(variantVariables: IVariantVariables) {
    const arrowForBorderSize = getArrowForBorderSize(variantVariables.arrowSize);
    return {
        borderTopWidth: arrowForBorderSize,
        borderRightWidth: arrowForBorderSize,
        borderBottomWidth: arrowForBorderSize,
        borderRightColor: localVariables.borderColor,
        top: "50%",
        left: -getArrowForBorderPositionSize(variantVariables.arrowSize),
        marginTop: -arrowForBorderSize
    };
}

function getArrowRightBorderStyle(variantVariables: IVariantVariables) {
    return {
        borderTopWidth: variantVariables.arrowSize,
        borderLeftWidth: variantVariables.arrowSize,
        borderBottomWidth: variantVariables.arrowSize,
        borderLeftColor: constants.Background,
        top: "50%",
        left: "100%",
        marginTop: -variantVariables.arrowSize
    };
}

function getRightBorderStyle(variantVariables: IVariantVariables) {
    let arrowForBorderSize = getArrowForBorderSize(variantVariables.arrowSize);
    return {
        borderTopWidth: arrowForBorderSize,
        borderLeftWidth: arrowForBorderSize,
        borderBottomWidth: arrowForBorderSize,
        borderLeftColor: localVariables.borderColor,
        top: "50%",
        left: "100%",
        marginTop: -arrowForBorderSize
    };
}

function getArrowHorizontalRightStyle(variantVariables: IVariantVariables) {
    return {
        left: "auto",
        right: variantVariables.arrowEdgeOffset
    };
}

function getArrowHorizontalRightBorderStyle(variantVariables: IVariantVariables) {
    return {
        left: "auto",
        right: getArrowForBorderEdgeOffset(variantVariables.arrowEdgeOffset)
    };
}

function getArrowHorizontalLeftStyle(variantVariables: IVariantVariables) {
    return {
        right: "auto",
        left: variantVariables.arrowEdgeOffset + variantVariables.arrowSize
    };
}

function getArrowHorizontalLeftBorderStyle(variantVariables: IVariantVariables) {
    return {
        right: "auto",
        left: getArrowForBorderEdgeOffset(variantVariables.arrowEdgeOffset) + getArrowForBorderSize(variantVariables.arrowSize)
    };
}

export const ellipsisStyle = b.styleDef({
    textOverflow: "ellipsis",
    width: "100%",
    whiteSpace: "nowrap",
    overflow: "hidden"
});

export const ellipsisWidthNormalStyle = b.styleDef({
    maxWidth: 150
});
