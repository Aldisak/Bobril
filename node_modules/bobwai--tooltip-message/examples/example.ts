import * as b from "bobril";
import * as Checkbox from "bobwai--checkbox";
import * as Color from "bobwai--color";
import * as Combobox from "bobwai--combobox";
import * as Example from "bobwai--example";
import * as FormElements from "bobwai--form-elements";
import * as LColumns from "bobwai--l-columns";
import * as LInlineItems from "bobwai--l-inline-items";
import * as Container from "bobwai--viewer-container";
import * as TooltipMessage from "../src/lib";
import { Variant } from "../src/lib";

let tooltipMessageSampleStyle = b.styleDef({ padding: 15 });
let tooltipMessageSampleDarkStyle = b.styleDefEx(tooltipMessageSampleStyle, { background: "black" });

let enableRTL = true;
let headerWithRtlLanguage = "first part أتمنى لك نهارا سعيد last part";
let messageWithRtlLanguage = "Have a Nice Day أتمنى لك نهارا سعيد أتمنى لك نهارا سعيد أتمنى لك نهارا سعيد last part";

let zoomRatio = 1;
let ellipsisMode: TooltipMessage.EllipsisWidth;

Example.init({}, () => {
    TooltipMessage.setEnableRTL(enableRTL);
    return [
        Container.create({
            header: "Default state",
            content: TooltipMessage.create({
                header: "Template",
                message: ["Generic letter with manually filled in data.", "If you need, the second message can start on the new line"]
            })
        }),
        Container.create({
            header: "Default state - text with more spaces and text without spaces",
            content: [
                LInlineItems.create({
                    verticalAlign: FormElements.VerticalAlign.Top,
                    customMargin: 20,
                    items: [
                        TooltipMessage.create({
                            header: "        Text with long               spaces.    ",
                            message: ["        Text with long               spaces.    "]
                        }),
                        TooltipMessage.create({
                            header: "TextWithoutSpacesTextWithoutSpacesTextWithoutSpacesTextWithoutSpaces",
                            message: [
                                "TextWithoutSpacesTextWithoutSpacesTextWithoutSpacesTextWithoutSpacesTextWithoutSpacesTextWithoutSpacesTextWithoutSpacesTextWithoutSpaces"
                            ]
                        })
                    ]
                })
            ]
        }),
        Container.create({
            header: "With border",
            description: "Should be used in charts",
            content: b.styledDiv(
                TooltipMessage.create({
                    hasBorder: true,
                    header: "Template",
                    message: ["Generic letter with manually filled in data.", "If you need, the second message can start on the new line"]
                }),
                { background: "black", padding: 20 }
            )
        }),
        Container.create({
            header: "Variant",
            isTest: true,
            content: [
                b.styledDiv(
                    TooltipMessage.create({
                        header: "Header Default",
                        message: "Message Default",
                        placement: TooltipMessage.Placement.bottomCenter,
                        variant: TooltipMessage.Variant.Default
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        message: "Message only  Default",
                        placement: TooltipMessage.Placement.right,
                        variant: TooltipMessage.Variant.Default
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        message: "Message only  Default",
                        placement: TooltipMessage.Placement.left,
                        variant: TooltipMessage.Variant.Default
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        header: "Header Default",
                        message: ["Message 1", "Message 2"],
                        placement: TooltipMessage.Placement.topCenter,
                        variant: TooltipMessage.Variant.Default
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        header: "Header Satellite",
                        message: "Message Satellite",
                        placement: TooltipMessage.Placement.bottomCenter,
                        variant: TooltipMessage.Variant.Satellite
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        message: "Message only  Satellite",
                        placement: TooltipMessage.Placement.right,
                        variant: TooltipMessage.Variant.Satellite
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        message: "Message only  Satellite",
                        placement: TooltipMessage.Placement.left,
                        variant: TooltipMessage.Variant.Satellite
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        header: "Header Satellite",
                        message: ["Message 1", "Message 2"],
                        placement: TooltipMessage.Placement.topCenter,
                        variant: TooltipMessage.Variant.Satellite
                    }),
                    tooltipMessageSampleStyle
                )
            ]
        }),
        Container.create({
            header: "Header(s) and message(s)",
            isTest: true,
            content: [
                b.styledDiv(
                    TooltipMessage.create({
                        header: "Header",
                        message: "Message"
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        message: "Message only"
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        header: "Header",
                        message: ["Message 1", "Message 2"]
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        header: ["Header 1", "Header 2"],
                        message: "Message"
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        header: ["Header 1", "Header 2"],
                        message: ["Message 1", "Message 2"]
                    }),
                    tooltipMessageSampleStyle
                )
            ]
        }),
        Container.create({
            header: "Error state",
            content: TooltipMessage.create({
                message: "Some error message",
                validationState: FormElements.ValidationState.Error
            })
        }),
        Container.create({
            header: "Warning state",
            content: TooltipMessage.create({
                message: "Some warning message",
                validationState: FormElements.ValidationState.Warning
            })
        }),
        Container.create({
            header: "placement test",
            isTest: true,
            content: LColumns.create({
                children: [getAllPlacements(false), getAllPlacements(true)]
            })
        }),
        Container.create({
            header: "test with long header",
            isTest: true,
            content: [
                b.styledDiv(
                    TooltipMessage.create({
                        header:
                            "Generic letter with manually filled in data. If you need, the second " + "message can start on the new line",
                        message: [
                            "Generic letter with manually filled in data.",
                            "If you need, the second message can start on the new line"
                        ]
                    }),
                    tooltipMessageSampleStyle
                )
            ]
        }),
        Container.create({
            header: "Custom theme - background color",
            content: [
                b.styledDiv(
                    TooltipMessage.create({
                        message: "test - topCenter",
                        customTheme: { background: Color.Chart_Violet500 },
                        placement: TooltipMessage.Placement.topCenter
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        message: "test - left",
                        customTheme: { background: Color.Chart_Violet500 },
                        placement: TooltipMessage.Placement.left
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        message: "test - right",
                        customTheme: { background: Color.Chart_Violet500 },
                        placement: TooltipMessage.Placement.right
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        message: "test - bottom",
                        customTheme: { background: Color.Chart_Violet500 },
                        placement: TooltipMessage.Placement.bottomCenter
                    }),
                    tooltipMessageSampleStyle
                )
            ]
        }),
        Container.create({
            header: "Test with wrapping non space text",
            isTest: true,
            content: [
                b.styledDiv(
                    TooltipMessage.create({
                        message: "123456789.123456789.123456789.123456789.123456789.123456789.123456789.123456789.123456789",
                        placement: TooltipMessage.Placement.topCenter
                    }),
                    tooltipMessageSampleStyle
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        message: "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789",
                        placement: TooltipMessage.Placement.topCenter
                    }),
                    tooltipMessageSampleStyle
                )
            ]
        }),
        Container.create({
            header: "Tooltip with very long message",
            description: "If summary message length exceed 600 char tooltip has double width",
            content: [
                b.styledDiv(
                    TooltipMessage.create({
                        message: [
                            "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu,",
                            "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu,"
                        ],
                        placement: TooltipMessage.Placement.topCenter
                    }),
                    tooltipMessageSampleStyle
                )
            ]
        }),
        Container.create({
            header: "Tooltip message with supporting right-to-left language",
            content: TooltipMessage.create({
                header: headerWithRtlLanguage,
                message: messageWithRtlLanguage,
                placement: TooltipMessage.Placement.topCenter
            })
        }),
        Container.create({
            header: "Tooltip message with supporting right-to-left language in array variant",
            content: TooltipMessage.create({
                header: [headerWithRtlLanguage, headerWithRtlLanguage, headerWithRtlLanguage],
                message: [messageWithRtlLanguage, messageWithRtlLanguage, messageWithRtlLanguage],
                placement: TooltipMessage.Placement.topCenter
            })
        }),
        Container.create({
            isForConstantOverride: true,
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField<boolean>({
                            label: "Enable Supporting Right To Left language",
                            labelWidth: 300,
                            value: enableRTL,
                            fieldFactory: Checkbox.create,
                            onChange: (v: boolean) => {
                                enableRTL = v;
                                TooltipMessage.setEnableRTL(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.Checkbox
                        })
                    ]
                })
            ]
        }),
        Container.create({
            header: "Zoom test",
            isTest: true,
            content: [
                Combobox.create({
                    value: zoomRatio,
                    items: [{ value: 0.5, label: "0.5" }, { value: 1, label: "1" }, { value: 1.5, label: "1.50" }],
                    onChange: (value: number) => {
                        zoomRatio = value;
                        b.invalidate();
                    }
                }),
                b.styledDiv(
                    TooltipMessage.create({
                        header: "Default variant",
                        message: [
                            "Generic letter with manually filled in data.",
                            "If you need, the second message can start on the new line"
                        ],
                        placement: TooltipMessage.Placement.bottomRight,
                        zoomRatio: zoomRatio
                    }),
                    { height: 200, paddingTop: 10 }
                ),
                b.styledDiv(
                    TooltipMessage.create({
                        header: "Satellite variant",
                        message: [
                            "Generic letter with manually filled in data.",
                            "If you need, the second message can start on the new line"
                        ],
                        placement: TooltipMessage.Placement.bottomRight,
                        zoomRatio: zoomRatio,
                        variant: TooltipMessage.Variant.Satellite
                    }),
                    { height: 150 }
                )
            ]
        }),
        Container.create({
            header: "Tooltip with ellipsis",
            isTest: true,
            content: [
                b.styledDiv(
                    Example.createControlPanel({
                        items: [
                            Example.createField({
                                label: "EllipsisMode",
                                customValueContent: Example.createComboEnum({
                                    comboboxFactory: Combobox.create,
                                    enum: TooltipMessage.EllipsisWidth,
                                    value: ellipsisMode,
                                    onChange: value => {
                                        ellipsisMode = value;
                                        b.invalidate;
                                    }
                                })
                            })
                        ]
                    })
                ),
                getEllipsisSampleContainer(
                    TooltipMessage.create({
                        ellipsisWidth: ellipsisMode,
                        header: ["Header only tooltip ellipsis test", "(multiline)"],
                        placement: TooltipMessage.Placement.topCenter
                    })
                ),
                getEllipsisSampleContainer(
                    TooltipMessage.create({
                        ellipsisWidth: ellipsisMode,
                        message: ["Message only tooltip ellipsis test", "(multiline)"],
                        placement: TooltipMessage.Placement.topCenter
                    })
                ),
                getEllipsisSampleContainer(
                    TooltipMessage.create({
                        ellipsisWidth: ellipsisMode,
                        header: "Header & message tooltip ellipsis test",
                        message: "(single line)",
                        placement: TooltipMessage.Placement.topCenter
                    })
                ),
                getEllipsisSampleContainer(
                    TooltipMessage.create({
                        ellipsisWidth: ellipsisMode,
                        header: "Satellite tooltip great ellipsis test",
                        message: "(single line)",
                        placement: TooltipMessage.Placement.topCenter,
                        variant: Variant.Satellite
                    })
                )
            ]
        })
    ];
});

function getAllPlacements(hasBorder: boolean) {
    return [
        b.styledDiv(hasBorder ? "With border" : "Without border", tooltipMessageSampleStyle),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "test - topCenter",
                placement: TooltipMessage.Placement.topCenter
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "test - topLeft",
                placement: TooltipMessage.Placement.topLeft
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "test - topRight",
                placement: TooltipMessage.Placement.topRight
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "test - bottomCenter",
                placement: TooltipMessage.Placement.bottomCenter
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "test - bottomLeft",
                placement: TooltipMessage.Placement.bottomLeft
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "test - bottomRight",
                placement: TooltipMessage.Placement.bottomRight
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "test - left",
                placement: TooltipMessage.Placement.left
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "test - right",
                placement: TooltipMessage.Placement.right
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "ERROR test - top",
                placement: TooltipMessage.Placement.topCenter,
                validationState: FormElements.ValidationState.Error
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "ERROR test - bottom",
                placement: TooltipMessage.Placement.bottomCenter,
                validationState: FormElements.ValidationState.Error
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "ERROR test - left",
                placement: TooltipMessage.Placement.left,
                validationState: FormElements.ValidationState.Error
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "ERROR test - right",
                placement: TooltipMessage.Placement.right,
                validationState: FormElements.ValidationState.Error
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "CUSTOM COLOR test - top",
                placement: TooltipMessage.Placement.topCenter,
                customTheme: { background: Color.Chart_Violet500 }
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "CUSTOM COLOR test - bottom",
                placement: TooltipMessage.Placement.bottomCenter,
                customTheme: { background: Color.Chart_Violet500 }
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "CUSTOM COLOR test - left",
                placement: TooltipMessage.Placement.left,
                customTheme: { background: Color.Chart_Violet500 }
            }),
            getSampleStyle(hasBorder)
        ),
        b.styledDiv(
            TooltipMessage.create({
                hasBorder: hasBorder,
                message: "CUSTOM COLOR test - right",
                placement: TooltipMessage.Placement.right,
                customTheme: { background: Color.Chart_Violet500 }
            }),
            getSampleStyle(hasBorder)
        )
    ];
}

function getSampleStyle(hasBorder: boolean) {
    return [tooltipMessageSampleStyle, hasBorder && tooltipMessageSampleDarkStyle];
}

function getEllipsisSampleContainer(content: b.IBobrilNode) {
    return b.styledDiv(content, { paddingTop: 10, paddingRight: 5, display: "inline-block" });
}
