import * as b from "bobril";
import * as Icon from "bobwai--icon";
import * as StateIcon from "bobwai--state-icon";
import * as Color from "bobwai--color";
import * as SidebarItem from "bobwai--sidebar-item";
import * as SidebarItemCollapsible from "bobwai--sidebar-item-collapsible";
import * as Sidebar from "bobwai--sidebar";
import * as SidebarFooter from "bobwai--sidebar-footer";
import * as LViewContent from "bobwai--l-view-content-with-footer";
import * as assets from "../src/assets";

export function setActiveItem(source: SidebarItem.IData[], id: string): void {
    source.forEach((item: SidebarItem.IData) => {
        item.isActive = item.id === id;
    });
}

export function getSidebar(items: b.IBobrilNode[], withFooter: boolean): b.IBobrilNode {
    const sidebar = Sidebar.create({ children: items });
    return withFooter
        ? getSidebarWithFooter(sidebar)
        : b.styledDiv(sidebar, {
              width: 250,
              height: 400,
              overflowY: "auto",
          });
}

export function getItemsFromData(data: (SidebarItem.IData | SidebarItemCollapsible.IData)[]): b.IBobrilNode[] {
    return data.map((item: SidebarItem.IData) => {
        return item.isCollapsible ? SidebarItemCollapsible.create(item) : SidebarItem.create(item);
    });
}

function getSidebarWithFooter(sidebar: b.IBobrilNode): b.IBobrilNode {
    const logo = Icon.create({ sprite: b.sprite(assets.logo_neopost_png) });
    return b.styledDiv(
        LViewContent.create({
            bodyContent: sidebar,
            footerContent: SidebarFooter.create({ leftContent: logo, rightContent: "Copyright Â© 2016" }),
            customFooterHeight: 62,
        }),
        {
            height: 400,
            width: 250,
            backgroundColor: Color.White,
        }
    );
}

export function getIconMain() {
    return Icon.create({ sprite: b.sprite(Icon.home_small_png, Color.Basic) });
}
export function getIconJobs() {
    return Icon.create({ sprite: b.sprite(Icon.sandclock_small_png, Color.Basic) });
}
export function getIconProfiles() {
    return Icon.create({ sprite: b.sprite(Icon.optical_mark_small_png, Color.Basic) });
}
export function getIconSettings() {
    return Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Basic) });
}
export function getIconAttributes() {
    return Icon.create({ sprite: b.sprite(Icon.page_area_small_png, Color.Basic) });
}
export function getIconVariablesError() {
    return Icon.create({ sprite: b.sprite(Icon.datamatrix_small_png, Color.Error) });
}
export function getIconLanguageWarning() {
    return Icon.create({ sprite: b.sprite(Icon.dialog_small_png, Color.Warning) });
}
export function getIconDynamicZones() {
    return Icon.create({ sprite: b.sprite(Icon.zone_small_png, Color.Basic) });
}

export function getStateIcon(): b.IBobrilNode {
    return StateIcon.create({
        content: Icon.create({ sprite: b.sprite(Icon.edit_small_png, Color.Basic) }),
        hoverContent: Icon.create({ sprite: b.sprite(Icon.edit_small_png, Color.Application) }),
        onClick: onIconClick,
    });
}

const onIconClick = (): boolean => {
    alert("click");
    return false;
};
