import * as b from "bobril";
import * as Textarea from "../src/lib";
import * as LField from "bobwai--l-field";
import * as LFieldGroup from "bobwai--l-field-group";
import * as Label from "bobwai--label";
import * as Container from "bobwai--viewer-container";
import * as FormElements from "bobwai--form-elements";
import * as Spinner from "bobwai--spinner";
import * as Button from "bobwai--button";
import * as Example from "bobwai--example";
import * as Color from "bobwai--color";
import * as ColorPicker from "bobwai--color-picker";
import * as Combobox from "bobwai--combobox";
import * as Textbox from "bobwai--textbox";
import * as LInlineItems from "bobwai--l-inline-items";
import * as Font from "bobwai--font";
import * as Checkbox from "bobwai--checkbox";

let label = Label.create({ children: "Label" });
let selectionStart = 0;
let selectionEnd = 11;
let currentSelectionStart = 7;
let currentSelectionEnd = 11;
let shouldSetSelection: boolean = true;
let selectableText = "Sample text that should be selected";
let autoResizeTestText = "";
let vScrollbarWidth = 0;
let value = "some value";
function onChange(v: string) {
    value = v;
    b.invalidate();
}
let fontSize = 15;
let lineHeight = 18;
let padding = "";
const defaultColor = [
    Color.White,
    Color.Success,
    Color.Warning,
    Color.Error,
    Color.Info,
    Color.Grey500,
    Color.Chart_Green500,
    Color.Chart_Blue500,
    Color.Chart_Violet500,
    Color.Chart_Yellow500,
    Color.Chart_Brown500,
];
let selectedColor = Color.White;
let fontStyle = "italic";
let border: any = null;
let overflowY = "hidden";
let fontFamily: string;
let scrolledDelta = 0;
let scrolledHeight = 0;
let isBorderRightVisible = true;
let isBorderBottomVisible = true;
let isBorderTopVisible = true;
let isBorderLeftVisible = true;

let rowsCount = 0;

let enableRTL = true;
let valueWithRtlLanguage = "first part أتمنى لك نهارا سعيد last part";
let onChangeWithRtlLanguage = (value: string) => {
    valueWithRtlLanguage = value;
    b.invalidate();
};
let noWrap: boolean = true;

let delayValue = "Some value";

function getSelection(): Textarea.ISelection | undefined {
    if (!shouldSetSelection) {
        return undefined;
    }

    shouldSetSelection = false;
    return {
        start: selectionStart,
        end: selectionEnd,
    };
}

Example.init({}, () => {
    Textarea.setEnableRTL(enableRTL);
    return [
        Container.create({
            header: "Default",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Default" }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Default", value: value, onChange: onChange }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Disabled",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Disabled", isDisabled: true }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Disabled", isDisabled: true, value: value, onChange: onChange }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Highlighted",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Highlighted", isHighlighted: true }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Highlighted",
                            isHighlighted: true,
                            value: value,
                            onChange: onChange,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Highlighted & disabled",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Highlighted & disabled", isHighlighted: true, isDisabled: true }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Highlighted & disabled",
                            isHighlighted: true,
                            isDisabled: true,
                            value: value,
                            onChange: onChange,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Highlighted & error",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Highlighted & error",
                            isHighlighted: true,
                            validationState: FormElements.ValidationState.Error,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Highlighted & error",
                            isHighlighted: true,
                            value: value,
                            onChange: onChange,
                            validationState: FormElements.ValidationState.Error,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Read only, behavior is similar to simple label",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Read only", isReadOnly: true }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Read only", isReadOnly: true, value: value, onChange: onChange }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Error",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Error", validationState: FormElements.ValidationState.Error }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Error",
                            validationState: FormElements.ValidationState.Error,
                            value: value,
                            onChange: onChange,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Warning",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({ placeholder: "Warning", validationState: FormElements.ValidationState.Warning }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Warning",
                            validationState: FormElements.ValidationState.Warning,
                            value: value,
                            onChange: onChange,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Error & Disabled",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Error & Disabled",
                            validationState: FormElements.ValidationState.Error,
                            isDisabled: true,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Error & Disabled",
                            validationState: FormElements.ValidationState.Error,
                            isDisabled: true,
                            value: value,
                            onChange: onChange,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Warning & Disabled",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Warning & Disabled",
                            validationState: FormElements.ValidationState.Warning,
                            isDisabled: true,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Warning & Disabled",
                            validationState: FormElements.ValidationState.Warning,
                            isDisabled: true,
                            value: value,
                            onChange: onChange,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Text Preview",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        valueContentWidth: 400,
                        labelContent: "With scroll bars",
                        valueContent: Textarea.create({
                            value:
                                "Q: There are 500 bricks on a plane. One falls off. How many are left?\n" +
                                "A: 499\n" +
                                "Q: What are the three steps to putting an elephant in the fridge?\n" +
                                "A: Open door, put elephant in, close door.\n" +
                                "Q: What are the 4 steps to putting a giraffe in the fridge?\n" +
                                "A: Open door, take elephant out, put giraffe in, close door.\n" +
                                "Q: The Lion King is having a birthday party. All the animals attend but one. Which animal is it, and why?\n" +
                                "A: Giraffe. He is stuck in a fridge.\n" +
                                "Q: Sally wants to cross an alligator infested river. There is no bridge and the only way she can get across is by swimming. She swims across and makes it to the other side safely. Why?\n" +
                                "A: The alligators are all at a birthday party.\n" +
                                "Q: Sally dies anyways. Why?\n" +
                                "A: She got hit in the head by a flying brick.",
                            isTextPreview: true,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        valueContentWidth: 400,
                        labelContent: "Without scroll bars",
                        valueContent: Textarea.create({
                            value: "Q: There are 500 bricks on a plane. One falls off.\n" + "How many are left?\n" + "A: 499",
                            isTextPreview: true,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        // Wdth of textarea has higher priority then cols and width should be controlled by application not component
        Container.create({
            isTest: true,
            header: "TEST: Custom row count and column count XXXXXXXXXX",
            content: LField.create({
                labelContent: label,
                valueContent: Textarea.create({
                    placeholder: "Custom row count and column count",
                    rows: 3,
                    cols: 50,
                    resize: Textarea.Resize.Both,
                }),
                labelContentVerticalAlign: LField.VerticalAlign.Textarea,
            }),
        }),
        /*
        // Using resize is not supported by IE and Edge => make own solution or do not use at all
        Container.create({
            isTest: true,
            header: 'TEST: Resize vertical/horizontal/both/none',
            description: 'Resize is not supported in Internet Explorer and Microsoft Edge.',
            content: LFieldGroup.create({
                content: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: 'Resize vertical',
                            rows: 2,
                            cols: 30,
                            resize: Textarea.Resize.Vertical
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: 'Resize horizontal',
                            rows: 2,
                            cols: 30,
                            resize: Textarea.Resize.Horizontal
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: 'Resize both',
                            rows: 2,
                            cols: 30,
                            resize: Textarea.Resize.Both
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: 'Resize none',
                            rows: 2,
                            cols: 30,
                            resize: Textarea.Resize.None
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea
                    })
                ]
            })
        }),
        */
        Container.create({
            isTest: true,
            header: "focus and select text",
            content: [
                {
                    tag: "button",
                    children: "Focus",
                    component: {
                        onClick: () => {
                            focusTa();
                            return true;
                        },
                    },
                },
                {
                    tag: "button",
                    children: "Focus and Select",
                    component: {
                        onClick: () => {
                            selectTa();
                            return true;
                        },
                    },
                },
                LField.create({
                    labelContent: label,
                    valueContent: b.withKey(
                        Textarea.create({
                            initState: fsModel.initState,
                            value: fsModel.value,
                            onChange: (val) => {
                                fsModel.value = val;
                                b.invalidate();
                            },
                        }),
                        fsModel.key
                    ),
                    labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                }),
            ],
        }),
        Container.create({
            isTest: true,
            header: "TEST: corner radius",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Top corners have radius",
                            radiusVariant: Textarea.RadiusVariant.Top,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Bottom corners have radius",
                            radiusVariant: Textarea.RadiusVariant.Bottom,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "All corners have radius",
                            radiusVariant: Textarea.RadiusVariant.All,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            isTest: true,
            header: "TEST: Vertical scrollbar visibility changed",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: "V scrolbar:",
                        valueContent: ` is ${vScrollbarWidth > 0 ? "" : "not"} visible`,
                    }),
                    LField.create({
                        labelContent: "V scrolbar width:",
                        valueContent: `${vScrollbarWidth}`,
                    }),
                    LField.create({
                        labelContent: "Text is higher than textarea about:",
                        valueContent: `${scrolledDelta} px`,
                    }),
                    LField.create({
                        labelContent: "ScrollHeight is:",
                        valueContent: `${scrolledHeight} px`,
                    }),
                    LField.create({
                        labelContent: "label",
                        valueContent: Textarea.create({
                            placeholder: "Write long text here",
                            onVerticalScroolVisibilityChange: (width) => {
                                vScrollbarWidth = width;
                                b.invalidate();
                            },
                            onTextHeightChange: (scrollHeight, delta) => {
                                scrolledDelta = delta;
                                scrolledHeight = scrollHeight;
                                b.invalidate();
                            },
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            isTest: true,
            header: "TEST: Auto resize test",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: "RowsCount:",
                        valueContent: rowsCount,
                    }),
                    b.styledDiv(
                        Textarea.create({
                            placeholder: "Write long text here",
                            autoHeight: true,
                            value: autoResizeTestText,
                            rows: rowsCount,
                            onRowsCountChange: (count) => {
                                rowsCount = count;
                                b.invalidate();
                            },
                            onChange: (t) => {
                                autoResizeTestText = t;
                                b.invalidate();
                            },
                        }),
                        {}
                    ),
                ],
            }),
        }),
        Container.create({
            isTest: true,
            header: "TEST: text selection",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: "Start position",
                        valueContent: [
                            Spinner.create({
                                variant: Spinner.variant.Vertical,
                                minValue: 0,
                                maxValue: selectableText.length - 1,
                                value: selectionStart,
                                onChange: (changeValue: number) => {
                                    selectionStart = changeValue;
                                    b.invalidate();
                                },
                            }),
                            "Current start position: " + currentSelectionStart,
                        ],
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: "End position",
                        valueContent: [
                            Spinner.create({
                                variant: Spinner.variant.Vertical,
                                minValue: 0,
                                maxValue: selectableText.length - 1,
                                value: selectionEnd,
                                onChange: (changeValue: number) => {
                                    selectionEnd = changeValue;
                                    b.invalidate();
                                },
                            }),
                            "Current end position: " + currentSelectionEnd,
                        ],
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        valueContent: Button.create({
                            label: "SET SELECTION",
                            onClick: () => {
                                shouldSetSelection = true;
                                b.invalidate();
                            },
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            value: selectableText,
                            selection: getSelection(),
                            onSelectionChange: (selection) => {
                                currentSelectionStart = selection.startPosition;
                                currentSelectionEnd = selection.endPosition;
                                b.invalidate();
                            },
                            onChange: (changeValue) => (selectableText = changeValue),
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Auto Height",
            content: LField.create({
                labelContent: label,
                valueContent: b.styledDiv(Textarea.create({ placeholder: "Height fit to the height of parent", autoHeight: true }), {
                    height: 400,
                }),
                labelContentVerticalAlign: LField.VerticalAlign.Textarea,
            }),
        }),
        Container.create({
            header: "Custom Theme",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: "Font Size",
                        valueContent: [
                            Spinner.create({
                                variant: Spinner.variant.Vertical,
                                minValue: 10,
                                maxValue: 20,
                                value: fontSize,
                                onChange: (changeValue: number) => {
                                    fontSize = changeValue;
                                    b.invalidate();
                                },
                            }),
                        ],
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: "Line height",
                        valueContent: [
                            Spinner.create({
                                variant: Spinner.variant.Vertical,
                                minValue: 0,
                                value: lineHeight,
                                onChange: (changeValue: number) => {
                                    lineHeight = changeValue;
                                    b.invalidate();
                                },
                            }),
                        ],
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: "Padding",
                        valueContent: [
                            Textbox.create({
                                value: padding,
                                onChange: (changeValue: string) => {
                                    padding = changeValue;
                                    b.invalidate();
                                },
                            }),
                        ],
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                    LField.create({
                        labelContent: Label.create({ children: "Background color" }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                        valueContent: ColorPicker.create({
                            value: selectedColor,
                            availableValues: defaultColor,
                            onChange: (color?: string) => {
                                if (color) {
                                    selectedColor = color;
                                    b.invalidate();
                                }
                            },
                        }),
                    }),
                    LField.create({
                        labelContent: Label.create({ children: "Font Style" }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                        valueContent: Combobox.create({
                            items: [
                                { label: "Italic", value: "italic" },
                                { label: "Normal", value: "normal" },
                            ],
                            value: fontStyle,
                            onChange: (v) => {
                                fontStyle = v;
                                b.invalidate();
                            },
                        }),
                    }),
                    LField.create({
                        labelContent: Label.create({ children: "Border" }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                        valueContent: Combobox.create({
                            items: [
                                { label: "Default (not set)", value: null },
                                { label: "None", value: "none" },
                            ],
                            value: border,
                            onChange: (v) => {
                                border = v;
                                b.invalidate();
                            },
                        }),
                    }),
                    LField.create({
                        labelContent: Label.create({ children: "Toggle Borders" }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                        valueContent: LInlineItems.create({
                            margin: LInlineItems.Margin.Normal,
                            items: [
                                Checkbox.create({
                                    value: isBorderTopVisible,
                                    title: "Top",
                                    onChange: (value: boolean) => {
                                        isBorderTopVisible = value;
                                        b.invalidate();
                                    },
                                }),
                                Checkbox.create({
                                    value: isBorderRightVisible,
                                    title: "Right",
                                    onChange: (value: boolean) => {
                                        isBorderRightVisible = value;
                                        b.invalidate();
                                    },
                                }),
                                Checkbox.create({
                                    value: isBorderBottomVisible,
                                    title: "Bottom",
                                    onChange: (value: boolean) => {
                                        isBorderBottomVisible = value;
                                        b.invalidate();
                                    },
                                }),
                                Checkbox.create({
                                    value: isBorderLeftVisible,
                                    title: "Left",
                                    onChange: (value: boolean) => {
                                        isBorderLeftVisible = value;
                                        b.invalidate();
                                    },
                                }),
                            ],
                        }),
                    }),
                    LField.create({
                        labelContent: Label.create({ children: "overflowY" }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                        valueContent: Combobox.create({
                            items: [
                                { label: "auto", value: "auto" },
                                { label: "hidden", value: "hidden" },
                                { label: "visible", value: "visible" },
                            ],
                            value: overflowY,
                            onChange: (v) => {
                                overflowY = v;
                                b.invalidate();
                            },
                        }),
                    }),
                    LField.create({
                        labelContent: Label.create({ children: "Font Family" }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                        valueContent: Combobox.create({
                            items: [
                                { label: "default", value: undefined },
                                { label: "monospace", value: Font.MonospacedFontFamily },
                            ],
                            value: fontFamily,
                            onChange: (v) => {
                                fontFamily = v;
                                b.invalidate();
                            },
                        }),
                    }),
                    LField.create({
                        labelContent: label,
                        valueContent: Textarea.create({
                            placeholder: "Default",
                            value: value,
                            onChange: onChange,
                            customTheme: {
                                backgroundColor: selectedColor,
                                fontSize: fontSize,
                                fontStyle: fontStyle,
                                fontFamily: fontFamily,
                                padding: isNaN(+padding) ? padding : +padding,
                                border: border,
                                overflowY: overflowY,
                                lineHeight: lineHeight + "px",
                                borderVisibility: {
                                    hasBorderLeft: isBorderLeftVisible,
                                    hasBorderTop: isBorderTopVisible,
                                    hasBorderRight: isBorderRightVisible,
                                    hasBorderBottom: isBorderBottomVisible,
                                },
                            },
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            header: "Textarea with supporting right-to-left language",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: "Right-to-left language",
                        labelWidth: 300,
                        valueContent: Textarea.create({
                            value: valueWithRtlLanguage,
                            onChange: onChangeWithRtlLanguage,
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
        }),
        Container.create({
            isForConstantOverride: true,
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField<boolean>({
                            label: "Enable Supporting Right To Left language",
                            labelWidth: 300,
                            value: enableRTL,
                            fieldFactory: Checkbox.create,
                            onChange: (v: boolean) => {
                                enableRTL = v;
                                Textarea.setEnableRTL(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.Checkbox,
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "No wrap",
            content: [
                LField.create({
                    labelContent: "No wrap",
                    valueContent: Checkbox.create({
                        value: noWrap,
                        onChange: (value: boolean) => {
                            noWrap = value;
                            b.invalidate();
                        },
                    }),
                }),
                LField.create({
                    labelContent: label,
                    valueContent: b.styledDiv(
                        Textarea.create({
                            value:
                                "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                            noWrap: noWrap,
                        })
                    ),
                }),
            ],
        }),
        Container.create({
            header: "Textarea with delay",
            description: "onChange is called when you finish typing",
            content: LFieldGroup.create({
                children: [
                    LField.create({
                        labelContent: "Textarea delay",
                        labelWidth: 300,
                        valueContent: Textarea.create({
                            isOnChangeWithDelay: true,
                            value: delayValue,
                            onChange: (v: string) => {
                                delayValue = v;
                                b.invalidate();
                            },
                        }),
                        labelContentVerticalAlign: LField.VerticalAlign.Textarea,
                    }),
                ],
            }),
            model: delayValue,
        }),
    ];
});

interface IFsModel {
    key: string;
    initState?: Textarea.InitState;
    value: string;
}

let fsModel: IFsModel = {
    key: "defaultKey", // key needs to be changed so the new component behaviour triggers
    initState: undefined,
    value: "",
};

function focusTa() {
    fsModel.key = b.now().toString();
    fsModel.initState = Textarea.InitState.focused;
    b.invalidate();
}

function selectTa() {
    fsModel.key = b.now().toString();
    fsModel.initState = Textarea.InitState.selectedText;
    b.invalidate();
}
