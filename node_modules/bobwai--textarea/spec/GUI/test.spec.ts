import { BBBot, BBSeeker } from "bbseeker-extended";
import { createLayout } from "./layout";
import { clearTestStore, getTestStore } from "./store";
import { Selectors } from "../../src/testSelectors";

describe("Textarea UI tests", () => {
    afterEach(() => {
        BBBot.clear();
        clearTestStore();
    });

    it("should be possible to write into and clear textArea", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const textArea = BBSeeker.findElements(Selectors.id + Selectors.textArea)!;
            expect(textArea.length).toBe(5);

            await bot.emitLeftMouseClickOnHTMLElement(textArea[0]);
            await write(bot, "something");
            checkValue(["somethingsome text"], 0);

            await bot.emitKeyPress(BBBot.KeyCodes.Spacebar);
            checkValue(["something some text"], 0);

            await bot.emitKeyPress(BBBot.KeyCodes.End);
            await write(bot, " something");
            checkValue(["something some text something"], 0);

            await bot.emitKeyPress(BBBot.KeyCodes.Home);
            await write(bot, "text ");
            checkValue(["text something some text something"], 0);

            await bot.emitKeyPress(BBBot.KeyCodes.RightArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.RightArrow);
            await write(bot, " 00 ");
            checkValue(["text so 00 mething some text something"], 0);

            await bot.emitKeyPress(BBBot.KeyCodes.Backspace);
            await bot.emitKeyPress(BBBot.KeyCodes.Backspace);
            checkValue(["text so 0mething some text something"], 0);

            await bot.emitKeyPress(BBBot.KeyCodes.LeftArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.LeftArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.Delete);
            await bot.emitKeyPress(BBBot.KeyCodes.Delete);
            checkValue(["text something some text something"], 0);

            const id = BBSeeker.findElements(Selectors.id)!;
            await bot.emitLeftMouseClickOnHTMLElement(id[0]);
            checkValue(["text something some text something"], 0);
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
    it("should be possible to write multiline", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const textArea = BBSeeker.findElements(Selectors.id + Selectors.textArea)!;
            await bot.emitLeftMouseClickOnHTMLElement(textArea[0]);

            checkValue(["some text"], 0);
            await write(bot, "text");
            checkValue(["textsome text"], 0);

            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            await write(bot, "text");
            checkValue(["text", "textsome text"], 0);

            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            await write(bot, "text");
            checkValue(["text", "text", "", "textsome text"], 0);
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
    it("should not be possible to use disabled or readOnly textArea", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const textArea = BBSeeker.findElements(Selectors.id + Selectors.textArea)!;
            await bot.emitLeftMouseClickOnHTMLElement(textArea[1]);

            checkValue(["some text"], 1);
            await write(bot, "text");
            checkValue(["some text"], 1);
            await bot.emitLeftMouseClickOnHTMLElement(textArea[3]);

            // Maxlenght do not work for bot

            // checkValue([""], 3);
            // await write(bot, "text"); // should not be possible
            // checkValue(["text"], 3);
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
    it("textArea with small number of rows should be smaller", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const textArea = BBSeeker.findElements(Selectors.id + Selectors.textArea)!;
            await bot.emitLeftMouseClickOnHTMLElement(textArea[2]);

            checkValue(["some text"], 2);
            await write(bot, "012345678");
            checkValue(["012345678some text"], 2);

            // readOnly do not work for bot

            // await write(bot, "9"); // should not be possible write this, but...
            // checkValue(["0123456789"], 2);
            expect(textArea[1].getBoundingClientRect().height).toBeGreaterThan(textArea[2].getBoundingClientRect().height);
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
    it("It should call focus in/out", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const textArea = BBSeeker.findElements(Selectors.id + Selectors.textArea)!;
            expect(getTestStore().isFocused).toBeFalsy();
            await bot.emitLeftMouseClickOnHTMLElement(textArea[4]);
            expect(getTestStore().isFocused).toBeTruthy();

            await bot.emitLeftMouseClickOnHTMLElement(textArea[3]);
            expect(getTestStore().isFocused).toBeFalsy();
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
});

async function write(bot: BBBot.IBBBot, text: string): Promise<void> {
    await bot.writeExpression(text);
}

function checkValue(expectedLinesValue: string[], textAreaId: number): void {
    const textArea = BBSeeker.findElement(Selectors.id + `[${textAreaId}]` + Selectors.textArea)!;
    const textAreaContent = (<HTMLTextAreaElement>textArea).value.split(/(?:\r\n|\r|\n)/g);
    expect(textAreaContent).toEqual(expectedLinesValue);
}
