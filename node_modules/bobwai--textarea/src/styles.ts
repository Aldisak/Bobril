import * as b from "bobril";
import * as constants from "./publicConstants";
import * as Color from "bobwai--color";
import * as Font from "bobwai--font";
import * as Mixins from "bobwai--style-mixins";

const color = Color.Basic;
export const borderSize = 1;
const borderRadius = 2;
const defaultBorderColor = Color.Grey300;
const defaultBackgroundColor = Color.White;
const placeholderColor = Color.Grey500;
const paddingLeft = 12;
const paddingRight = 12;
export const paddingTop = 7;
export const paddingBottom = 7;
export const lineHeight = 19;

const warningColor = Color.Warning;
const warningBackground = Color.Warning_05_solid;
const invalidColor = Color.Error;
const invalidBackground = Color.Error_05_solid;
const disabledColor = Color.Grey500;
const disabledBackground = Color.Grey100;
const previewBackgroundColor = Color.Grey200;

export const errorIconRight = -Mixins.ValidationError.errorIconWidth;
export const errorIconWidth = Mixins.ValidationError.errorIconWidth;
export const errorIconTop = 6;

export const textareaBaseWithErrorIconStyle = b.styleDef(
    {
        marginRight: errorIconWidth,
        position: "relative",
    },
    {},
    "textarea--base-with-error-icon"
);

export const textareaBaseStyle = b.styleDef(
    {
        position: "relative",
        color: color,
        backgroundColor: defaultBackgroundColor,
        outline: "none",
        paddingTop: paddingTop,
        paddingBottom: paddingBottom,
        paddingLeft: paddingLeft,
        paddingRight: paddingRight,
        border: `${borderSize}px solid ${defaultBorderColor}`,
        boxSizing: "border-box",
        borderRadius: borderRadius,
        overflowX: "hidden",
        lineHeight: `${lineHeight}px`,
    },
    {},
    "textarea--base"
);

export const textareaStyle = b.styleDef(
    [textareaBaseStyle],
    createPseudoStyle(
        {
            color: placeholderColor,
            fontStyle: "italic",
        },
        Color.Application
    ),
    "textarea"
);

export const textareaReadOnlyStyle = b.styleDefEx(textareaStyle, {
    border: "none",
    paddingLeft: 0,
    paddingRight: 0,
    fontWeight: Font.FontWeightSemibold,
});
export const noWrapStyle = b.styleDefEx(textareaStyle, {
    whiteSpace: "pre",
    wordWrap: "normal",
    overflowX: "auto",
});
export const textAreaPreviewStyle = b.styleDefEx(noWrapStyle, {
    borderColor: defaultBorderColor,
    backgroundColor: previewBackgroundColor,
});

export const invalidStyle = colorize(invalidColor, invalidBackground, "textarea-is-invalid");

export const warningStyle = colorize(warningColor, warningBackground, "textarea-is-warning");

export const disabledStyle = b.styleDef(
    {
        color: disabledColor,
        backgroundColor: disabledBackground,
    },
    {},
    "textarea-is-disabled"
);

export const disabledErrorStyle = b.styleDefEx(disabledStyle, {
    color: invalidColor,
});

export const disabledWarningStyle = b.styleDefEx(disabledStyle, {
    color: warningColor,
});

export const textAreaHighlightedStyle = b.styleDefEx(textareaStyle, {
    borderColor: constants.FocusedBorderColor,
});

export const topRadiusStyle = b.styleDefEx(
    textareaStyle,
    {
        borderTopLeftRadius: borderRadius,
        borderTopRightRadius: borderRadius,
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0,
    },
    {},
    "textarea--top-radius"
);

export const bottomRadiusStyle = b.styleDefEx(
    textareaStyle,
    {
        borderTopLeftRadius: 0,
        borderTopRightRadius: 0,
        borderBottomLeftRadius: borderRadius,
        borderBottomRightRadius: borderRadius,
    },
    {},
    "textarea--bottom-radius"
);

export const autoHeightStyle = b.styleDef(
    {
        height: "100%",
    },
    {},
    "textarea--auto-height"
);

export const errorIconStyle = b.styleDef([
    {
        top: errorIconTop,
        position: "absolute",
        right: errorIconRight,
        width: errorIconWidth,
        overflow: "hidden",
    },
]);

export const errorIconContentStyle = b.styleDef([
    Mixins.centerVerticalChild(),
    {
        fontSize: 0,
    },
]);

export const measuringAreaStyle = b.styleDef({
    height: "0 !important",
    paddingTop: 0,
    paddingBottom: 0,
    border: "none",
    visibility: "hidden",
});

function colorize(textColor: Color.IColor, backgroundColor: Color.IColor, nameHint: string): b.IBobrilStyleDef {
    return b.styleDef(
        {
            background: backgroundColor,
            borderColor: textColor,
            color: textColor,
            outline: "none",
        },
        createPseudoStyle(
            {
                color: textColor,
            },
            textColor
        ),
        nameHint
    );
}

function createPseudoStyle(style: any, borderColor: Color.IColor): { [name: string]: any } {
    let pseudo = Mixins.createPlaceholderStyle(style);
    pseudo["focus"] = { borderColor: borderColor };
    return pseudo;
}
