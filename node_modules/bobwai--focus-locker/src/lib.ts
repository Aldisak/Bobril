import * as b from "bobril";

const firstHiddenElementRef = 'focus-locker-hidden-focus-first';
const lastHiddenElementRef = 'focus-locker-hidden-focus-last';
const bodyElementRef = 'focus-locker-body';
export interface IData {
    children: b.IBobrilChildren;
    focusContentOnInit?: boolean;
}

interface IContext extends b.IBobrilCtx {
    data: IData;
    wasBodyLastFocusedElement: boolean;
}

export let create = b.createVirtualComponent<IData>({
    id: "bobwai--focus-locker",
    render(ctx: IContext, me: b.IBobrilNode) {
        const firstHiddenMockFocus = getHiddenFocusConverterElement({
            ctx,
            position: FocusConverterPosition.First
        });
        firstHiddenMockFocus.ref = [ctx, firstHiddenElementRef];

        const lastHiddenMockFocus = getHiddenFocusConverterElement({
            ctx,
            position: FocusConverterPosition.Last
        });
        lastHiddenMockFocus.ref = [ctx, lastHiddenElementRef];


        me.children = [firstHiddenMockFocus, getBody(ctx), lastHiddenMockFocus];
    }
});

function getBody(ctx: IContext): b.IBobrilNode {
    const body = b.style(
        {
            children: ctx.data.children,
            tag: "div",
            component: {
                onFocusOut(_c: IContext) {
                    const firstElement = ctx.refs && ctx.refs[firstHiddenElementRef] && b.getDomNode(ctx.refs[firstHiddenElementRef]);
                    const lastElement = ctx.refs && ctx.refs[lastHiddenElementRef] && b.getDomNode(ctx.refs[lastHiddenElementRef]);
                    if (
                        (firstElement && firstElement === document.activeElement) ||
                        (lastElement && lastElement === document.activeElement)
                    ) {
                        ctx.wasBodyLastFocusedElement = true;
                    }
                },
                postInitDom(_c: IContext, me: b.IBobrilCacheNode, _element: HTMLElement) {
                    if (ctx.data.focusContentOnInit) {
                        b.focus(me);
                    }
                }
            }
        },
        baseStyle
    );
    body.ref = [ctx, bodyElementRef];
    return body;
}
enum FocusConverterPosition {
    First,
    Last
}

function getHiddenFocusConverterElement(params: { position: FocusConverterPosition; ctx: IContext }): b.IBobrilNode {
    return {
        tag: "div",
        attrs: { tabindex: 0 },
        component: {
            onFocus(_c: b.IBobrilCtx) {
                const bodyContent = params.ctx.refs && params.ctx.refs[bodyElementRef];
                b.invalidate(params.ctx);
                if (bodyContent) {
                    if (params.ctx.wasBodyLastFocusedElement) {
                        switch (params.position) {
                            case FocusConverterPosition.First:
                                tryFocusLastChild(bodyContent);
                                break;
                            case FocusConverterPosition.Last:
                                tryFocusFirstChild(bodyContent);
                                break;
                        }
                        // focus was obtained from some external element
                    } else {
                        switch (params.position) {
                            case FocusConverterPosition.First:
                                tryFocusFirstChild(bodyContent);
                                break;
                            case FocusConverterPosition.Last:
                                tryFocusLastChild(bodyContent);
                                break;
                        }
                    }
                    resetLastFocusedElementInfo(params.ctx);
                }
            }
        }
    };

}

function resetLastFocusedElementInfo(ctx: IContext) {
    ctx.wasBodyLastFocusedElement = false;
    b.invalidate(ctx);
}

function tryFocusFirstChild(node: b.IBobrilCacheNode) {
    b.focus(node);
}

function tryFocusLastChild(node: b.IBobrilCacheNode) {
    b.focus(node, true);
}

const baseStyle = b.styleDef(
    {
        height: "100%"
    },
    {},
    "focus-locker-body"
);

export const FocusLocker: b.IComponentFactory<IData> = create;
