import * as b from "bobril";
import * as FormElements from "bobwai--form-elements";
import { IWebContentAccessibility } from "helpers--web-content-accessibility";

export enum Type {
    Default,
    Search,
    Password,
    PasswordWithRevealButton,
    HexaColor,
}

export enum InitState {
    focused,
    selectedText,
}

export enum Autocomplete {
    None,
    NewPassword, // DCB-657
}

export enum Size {
    Default,
    Small,
    XSmall,
}

export interface IData {
    onChange: (value: string) => void;
    onFocusIn?: (ctx: b.IBobrilCtx) => void;
    onFocusOut?: (ctx: b.IBobrilCtx) => void;
    onClick?: () => boolean;
    onKeyDown?: (key: number) => boolean;
    onKeyPress?: (key: number) => boolean;
    type?: Type;
    value?: string;
    placeholder?: string;
    withInitiallySelectedText?: boolean;
    initState?: InitState;
    validationState?: FormElements.ValidationState;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    isReadOnlyWithBorder?: boolean;
    maxLength?: number;
    forceFocus?: boolean;
    forceBlur?: boolean;
    autocomplete?: Autocomplete;
    isHighlighted?: boolean;
    size?: Size;
    textAlign?: FormElements.TextAlign;
    isOnChangeWithDelay?: boolean;
    shouldStopOnKeyDownBubble?: boolean;
    shouldStopOnClickBubble?: boolean;
    withSelectedTextOnFocus?: boolean;
    rightIcon?: IRightIcon;
    isDisabledBorderRadiusRightSide?: boolean;
    isDisabledBorderRadiusLeftSide?: boolean;
    siblingType?: FormElements.SiblingType;
    customFocusBorderColor?: string;
    isTooltipHiddenInDisabledState?: boolean;
    webContentAccessibility?: WebContentAccessibility;
}

export type WebContentAccessibility = Pick<IWebContentAccessibility, "id"| "ariaLabel" | "isRequired" | "validationMessage">;

export interface IRightIcon {
    icon: b.IBobrilNode;
    iconHover: b.IBobrilNode;
    tooltip?: FormElements.ITooltipData;
    onClick?: () => void;
}
