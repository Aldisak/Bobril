import * as b from "bobril";
import * as c from "bobwai--viewer-container";
import * as FormElements from "bobwai--form-elements";
import * as Checkbox from "bobwai--checkbox";
import * as tb from "../src/lib";
import * as withFocus from "./src/withFocus";
import * as Example from "bobwai--example";
import * as Color from "bobwai--color";
import * as Icon from "bobwai--icon";

let model1: string;
let lastKeyDown: number;
let keyPress: number;
let onChange1 = (value: string) => {
    model1 = value;
    b.invalidate();
};

let model2 = "Textbox Value";
let onChange2 = (value: string) => {
    model2 = value;
    b.invalidate();
};

let colorModel = "";
let onChangeColor = (value: string) => {
    colorModel = value;
    b.invalidate();
};

let delayValue = "";
let onChangeDelayValue = (value: string) => {
    delayValue = value;
    b.invalidate();
};

let modelWithMaxLength = "12345";
let onChangeWithMaxLength = (value: string) => {
    modelWithMaxLength = value;
    b.invalidate();
};

let mockStyle = {
    margin: 12,
    fontStyle: "italic",
};

let enableRTL = true;
let modelWithRtlLanguage = "first part أتمنى لك نهارا سعيد last part";
let onChangeWithRtlLanguage = (value: string) => {
    modelWithRtlLanguage = value;
    b.invalidate();
};

let disableOnKeyDownBubble = false;
let disableOnClickBubble = false;
let parentClickCount = 0;
let textboxKeyDownCount = 0;
let parentKeyDownCount = 0;

const rightIcon = Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Basic) });
const rightIconHover = Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Application) });
let customColor: string = "";
Example.init(
    {
        preferredHeight: Example.PreferredHeight.Medium,
    },
    () => {
        tb.setEnableRTL(enableRTL);
        return [
            Example.createControlPanel({
                items: [
                    Example.createField({
                        label: "Custom Color",
                        fieldType: Example.FieldType.IColor,
                        onChange: (color: string) => {
                            customColor = color;
                            b.invalidate();
                        },
                    }),
                    Example.createField({
                        label: "Note",
                        fieldType: Example.FieldType.Note,
                        value: "Set custom color above has effect on all examples below",
                    }),
                ],
            }),
            c.create({
                header: "Normal textbox without value",
                content: [
                    tb.create({ onChange: onChange1, value: model1, placeholder: "Textbox Placeholder" }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({ onChange: onChange1, value: model1, placeholder: "Textbox Placeholder", size: tb.Size.Small }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({ onChange: onChange1, value: model1, placeholder: "Textbox Placeholder", size: tb.Size.XSmall }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Normal textbox with value",
                content: [
                    tb.create({ onChange: onChange2, value: model2, placeholder: "Textbox Placeholder" }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({ onChange: onChange2, value: model2, placeholder: "Textbox Placeholder", size: tb.Size.Small }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({ onChange: onChange2, value: model2, placeholder: "Textbox Placeholder", size: tb.Size.XSmall }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Normal textbox with value and custom color on focus in",
                content: [
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox Placeholder",
                        customFocusBorderColor: customColor,
                    }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox Placeholder",
                        size: tb.Size.Small,
                        customFocusBorderColor: customColor,
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox Placeholder",
                        size: tb.Size.XSmall,
                        customFocusBorderColor: customColor,
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Normal textbox with selected text on focus in",
                content: [
                    tb.create({ onChange: onChange2, value: model2, placeholder: "Textbox Placeholder", withSelectedTextOnFocus: true }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox Placeholder",
                        size: tb.Size.Small,
                        withSelectedTextOnFocus: true,
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox Placeholder",
                        size: tb.Size.XSmall,
                        withSelectedTextOnFocus: true,
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Invalid textbox without value",
                content: tb.create({
                    onChange: onChange1,
                    value: model1,
                    validationState: FormElements.ValidationState.Error,
                    placeholder: "Invalid Textbox Placeholder",
                }),
            }),
            c.create({
                header: "Invalid textbox with value",
                content: [
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        validationState: FormElements.ValidationState.Error,
                        placeholder: "Invalid Textbox Placeholder",
                    }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        validationState: FormElements.ValidationState.Error,
                        placeholder: "Invalid Textbox Placeholder",
                        size: tb.Size.Small,
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        validationState: FormElements.ValidationState.Error,
                        placeholder: "Invalid Textbox Placeholder",
                        size: tb.Size.XSmall,
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Invalid textbox disabled",
                content: [
                    tb.create({
                        onChange: onChange2,
                        value: model1,
                        isDisabled: true,
                        validationState: FormElements.ValidationState.Error,
                        placeholder: "Invalid Textbox Placeholder",
                    }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model1,
                        isDisabled: true,
                        validationState: FormElements.ValidationState.Error,
                        placeholder: "Invalid Textbox Placeholder",
                        size: tb.Size.Small,
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model1,
                        isDisabled: true,
                        validationState: FormElements.ValidationState.Error,
                        placeholder: "Invalid Textbox Placeholder",
                        size: tb.Size.XSmall,
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Warning textbox without value",
                content: tb.create({
                    onChange: onChange1,
                    value: model1,
                    validationState: FormElements.ValidationState.Warning,
                    placeholder: "Warning Textbox Placeholder",
                }),
            }),
            c.create({
                header: "Warning textbox with value",
                content: tb.create({
                    onChange: onChange2,
                    value: model2,
                    validationState: FormElements.ValidationState.Warning,
                    placeholder: "Warning Textbox Placeholder",
                }),
            }),
            c.create({
                header: "Warning textbox disabled",
                content: tb.create({
                    onChange: onChange2,
                    value: model1,
                    isDisabled: true,
                    validationState: FormElements.ValidationState.Warning,
                    placeholder: "Warning Textbox Placeholder",
                }),
            }),

            c.create({
                header: "Read only, behaviour is similar to simple label",
                content: [
                    tb.create({ onChange: onChange2, value: model2, isReadOnly: true, placeholder: "Read only placeholder" }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        isReadOnly: true,
                        placeholder: "Read only placeholder",
                        size: tb.Size.Small,
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        isReadOnly: true,
                        placeholder: "Read only placeholder",
                        size: tb.Size.XSmall,
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Read only with border",
                content: [
                    tb.create({ onChange: onChange2, value: model2, isReadOnlyWithBorder: true, placeholder: "Read only placeholder" }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        isReadOnlyWithBorder: true,
                        placeholder: "Read only placeholder",
                        size: tb.Size.Small,
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        isReadOnlyWithBorder: true,
                        placeholder: "Read only placeholder",
                        size: tb.Size.XSmall,
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Textbox with password type",
                content: tb.create({
                    onChange: onChange2,
                    value: model2,
                    placeholder: "Textbox with password type",
                    type: tb.Type.Password,
                }),
            }),
            c.create({
                header: "Textbox with password with reveal button type",
                content: [
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox with password with reveal button type",
                        type: tb.Type.PasswordWithRevealButton,
                    }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox with password with reveal button type",
                        type: tb.Type.PasswordWithRevealButton,
                        size: tb.Size.Small,
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox with password with reveal button type",
                        type: tb.Type.PasswordWithRevealButton,
                        size: tb.Size.XSmall,
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Disable textbox with password",
                content: tb.create({ onChange: onChange2, value: model2, isDisabled: true, type: tb.Type.Password }),
            }),
            c.create({
                header: "Disable textbox with password with reveal button type",
                content: tb.create({ onChange: onChange2, value: model2, isDisabled: true, type: tb.Type.PasswordWithRevealButton }),
            }),
            c.create({
                header: "Disabled textbox without value",
                content: tb.create({ onChange: onChange1, value: model1, isDisabled: true, placeholder: "Disabled Textbox Placeholder" }),
            }),
            c.create({
                header: "Disabled textbox with value and tooltip on hover",
                content: tb.create({
                    onChange: onChange2,
                    value: model2,
                    isDisabled: true,
                    placeholder: "Disabled Textbox Placeholder",
                }),
            }),
            c.create({
                header: "Disabled textbox with value and disabled tooltip on hover",
                content: tb.create({
                    onChange: onChange2,
                    value: model2,
                    isDisabled: true,
                    isTooltipHiddenInDisabledState: true,
                    placeholder: "Disabled Textbox Placeholder",
                }),
            }),
            c.create({
                header: "Textbox with selected value",
                content: tb.create({ onChange: onChange2, value: model2, withInitiallySelectedText: true }),
            }),
            c.create({
                header: "Textbox with onKeyDown and onKeyPress callback",
                content: [
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        onKeyDown: (key: number) => {
                            lastKeyDown = key;
                            b.invalidate();
                            return false;
                        },
                        onKeyPress: (key: number) => {
                            keyPress = key;
                            b.invalidate();
                            return false;
                        },
                        placeholder: "Textbox with onKeyDown callback",
                    }),
                ],
                model: `Key Down: ${lastKeyDown ? lastKeyDown : "-"}, Key Press: ${keyPress ? keyPress : "-"} `,
            }),
            withFocus.create(),
            c.create({
                header: "Textbox with max length set - you can set max. 5 chars in this case",
                content: tb.create({ onChange: onChangeWithMaxLength, value: modelWithMaxLength, maxLength: 5 }),
            }),
            c.create({
                header:
                    "Textbox has isHighlighted property set to true - use it to show that" +
                    " there is a change in textbox value against original value",
                content: tb.create({ value: model2, isHighlighted: true, onChange: onChange2 }),
            }),
            c.create({
                header: "Textbox type hexaColor, it is possible to paste only [#] [0-9] [A-F] [a-f] chars",
                content: tb.create({ value: colorModel, placeholder: "#72bf44", onChange: onChangeColor, type: tb.Type.HexaColor }),
            }),
            c.create({
                header: "Change with delay",
                description: "onChange is called when you finish typing",
                content: [tb.create({ value: delayValue, onChange: onChangeDelayValue, isOnChangeWithDelay: true })],
                model: `Value: ${delayValue}`,
            }),
            c.create({
                header: "Enable/Disable bubble events",
                content: [
                    Checkbox.create({
                        value: disableOnKeyDownBubble,
                        title: "Disable onKeyDown bubble",
                        onChange: (value: boolean) => {
                            disableOnKeyDownBubble = value;
                            b.invalidate();
                        },
                    }),
                    Checkbox.create({
                        value: disableOnClickBubble,
                        title: "Disable onClick bubble",
                        onChange: (value: boolean) => {
                            disableOnClickBubble = value;
                            b.invalidate();
                        },
                    }),
                    b.style(
                        {
                            tag: "div",
                            children: [
                                tb.create({
                                    value: model2,
                                    onChange: onChange2,
                                    shouldStopOnKeyDownBubble: disableOnKeyDownBubble,
                                    shouldStopOnClickBubble: disableOnClickBubble,
                                    onKeyDown: (_key: number) => {
                                        textboxKeyDownCount++;
                                        b.invalidate();
                                        return false;
                                    },
                                }),
                            ],
                            component: {
                                onClick() {
                                    parentClickCount++;
                                    b.invalidate();
                                    return false;
                                },
                                onKeyDown(_ctx: b.IBobrilCtx, _event: b.IKeyDownUpEvent) {
                                    parentKeyDownCount++;
                                    b.invalidate();
                                    return false;
                                },
                            },
                        },
                        { paddingTop: 10 }
                    ),
                ],
                model: `textboxKeyDownCount: ${textboxKeyDownCount} and parentKeyDownCount: ${parentKeyDownCount} - parentClickCount: ${parentClickCount}`,
            }),
            c.create({
                header: "Textbox with clickable icon on the right",
                content: [
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        rightIcon: {
                            onClick: () => {
                                alert("Right icon has been clicked");
                            },
                            iconHover: rightIconHover,
                            icon: rightIcon,
                        },
                    }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        size: tb.Size.Small,
                        rightIcon: {
                            onClick: () => {
                                alert("Right icon has been clicked");
                            },
                            iconHover: rightIconHover,
                            icon: rightIcon,
                            tooltip: {
                                tooltipHeader: "tooltip",
                            },
                        },
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        size: tb.Size.XSmall,
                        rightIcon: {
                            onClick: () => {
                                alert("Right icon has been clicked");
                            },
                            iconHover: rightIconHover,
                            icon: rightIcon,
                            tooltip: {
                                tooltipHeader: "tooltip",
                            },
                        },
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Textbox with non-clickable icon on the right",
                content: [
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        rightIcon: {
                            iconHover: rightIconHover,
                            icon: rightIcon,
                        },
                    }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        size: tb.Size.Small,
                        rightIcon: {
                            iconHover: rightIconHover,
                            icon: rightIcon,
                            tooltip: {
                                tooltipHeader: "tooltip",
                            },
                        },
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        size: tb.Size.XSmall,
                        rightIcon: {
                            iconHover: rightIconHover,
                            icon: rightIcon,
                            tooltip: {
                                tooltipHeader: "tooltip",
                            },
                        },
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Textbox without border radius left side",
                content: [
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox Placeholder",
                        isDisabledBorderRadiusRightSide: false,
                        isDisabledBorderRadiusLeftSide: true,
                    }),
                    b.styledDiv("size: Default", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox Placeholder",
                        size: tb.Size.Small,
                        isDisabledBorderRadiusRightSide: false,
                        isDisabledBorderRadiusLeftSide: true,
                    }),
                    b.styledDiv("size: Small", mockStyle),
                    tb.create({
                        onChange: onChange2,
                        value: model2,
                        placeholder: "Textbox Placeholder",
                        size: tb.Size.XSmall,
                        isDisabledBorderRadiusRightSide: false,
                        isDisabledBorderRadiusLeftSide: true,
                    }),
                    b.styledDiv("size: XSmall", mockStyle),
                ],
            }),
            c.create({
                header: "Textbox with supporting right-to-left language",
                content: [
                    tb.create({
                        onChange: onChangeWithRtlLanguage,
                        value: modelWithRtlLanguage,
                    }),
                    b.styledDiv("Default", mockStyle),
                    tb.create({
                        onChange: onChangeWithRtlLanguage,
                        value: modelWithRtlLanguage,
                        rightIcon: {
                            onClick: () => {
                                alert("Right icon has been clicked");
                            },
                            iconHover: rightIconHover,
                            icon: rightIcon,
                        },
                    }),
                    b.styledDiv("With clickable icon", mockStyle),
                    tb.create({
                        onChange: onChangeWithRtlLanguage,
                        value: modelWithRtlLanguage,
                        placeholder: "Textbox with password with reveal button type",
                        type: tb.Type.PasswordWithRevealButton,
                    }),
                    b.styledDiv("With password and reveal button", mockStyle),
                ],
            }),
            c.create({
                header: "Read only textbox with supporting onClick",
                content: [
                    tb.create({
                        onChange: () => {},
                        value: "Click me",
                        onClick: () => {
                            alert("Textbox click action.");
                            return true;
                        },
                        isReadOnlyWithBorder: true,
                    }),
                ],
            }),
            c.create({
                isForConstantOverride: true,
                content: [
                    Example.createControlPanel({
                        items: [
                            Example.createField<boolean>({
                                label: "Enable Supporting Right To Left language",
                                labelWidth: 300,
                                value: enableRTL,
                                fieldFactory: Checkbox.create,
                                onChange: (v: boolean) => {
                                    enableRTL = v;
                                    tb.setEnableRTL(v);
                                    b.invalidateStyles();
                                },
                                fieldType: Example.FieldType.Checkbox,
                            }),
                        ],
                    }),
                ],
            }),
        ];
    }
);
