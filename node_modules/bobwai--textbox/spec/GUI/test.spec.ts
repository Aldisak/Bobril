import { BBBot, BBSeeker } from "bbseeker-extended";
import { createLayout } from "./layout";
import { clearTestStore } from "./store";
import { Selectors } from "../../src/testSelectors";
import { getTestStore } from "./store";

describe("Textbox UI tests", () => {
    afterEach(() => {
        BBBot.clear();
        clearTestStore();
    });

    it("should be possible to write to input", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const input = BBSeeker.findElements(Selectors.input)![0];

            expect((<HTMLInputElement>input).value).toBe("");

            await bot.emitLeftMouseClickOnHTMLElement(input);
            await writeAndCheck({ bot, addString: "abc", expectedResult: "abc", input });
        } else {
            fail("Test failed due to it is not fully rendered");
        }
    });
    it("should not be possible to write to disabled input", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const input = BBSeeker.findElements(Selectors.input)![1];

            expect((<HTMLInputElement>input).value).toBe("");

            await bot.emitLeftMouseClickOnHTMLElement(input);
            await writeAndCheck({ bot, addString: "abc", expectedResult: "", input });
        } else {
            fail("Test failed due to it is not fully rendered");
        }
    });
    it("should be possible to click enabled rightIcon, it should hold focus", async () => {
        createLayout();
        const store = getTestStore();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const input = BBSeeker.findElements(Selectors.input)![2];

            expect((<HTMLInputElement>input).value).toBe("");
            await bot.emitLeftMouseClickOnHTMLElement(input);
            await writeAndCheck({ bot, addString: "abc", expectedResult: "abc", input });

            const icons = BBSeeker.findElements(Selectors.rightIcon);
            const icon = icons[0];
            expect(icon).not.toBeNull();

            await bot.emitLeftMouseClickOnHTMLElement(icon!);
            await bot.emitKeyPress(BBBot.KeyCodes.RightArrow);
            await writeAndCheck({ bot, addString: "def", expectedResult: "abc", input }); // focus should stay on icon
            expect(store.iconClicks).toBe(1);
        } else {
            fail("Test failed due to it is not fully rendered");
        }
    });
    it("should not be possible to click passive rightIcon, it should return focus back to input", async () => {
        createLayout();
        const store = getTestStore();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const input = BBSeeker.findElements(Selectors.input)![3];

            expect((<HTMLInputElement>input).value).toBe("");

            await bot.emitLeftMouseClickOnHTMLElement(input);
            await bot.emitKeyPress(BBBot.KeyCodes.RightArrow);
            await writeAndCheck({ bot, addString: "abc", expectedResult: "abc", input });

            const icons = BBSeeker.findElements(Selectors.rightIcon);
            const icon = icons[1];
            expect(icon).toBeUndefined();

            const fakeIcons = BBSeeker.findElements("/>>/div", input);
            expect(fakeIcons).toBeDefined();
            expect(fakeIcons.length).toBe(1);
            const fakeIcon = fakeIcons[0];

            await bot.emitLeftMouseClickOnHTMLElement(fakeIcon);
            await writeAndCheck({ bot, addString: "def", expectedResult: "abcdef", input }); // focus should stay in input
            expect(store.iconClicks).toBe(0);
        } else {
            fail("Test failed due to it is not fully rendered");
        }
    });
    it("web content accessibility: attributes are successfully added", async () => {
        createLayout();

        if (await BBBot.checkIfFullyRendered(4)) {
            const inputWithAriaLabel = BBSeeker.findElements(Selectors.input)![4];
            const invalidInputWithRequiredAndAriaLabel = BBSeeker.findElements(Selectors.input)![5];

            expect((<HTMLInputElement>inputWithAriaLabel).getAttribute("aria-label")).toBe("Textbox aria label");
            expect((<HTMLInputElement>inputWithAriaLabel).getAttribute("aria-required")).toBeNull();

            expect((<HTMLInputElement>invalidInputWithRequiredAndAriaLabel).getAttribute("aria-label")).toBe("Textbox aria label");
            expect((<HTMLInputElement>invalidInputWithRequiredAndAriaLabel).getAttribute("aria-required")).toBe("true");
            expect((<HTMLInputElement>invalidInputWithRequiredAndAriaLabel).getAttribute("aria-invalid")).toBe("true");
        } else {
            fail("Test failed due to it is not fully rendered");
        }
    });
});

async function writeAndCheck(params: { bot: BBBot.IBBBot; addString: string; expectedResult: string; input: HTMLElement }): Promise<void> {
    await params.bot.writeExpression(params.addString, 200, true);
    expect((<HTMLInputElement>params.input).value).toBe(params.expectedResult);
}
