import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as FormElements from "bobwai--form-elements";
import * as LBlock from "bobwai--l-block";
import * as Icon from "bobwai--icon";
import * as Color from "bobwai--color";
import * as StateIcon from "../src/lib";

let onClick = (): void => {
    alert("You are click here!");
};

interface IExampleData {
    title: string;
    stateIconData: StateIcon.IData;
}

let sizeData: IExampleData[] = [
    {
        title: "10x10",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.close_xsmall_png, Color.Basic) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.close_xsmall_png, Color.Error) }),
            onClick: onClick
        }
    },
    {
        title: "20x20",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Basic) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Application) }),
            onClick: onClick
        }
    },
    {
        title: "30x30",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_medium_png, Color.Basic) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_medium_png, Color.Application) }),
            onClick: onClick
        }
    },
    {
        title: "40x40",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Basic) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Application) }),
            onClick: onClick
        }
    }
];

let lightAndWhiteData = [
    {
        title: "Normal Light",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Grey500) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Application) }),
            onClick: onClick
        }
    },
    {
        title: "Normal Dark",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Basic) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Application) }),
            onClick: onClick
        }
    },
    {
        title: "Hover",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Application) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Application) }),
            onClick: onClick
        }
    },
    {
        title: "Disable Light",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Grey500) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Grey500) }),
            onClick: onClick,
            isDisabled: true
        }
    },
    {
        title: "Disable Dark",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Basic) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Basic) }),
            onClick: onClick,
            isDisabled: true
        }
    },
    {
        title: "Error",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Error) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Error) }),
            onClick: onClick
        }
    }
];

let darkBackgroundData = [
    {
        title: "Normal",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.White_75) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.White_75) }),
            disableContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.White_30) }),
            onClick: onClick
        }
    },
    {
        title: "Hover",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.White) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.White) }),
            disableContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.White_30) }),
            onClick: onClick
        }
    },
    {
        title: "Disable",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.White_75) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.White) }),
            disableContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.White_30) }),
            onClick: onClick,
            isDisabled: true
        }
    }
];

let exceptionData = [
    {
        title: "Hover",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.add_small_png, Color.Success) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.add_small_png, Color.Success) }),
            onClick: onClick
        }
    },
    {
        title: "Hover",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.close_small_png, Color.Grey500) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.close_small_png, Color.Error) }),
            onClick: onClick
        }
    },
    {
        title: "Hover",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.close_medium_png, Color.Grey500) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.close_medium_png, Color.Basic) }),
            onClick: onClick
        }
    }
];

let withoutFocusData = [
    {
        title: "Normal Light",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Grey500) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Application) }),
            onClick: onClick,
            isFocusable: false
        }
    }
];

let withExtraActiveAreaData = [
    {
        title: "Normal Light",
        stateIconData: {
            content: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Grey500) }),
            hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_large_png, Color.Application) }),
            onClick: onClick,
            customActiveArea: {
                offsetTop: 30,
                offsetBottom: 30,
                offsetLeft: 30,
                offsetRight: 30
            }
        }
    }
];

function createSample(data: IExampleData[]): b.IBobrilNode[] {
    return data.map(function(obj) {
        return b.styledDiv(
            [
                b.styledDiv(obj.title, { paddingBottom: 20 }),
                StateIcon.create({
                    content: obj.stateIconData.content,
                    hoverContent: obj.stateIconData.hoverContent,
                    shadowContent: obj.stateIconData.shadowContent,
                    disableContent: obj.stateIconData.disableContent,
                    isDisabled: obj.stateIconData.isDisabled,
                    onClick: onClick,
                    isFocusable: obj.stateIconData.isFocusable,
                    customActiveArea: obj.stateIconData.customActiveArea
                })
            ],
            { display: "inline-block", textAlign: "center", padding: 20 }
        );
    });
}

Example.init({}, () => {
    return [
        Container.create({
            header: "Example switches color on hover it",
            content: StateIcon.create({
                content: LBlock.create({ children: "Text", width: 40, height: 40, background: "yellow" }),
                hoverContent: LBlock.create({ children: "Hover text", width: 40, height: 40, background: "khaki" }),
                onClick: onClick
            })
        }),
        Container.create({
            header: "Example with inner tooltip (tooltip color depends on validationState)",
            content: [
                StateIcon.create({
                    content: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Basic) }),
                    hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Application) }),
                    tooltip: {
                        tooltipHeader: "Tooltip header",
                        tooltipMessage: "Tooltip message"
                    }
                }),
                StateIcon.create({
                    content: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Error) }),
                    hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Error) }),
                    tooltip: {
                        tooltipHeader: "Tooltip header",
                        tooltipMessage: "Tooltip message"
                    },
                    validationState: FormElements.ValidationState.Error
                }),
                StateIcon.create({
                    content: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Warning) }),
                    hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Warning) }),
                    tooltip: {
                        tooltipHeader: "Tooltip header",
                        tooltipMessage: "Tooltip message"
                    },
                    validationState: FormElements.ValidationState.Warning
                })
            ]
        }),
        Container.create({
            header: "Size",
            content: createSample(sizeData)
        }),
        Container.create({
            header: "Light & White Background",
            content: createSample(lightAndWhiteData)
        }),
        Container.create({
            header: "Dark Background",
            content: b.styledDiv([createSample(darkBackgroundData)], { backgroundColor: Color.Basic, color: Color.White })
        }),
        Container.create({
            header: "TEST: Info icons (this is not bobwai--state-icon)",
            isTest: true,
            content: Icon.create({ sprite: b.sprite(Icon.file_medium_png, Color.Grey500) })
        }),
        Container.create({
            header: "Exception - add, delete and close icons",
            content: createSample(exceptionData)
        }),
        Container.create({
            header: "Not focusable state icon",
            content: createSample(withoutFocusData)
        }),
        Container.create({
            header: "State icon with 30px offset",
            description:
                "This could be used in special cases when you need to have clickable/hoverable" +
                " area larger than icon itself - for example in bobwai--icon-input.",
            content: createSample(withExtraActiveAreaData)
        }),
        Container.create({
            header: "Example with inner tooltip and set up placement (tooltip color depends on validationState)",
            content: b.styledDiv(
                [
                    StateIcon.create({
                        content: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Basic) }),
                        hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Application) }),
                        tooltip: {
                            tooltipHeader: "Tooltip header",
                            tooltipMessage: "Tooltip message with position top left"
                        },
                        tooltipPreferedPlacement: StateIcon.Placement.topCenter
                    }),
                    StateIcon.create({
                        content: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Error) }),
                        hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Error) }),
                        tooltip: {
                            tooltipHeader: "Tooltip header",
                            tooltipMessage: "Tooltip message with position bottom center"
                        },
                        validationState: FormElements.ValidationState.Error,
                        tooltipPreferedPlacement: StateIcon.Placement.bottomCenter
                    }),
                    StateIcon.create({
                        content: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Warning) }),
                        hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Warning) }),
                        tooltip: {
                            tooltipHeader: "Tooltip header",
                            tooltipMessage: "Tooltip message with position left"
                        },
                        validationState: FormElements.ValidationState.Warning,
                        tooltipPreferedPlacement: StateIcon.Placement.left
                    })
                ],
                { height: 200, textAlign: "center" }
            )
        }),
        Container.create({
            header: "Example with inner tooltip which is automatically hidden on icon click",
            content: b.styledDiv(
                [
                    StateIcon.create({
                        content: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Basic) }),
                        hoverContent: Icon.create({ sprite: b.sprite(Icon.settings_small_png, Color.Application) }),
                        tooltip: {
                            tooltipHeader: "Tooltip header",
                            tooltipMessage: "Tooltip message with position top left"
                        },
                        tooltipPreferedPlacement: StateIcon.Placement.topCenter,
                        isTooltipHiddenOnClick: true
                    })
                ],
                { height: 200, textAlign: "center" }
            )
        })
    ];
});
