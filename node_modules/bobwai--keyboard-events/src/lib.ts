import * as b from "bobril";

export const create = b.createVirtualComponent<IData>({
    id: "bobwai--keyboard-events",
    render(ctx: IContext, me: b.IBobrilNode): void {
        me.children = ctx.data.children;
    },
    onKeyDown(ctx: IContext, event: b.IKeyDownUpEvent): boolean {
        return handleKeyCodes({ which: event.which, ctrlKey: event.ctrl, altKey: event.alt, shiftKey: event.shift }, ctx.data);
    },
});

export interface IData {
    children?: b.IBobrilChildren;
    onCtrlEnterPress?(): boolean;
    onEnterPress?(): boolean;
    onEscPress?(): boolean;
    onDelPress?(): boolean;
}

interface IContext extends b.IBobrilCtx {
    data: IData;
}

const keyDownEventListener = "keydown";
export const createGlobal = b.createVirtualComponent<IData>({
    init(ctx: IGlobalContext) {
        ctx.registeredHandler = (event: KeyboardEvent): boolean => {
            return handleKeyCodes(event, ctx.data);
        };
        if (window.document.documentElement) {
            window.document.documentElement.addEventListener(keyDownEventListener, ctx.registeredHandler, false);
        }
    },
    destroy(ctx: IGlobalContext) {
        if (window.document.documentElement) {
            window.document.documentElement.removeEventListener(keyDownEventListener, ctx.registeredHandler, false);
        }
    },
    render(ctx: IGlobalContext, me: b.IBobrilNode) {
        me.children = ctx.data.children;
    },
});

interface IGlobalContext extends IContext {
    registeredHandler: (event: any) => boolean;
}

function handleKeyCodes(event: IKeyboardEvent, data: IData): boolean {
    return (
        handleKeyCode(event, 13, data.onCtrlEnterPress, { ctrlKey: true }) ||
        handleKeyCode(event, 13, data.onEnterPress) ||
        handleKeyCode(event, 27, data.onEscPress) ||
        handleKeyCode(event, 46, data.onDelPress)
    );
}

interface IKeyboardEvent {
    which: number;
    ctrlKey: boolean;
    altKey: boolean;
    shiftKey: boolean;
}

interface IModifiers {
    ctrlKey?: boolean;
    altKey?: boolean;
    shiftKey?: boolean;
}

function handleKeyCode(event: IKeyboardEvent, callbackKeyCode: number, callback?: () => boolean, modifiers?: IModifiers) {
    if (
        callback &&
        event.which === callbackKeyCode &&
        testModifier(modifiers && modifiers.ctrlKey, event.ctrlKey) &&
        testModifier(modifiers && modifiers.altKey, event.altKey) &&
        testModifier(modifiers && modifiers.shiftKey, event.shiftKey)
    ) {
        return callback();
    }
    return false;
}

function testModifier(expectedValue: boolean | undefined, actualValue: boolean) {
    return expectedValue === undefined || expectedValue === actualValue;
}

// added by script - BEGIN
export const KeyboardEvents = create;
// added by script - END
