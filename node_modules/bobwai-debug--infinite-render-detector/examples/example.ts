import * as b from "bobril";
import * as debugRenderCounter from "../src/lib";

let isTestElementVisible = false;
let isTest2ElementVisible = false;
let isTest3ElementVisible = false;
let content = "";

b.init(() => {
    return [
        getMockTitle("bobwai-debug--infinite-render-detector"),
        getMockSubtitle("Component adds extra indicator on the page, it tells that b.invalidate is called in never-ending invalidate loop"),
        getControlButton("Click to add/remove component with infinity render caused by local invalidate", () => {
            isTestElementVisible = !isTestElementVisible;
        }),
        getControlButton("Click to add/remove component with infinity render caused by global invalidate", () => {
            isTest2ElementVisible = !isTest2ElementVisible;
        }),
        getControlButton("Click to add/remove component with infinity render caused by local invalidate in virtual component", () => {
            isTest3ElementVisible = !isTest3ElementVisible;
        }),
        isTestElementVisible && getTestComponentWithInfinityRender(),
        isTest2ElementVisible && getTestComponentWithGlobalInfinityRender(),
        isTest3ElementVisible && virtualComponent(),
        b.withKey(debugRenderCounter.create({}), "debugger"),
    ];
});

const virtualComponent = b.createVirtualComponent({
    render(ctx: b.IBobrilCtx, me: b.IBobrilNode) {
        me.children = getTestComponentWithInfinityRender();
        b.invalidate(ctx);
    },
});

function getControlButton(label: string, onClick: () => void): b.IBobrilNode {
    return {
        tag: "button",
        children: label,
        component: {
            onClick(): boolean {
                onClick();
                b.invalidate();

                return false;
            },
        },
    };
}

function getTestComponentWithInfinityRender(): b.IBobrilNode {
    return b.style(
        {
            tag: "div",
            children: "This component has infinity render " + content,
            component: {
                render(ctx: b.IBobrilCtx) {
                    content += "I ";
                    b.invalidate(ctx);
                },
            },
        },
        {
            background: "#00ff1f",
        }
    );
}

function getTestComponentWithGlobalInfinityRender(): b.IBobrilNode {
    return b.style(
        {
            tag: "div",
            children: "This component has infinity render " + content,
            component: {
                render() {
                    content += "I ";
                    b.invalidate();
                },
            },
        },
        {
            background: "#00ff1f",
        }
    );
}

function getMockTitle(text: string): b.IBobrilNode {
    return b.styledDiv(text, {
        fontSize: 24,
        color: "#404040",
        marginBottom: 10,
    });
}

function getMockSubtitle(text: string): b.IBobrilNode {
    return b.styledDiv(text, {
        fontSize: 15,
        color: "#717171",
        marginBottom: 10,
    });
}
