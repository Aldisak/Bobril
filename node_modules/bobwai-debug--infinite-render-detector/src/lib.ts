import * as b from "bobril";

import * as LogButton from "./components/logButton";

export interface IData {}

const ConsecutiveInvalidatesLimit = 75;

class Context extends b.BobrilCtx<IData> {
    consecutiveInvalidates: number = 0;
    exceededConsecutiveInvalidates: number = 0;
    errorCtx: b.IBobrilCtx | undefined;
    nativeInvalidate: NativeInvalidate | undefined;
    loggingEnabled: boolean = false;

    constructor() {
        super();

        const originalAfterFrame = b.setAfterFrame((c) => {
            originalAfterFrame(c);
            if (b.invalidated()) {
                this.consecutiveInvalidates++;
                if (this.consecutiveInvalidates > ConsecutiveInvalidatesLimit) {
                    this.exceededConsecutiveInvalidates++;

                    if (!this.nativeInvalidate) {
                        this.nativeInvalidate = this.overrideNativeInvalidate(this);
                    }

                    b.invalidate(this);
                }
            }

            if (!b.invalidated()) {
                this.consecutiveInvalidates = 0;
                this.exceededConsecutiveInvalidates = 0;
                this.errorCtx = undefined;
                if (this.nativeInvalidate) {
                    b.setInvalidate(this.nativeInvalidate);
                    this.nativeInvalidate = undefined;
                }
            }
        });
    }

    overrideNativeInvalidate = (detectorContext: Context): NativeInvalidate => {
        const nativeInvalidate = b.setInvalidate((ctx?: Object, deepness?: number): void => {
            const errorCtx = ctx as b.IBobrilCtx;

            if (errorCtx !== undefined && ctx !== detectorContext) {
                detectorContext.errorCtx = errorCtx;
            }

            if (detectorContext.loggingEnabled) {
                console.log("Invalidated context", errorCtx, deepness);
            }

            nativeInvalidate(ctx, deepness);
        });

        return nativeInvalidate;
    };
}

export const create = b.createComponent<IData>({
    id: "example--render-counter",
    ctxClass: Context,
    render(ctx: Context, me: b.IBobrilNode): void {
        if (ctx.exceededConsecutiveInvalidates === 0) {
            return;
        }
        me.children = [
            "Exceeded consecutive invalidates: ",
            ctx.exceededConsecutiveInvalidates,
            " ",
            LogButton.create({
                enabled: ctx.loggingEnabled,
                onClick: (enabled: boolean) => {
                    ctx.loggingEnabled = enabled;
                    b.invalidate(ctx);
                },
            }),
        ];

        b.style(me, containerStyle, { background: getBackgroundColor(ctx.exceededConsecutiveInvalidates) });
    },
    postUpdateDom(ctx: Context): void {
        setBlinkingBorder(ctx);
    },
    onClick(ctx: Context): boolean {
        ctx.exceededConsecutiveInvalidates = 0;
        b.invalidate(ctx);
        return true;
    },
});

function getBackgroundColor(count: number): string {
    const oscilation = Math.cos(count * 0.1);
    const r = 256;
    const g = 256 + (oscilation - 1) * 128;
    const b = 256 + (oscilation - 1) * 128;
    return `rgba(${r}, ${g}, ${b}, 1)`;
}

function setBlinkingBorder(ctx: Context) {
    const errorCtx = ctx.errorCtx;

    if (errorCtx && errorCtx.me && errorCtx.me.element) {
        const element = errorCtx.me.element as HTMLElement;

        element.style.outline = `2px solid ${getBackgroundColor(ctx.consecutiveInvalidates)}`;
    }
}

const containerStyle = b.styleDef(
    {
        position: "fixed",
        top: 0,
        right: 0,
        textAlign: "right",
        fontFamily: "Open sans, Sans-serif",
        zIndex: 1000,
    },
    {},
    "example--render-counter"
);

type NativeInvalidate = (ctx?: Object, deepness?: number) => void;

// added by script - BEGIN
export const InfiniteRenderDetector = create;
// added by script - END
