import * as b from "bobril";
import * as LViewMain from "../src/lib";
import * as LApp from "bobwai--l-app";
import * as LViewSidebar from "bobwai--l-view-sidebar";
import * as LViewAppHeader from "bobwai--l-view-app-header";
import * as LViewAppBreadcrumb from "bobwai--l-view-app-breadcrumb";
import * as LViewAppToolbar from "bobwai--l-view-app-toolbar";
import * as Example from "bobwai--example";
import * as Checkbox from "bobwai--checkbox";
import * as Combobox from "bobwai--combobox";
import * as Color from "bobwai--color";

let isCombinedWithBreadcrumb: boolean = true;
let isCombinedWithAppHeader: boolean = true;
let isCombinedWithAppToolbar: boolean = true;
let isCombinedWithSidebar: boolean = true;
let isCombinedWithRightSidebar: boolean = false;
let sidebarWidth: number;
let rightSidebarWidth: number;
let toolbarSize: number;

let sidebarContent = b.styledDiv(
    "Sidebar content",
    b.styleDef({
        background: Color.Info
    })
);

let rightSidebarContent = b.styledDiv(
    "Right sidebar",
    b.styleDef({
        background: Color.Info
    })
);

let headerContent = b.styledDiv(
    "Header content",
    b.styleDef({
        background: Color.Chart_Green100,
        height: LViewAppHeader.Height
    })
);

let toolbarContent = b.styledDiv(
    "Toolbar content",
    b.styleDef({
        background: Color.Chart_Blue100,
        height: LViewAppToolbar.Height
    })
);

let toolbarContentSmall = b.styledDiv(
    "Toolbar content",
    b.styleDef({
        background: Color.Chart_Blue100,
        height: LViewAppToolbar.SmallHeight
    })
);

let mainContent = b.styledDiv(
    "Main content",
    b.styleDef({
        background: Color.Success
    })
);

Example.init({}, () => {
    return [
        LApp.create({
            children: [
                isCombinedWithAppHeader &&
                    LViewAppHeader.create({
                        children: isCombinedWithAppHeader && headerContent
                    }),
                isCombinedWithBreadcrumb &&
                    LViewAppBreadcrumb.create({
                        children: "Breadcrumb content",
                        isCombinedWithAppHeader: isCombinedWithAppHeader
                    }),
                isCombinedWithAppToolbar &&
                    LViewAppToolbar.create({
                        children: toolbarSize === LViewAppToolbar.Size.Small ? toolbarContentSmall : toolbarContent,
                        isCombinedWithAppHeader: isCombinedWithAppHeader,
                        isCombinedWithAppBreadcrumb: isCombinedWithBreadcrumb,
                        toolbarSize: toolbarSize
                    }),
                LViewMain.create({
                    isCombinedWithAppHeader: isCombinedWithAppHeader,
                    isCombinedWithSidebar: isCombinedWithSidebar,
                    isCombinedWithAppBreadcrumb: isCombinedWithBreadcrumb,
                    isCombinedWithAppToolbar: isCombinedWithAppToolbar,
                    isCombinedWithRightSidebar: isCombinedWithRightSidebar,
                    toolbarSize: toolbarSize,
                    sidebarWidth: sidebarWidth,
                    rightSidebarWidth: rightSidebarWidth,
                    children: b.styledDiv([
                        mainContent,
                        Checkbox.create({
                            value: isCombinedWithAppHeader,
                            title: "Combined with appHeader",
                            onChange: (value: boolean): void => {
                                isCombinedWithAppHeader = value;
                                b.invalidate();
                            }
                        }),
                        Checkbox.create({
                            value: isCombinedWithBreadcrumb,
                            title: "Combined with breadcrumb",
                            onChange: (value: boolean): void => {
                                isCombinedWithBreadcrumb = value;
                                b.invalidate();
                            }
                        }),
                        Checkbox.create({
                            value: isCombinedWithAppToolbar,
                            title: "Combined with toolbar",
                            onChange: (value: boolean): void => {
                                isCombinedWithAppToolbar = value;
                                b.invalidate();
                            }
                        }),
                        b.styledDiv(
                            [
                                "Right sidebar width: ",
                                Combobox.create({
                                    value: toolbarSize,
                                    items: getToolbarComboValues(),
                                    onChange: (value: number) => {
                                        toolbarSize = value;
                                        b.invalidate();
                                    },
                                    size: Combobox.Size.Small
                                })
                            ],
                            { paddingLeft: 25 }
                        ),
                        Checkbox.create({
                            value: isCombinedWithSidebar,
                            title: "Combined with sidebar",
                            onChange: (value: boolean): void => {
                                isCombinedWithSidebar = value;
                                b.invalidate();
                            }
                        }),
                        b.styledDiv(
                            [
                                "Sidebar width: ",
                                Combobox.create({
                                    value: sidebarWidth,
                                    items: getComboValues(),
                                    onChange: (value: number) => {
                                        sidebarWidth = value;
                                        b.invalidate();
                                    },
                                    size: Combobox.Size.Small
                                })
                            ],
                            { paddingLeft: 25 }
                        ),
                        Checkbox.create({
                            value: isCombinedWithRightSidebar,
                            title: "Combined with right sidebar",
                            onChange: (value: boolean): void => {
                                isCombinedWithRightSidebar = value;
                                b.invalidate();
                            }
                        }),
                        b.styledDiv(
                            [
                                "Right sidebar width: ",
                                Combobox.create({
                                    value: rightSidebarWidth,
                                    items: getComboValues(),
                                    onChange: (value: number) => {
                                        rightSidebarWidth = value;
                                        b.invalidate();
                                    },
                                    size: Combobox.Size.Small
                                })
                            ],
                            { paddingLeft: 25 }
                        )
                    ])
                }),
                isCombinedWithSidebar &&
                    LViewSidebar.create({
                        children: sidebarContent,
                        isCombinedWithAppHeader: isCombinedWithAppHeader,
                        isCombinedWithAppBreadcrumb: isCombinedWithBreadcrumb,
                        isCombinedWithAppToolbar: isCombinedWithAppToolbar,
                        width: sidebarWidth,
                        toolbarSize: toolbarSize
                    }),
                isCombinedWithRightSidebar &&
                    LViewSidebar.create({
                        children: rightSidebarContent,
                        isCombinedWithAppHeader: isCombinedWithAppHeader,
                        isCombinedWithAppBreadcrumb: isCombinedWithBreadcrumb,
                        isCombinedWithAppToolbar: isCombinedWithAppToolbar,
                        width: rightSidebarWidth,
                        isRightSidebar: true,
                        toolbarSize: toolbarSize
                    })
            ]
        })
    ];
});

function getToolbarComboValues(): Combobox.IItem[] {
    let items: Combobox.IItem[] = [];
    items.push({
        label: "Default",
        value: LViewAppToolbar.Size.Default
    });
    items.push({
        label: "Small",
        value: LViewAppToolbar.Size.Small
    });
    return items;
}

function getComboValues(): Combobox.IItem[] {
    let items = [];
    for (let width in LViewSidebar.SidebarWidth) {
        if (!isNaN(parseInt(width, 10))) {
            let widthNr = +width;
            items.push(<Combobox.IItem>{
                label: LViewSidebar.SidebarWidth[width].toString(),
                value: widthNr
            });
        }
    }
    return items;
}
