import * as b from "bobril";
import * as styles from "./styles";
import * as stylesHelper from "./stylesHelper";
import * as LViewSidebar from "bobwai--l-view-sidebar";
import * as LViewAppToolbar from "bobwai--l-view-app-toolbar";

export let create = b.createComponent<IData>({
    id: "bobwai--l-view-main",
    render(ctx: IContext, me: b.IBobrilNode): void {
        b.style(me, getStyles(ctx));
        me.children = b.styledDiv(ctx.data.children, styles.contentStyle);
    }
});

export interface IData {
    isCombinedWithAppHeader?: boolean;
    isCombinedWithAppBreadcrumb?: boolean;
    isCombinedWithAppToolbar?: boolean;
    isCombinedWithSidebar?: boolean;
    toolbarSize?: LViewAppToolbar.Size;
    sidebarWidth?: LViewSidebar.SidebarWidth;
    isCombinedWithRightSidebar?: boolean;
    rightSidebarWidth?: LViewSidebar.SidebarWidth;
    children: b.IBobrilChildren;
}

function getStyles(ctx: IContext): b.IBobrilStyles {
    return [styles.baseStyle, getSidebarStyle(ctx), getRightSidebarStyle(ctx), getMainStyle(ctx)];
}

function getMainStyle(ctx: IContext): b.IBobrilStyles {
    let mainStyle: b.IBobrilStyle = {};

    return [
        mainStyle,
        stylesHelper.getPaddingTopStyle(
            ctx.data.isCombinedWithAppHeader,
            ctx.data.isCombinedWithAppBreadcrumb,
            ctx.data.isCombinedWithAppToolbar,
            ctx.data.toolbarSize
        )
    ];
}

function getSidebarStyle(ctx: IContext): b.IBobrilStyle {
    if (ctx.data.isCombinedWithSidebar) {
        return {
            paddingLeft: LViewSidebar.getWidthValue(ctx.data.sidebarWidth)
        };
    }
    return null;
}

function getRightSidebarStyle(ctx: IContext): b.IBobrilStyle {
    if (ctx.data.isCombinedWithRightSidebar) {
        return {
            paddingRight: LViewSidebar.getWidthValue(ctx.data.rightSidebarWidth)
        };
    }
    return null;
}

interface IContext extends b.IBobrilCtx {
    data: IData;
}

// added by script - BEGIN
export const LViewMain = create;
// added by script - END
