import * as b from "bobril";
import { Size } from "./data";
import * as font from "bobwai--font";
import * as color from "bobwai--color";

const sizeBase = 256;
const sizeStep = 3 / 4;

interface IComponentStyleSettings {
    imageWidth: number;
    imageHeight: number;
    messageFontSize: number;
    messageFontWeight: number;
    messageLineHeight: string;
    verticalPadding: number;
    minWidth: number;
    maxWidth: number;
    componentPadding: number;
}

function createStyleSettings(
    width: number,
    messageFontSize: number,
    messageLineHeight: number,
    messageFontWeight: number,
    messageTopPadding: number,
    componentPadding: number
): IComponentStyleSettings {
    return {
        imageWidth: width,
        imageHeight: width * sizeStep,
        messageFontSize: messageFontSize,
        messageFontWeight: messageFontWeight,
        messageLineHeight: `${messageLineHeight}px`,
        verticalPadding: messageTopPadding,
        componentPadding: componentPadding,
        minWidth: width,
        maxWidth: width * 2,
    };
}

const largeSettings = createStyleSettings(sizeBase, 22, 36, font.FontWeightLight, 16, 24);
const mediumSettings = createStyleSettings(sizeBase * sizeStep, 16, 24, font.FontWeightRegular, 12, 24);
const smallSettings = createStyleSettings(sizeBase * sizeStep * sizeStep, 13, 20, 700, 8, 12);

const imageLargeStyle = b.styleDef({
    width: largeSettings.imageWidth,
    height: largeSettings.imageHeight,
    paddingBottom: largeSettings.verticalPadding,
});

const imageMediumStyle = b.styleDef({
    width: mediumSettings.imageWidth,
    height: mediumSettings.imageHeight,
    paddingBottom: mediumSettings.verticalPadding,
});

const imageSmallStyle = b.styleDef({
    width: smallSettings.imageWidth,
    height: smallSettings.imageHeight,
    paddingBottom: smallSettings.verticalPadding,
});

export function getImageStyle(size?: Size): b.IBobrilStyle {
    switch (size) {
        case Size.Small:
            return imageSmallStyle;
        case Size.Medium:
            return imageMediumStyle;
        default:
            return imageLargeStyle;
    }
}

const messageStyle = b.styleDef({
    color: color.Basic,
});

const messageLargeStyle = b.styleDef({
    fontSize: largeSettings.messageFontSize,
    fontWeight: largeSettings.messageFontWeight,
    lineHeight: largeSettings.messageLineHeight,
});

const messageMediumStyle = b.styleDef({
    fontSize: mediumSettings.messageFontSize,
    fontWeight: mediumSettings.messageFontWeight,
    lineHeight: mediumSettings.messageLineHeight,
});

const messageSmallStyle = b.styleDef({
    fontSize: smallSettings.messageFontSize,
    fontWeight: smallSettings.messageFontWeight,
    lineHeight: smallSettings.messageLineHeight,
});

export function getMessageStyle(size?: Size): b.IBobrilStyle[] {
    const styles = [messageStyle];
    switch (size) {
        case Size.Small:
            styles.push(messageSmallStyle);
            break;
        case Size.Medium:
            styles.push(messageMediumStyle);
            break;
        default:
            styles.push(messageLargeStyle);
            break;
    }
    return styles;
}

export const descriptionStyle = b.styleDef({
    color: color.Basic,
    display: "inline",
    paddingLeft: `0.15em`,
    paddingRight: `0.15em`,
});

const wrapperStyle = b.styleDef({
    display: "inline-block",
});

const wrapperLargeStyle = b.styleDef({
    minWidth: largeSettings.minWidth,
    maxWidth: largeSettings.maxWidth,
});

const wrapperMediumStyle = b.styleDef({
    minWidth: mediumSettings.minWidth,
    maxWidth: mediumSettings.maxWidth,
});

const wrapperSmallStyle = b.styleDef({
    minWidth: smallSettings.minWidth,
    maxWidth: smallSettings.maxWidth,
});

export function getWrapperStyle(size?: Size): b.IBobrilStyle[] {
    const styles = [wrapperStyle];
    switch (size) {
        case Size.Small:
            styles.push(wrapperSmallStyle);
            break;
        case Size.Medium:
            styles.push(wrapperMediumStyle);
            break;
        default:
            styles.push(wrapperLargeStyle);
            break;
    }
    return styles;
}

const buttonStyle = b.styleDef({
    marginLeft: 4,
    marginRight: 4,
    display: "inline-block",
});

const buttonSmallStyle = b.styleDef({
    marginTop: smallSettings.verticalPadding,
});

const buttonMediumStyle = b.styleDef({
    marginTop: mediumSettings.verticalPadding,
});

const buttonLargeStyle = b.styleDef({
    marginTop: largeSettings.verticalPadding,
});

export function getButtonStyle(size?: Size): b.IBobrilStyle[] {
    const styles = [buttonStyle];
    switch (size) {
        case Size.Small:
            styles.push(buttonSmallStyle);
            break;
        case Size.Medium:
            styles.push(buttonMediumStyle);
            break;
        default:
            styles.push(buttonLargeStyle);
            break;
    }
    return styles;
}

export const baseStyle = b.styleDef({
    textAlign: "center",
});
