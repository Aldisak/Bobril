import * as b from "bobril";
import * as s from "./style";
import { IconType, IData } from "./data";
import * as Assets from "../src/assets";

export const create = b.createComponent<IData>({
    id: "bobwai--empty-state",
    render(ctx: IContext, me: b.IBobrilNode): void {
        me.children = createEmptyContent(ctx.data);
        b.style(me, s.baseStyle);
    },
});

export * from "./data";

interface IContext extends b.IBobrilCtx {
    data: IData;
}

function createEmptyContent(data: IData): b.IBobrilChildren {
    return b.styledDiv(
        [
            getImageNode(data),
            getMessageContent(data),
            b.styledDiv(
                [
                    data.beforeLinkContent && b.styledDiv(data.beforeLinkContent, s.descriptionStyle),
                    data.linkContent && b.styledDiv(data.linkContent, s.descriptionStyle),
                    data.afterLinkContent && b.styledDiv(data.afterLinkContent, s.descriptionStyle),
                ],
                s.descriptionStyle
            ),
            getButtonsWrapper(data),
        ],
        s.getWrapperStyle(data.size)
    );
}

function getMessageContent(data: IData): b.IBobrilChildren {
    if (data.message) {
        const lines = Array.isArray(data.message) ? data.message : [data.message];
        const lineStyle = s.getMessageStyle(data.size);
        return lines.map((l) => b.styledDiv(l, lineStyle));
    }
    return undefined;
}

function getIconData(type?: IconType): string {
    switch (type) {
        case IconType.Success:
            return b.asset(Assets.es_success_svg);
        case IconType.EmptyFolder:
            return b.asset(Assets.es_empty_folder_svg);
        case IconType.EmptyWorkflow:
            return b.asset(Assets.es_empty_workflow_svg);
        case IconType.Error4xx:
            return b.asset(Assets.es_error_4xx_svg);
        case IconType.Error5xx:
            return b.asset(Assets.es_error_5xx_svg);
        case IconType.NotConfigured:
            return b.asset(Assets.es_not_configured_svg);
        case IconType.EmptyApps:
            return b.asset(Assets.es_empty_apps_svg);
        case IconType.ErrorUser:
            return b.asset(Assets.es_error_user_svg);
        case IconType.Select:
            return b.asset(Assets.es_select_svg);
        default:
            return b.asset(Assets.es_not_found_svg);
    }
}

function getImageNode(data: IData): b.IBobrilNode {
    const image = b.style(
        {
            tag: "img",
            attrs: {
                src: getIconData(data.iconType),
            },
        },
        [s.getImageStyle(data.size)]
    );
    return image;
}

function getButtonsWrapper(data: IData): b.IBobrilNode | undefined {
    if (!data.buttons) {
        return undefined;
    }

    const buttons = b.styledDiv(createButtons(data));
    return buttons;
}

function createButtons(data: IData): b.IBobrilChildren {
    return (
        data.buttons &&
        b.flatten(data.buttons).map((item) => {
            return b.styledDiv(item, s.getButtonStyle(data.size));
        })
    );
}

export const EmptyState = create;
