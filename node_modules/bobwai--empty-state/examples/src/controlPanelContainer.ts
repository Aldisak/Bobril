import * as b from "bobril";
import * as Example from "bobwai--example";
import * as EmptyState from "../../src/lib";
import * as Combobox from "bobwai--combobox";
import * as Textbox from "bobwai--textbox";
import * as SwitchButton from "bobwai--switch-button";
import * as Link from "bobwai--link";
import * as Button from "bobwai--button";
import * as Focus from "bobwai--focus";

const defaultData: EmptyState.IData = {
    message: "Some message",
};

export function getControlPanelContainer(): b.IBobrilNode {
    return Example.createControlPanelContainer({
        fullComponentName: "bobwai--empty-state",

        data: defaultData,
        content: EmptyState.create(defaultData),
        controlPanelItems: [
            {
                codeGeneratorAdditionalSettings: { propertyPath: "message" },
                fieldCategory: Example.FieldCategory.Content,
                fieldParam: {
                    value: defaultData.message,
                    fieldFactory: Textbox.create,
                    fieldType: Example.FieldType.Textbox,
                    onChange: (v) => {
                        defaultData.message = v;
                        b.invalidate();
                    },
                },
            },
            {
                codeGeneratorAdditionalSettings: {
                    propertyPath: "size",
                    enumSettings: {
                        enum: EmptyState.Size,
                        enumPropertyName: "Size",
                    },
                },
                fieldCategory: Example.FieldCategory.Appearance,
                fieldParam: {
                    customValueContent: Example.createComboEnum({
                        comboboxFactory: Combobox.create,
                        enum: EmptyState.Size,
                        onChange: (v) => {
                            if (v === EmptyState.Size.Large) {
                                delete defaultData.size;
                            } else {
                                defaultData.size = v;
                            }
                            b.invalidate();
                        },
                        value: defaultData.size || EmptyState.Size.Large,
                    }),
                },
            },
            {
                codeGeneratorAdditionalSettings: {
                    propertyPath: "iconType",
                    enumSettings: {
                        enum: EmptyState.IconType,
                        enumPropertyName: "IconType",
                    },
                },
                fieldCategory: Example.FieldCategory.Appearance,
                fieldParam: {
                    customValueContent: Example.createComboEnum({
                        comboboxFactory: Combobox.create,
                        enum: EmptyState.IconType,
                        onChange: (v) => {
                            if (v === EmptyState.IconType.NotFound) {
                                delete defaultData.iconType;
                            } else {
                                defaultData.iconType = v;
                            }
                            b.invalidate();
                        },
                        value: defaultData.iconType || EmptyState.IconType.NotFound,
                    }),
                },
            },
            {
                codeGeneratorAdditionalSettings: { propertyPath: "beforeLinkContent" },
                fieldCategory: Example.FieldCategory.Content,
                fieldParam: {
                    value: defaultData.beforeLinkContent,
                    fieldFactory: Textbox.create,
                    fieldType: Example.FieldType.Textbox,
                    onChange: (v) => {
                        defaultData.beforeLinkContent = v;
                        b.invalidate();
                    },
                },
            },
            {
                codeGeneratorAdditionalSettings: {
                    propertyPath: "linkContent",
                    component: {
                        properties: [
                            { propertyPath: "isUnderlinedIfNotActive" },
                            { propertyPath: "text" },
                            {
                                propertyPath: "displayAs",
                                enumSettings: {
                                    enumPropertyName: "DisplayAs",
                                    enum: Focus.DisplayAs,
                                    exportedComponentName: "bobwai--focus",
                                },
                            },
                        ],
                    },
                },
                fieldCategory: Example.FieldCategory.Content,

                fieldParam: {
                    fieldFactory: SwitchButton.create,
                    fieldType: Example.FieldType.Switch,
                    value: defaultData.linkContent !== undefined,
                    onChange: (v) => {
                        if (v) {
                            defaultData.linkContent = Link.create({
                                isUnderlinedIfNotActive: true,
                                text: "create new file",
                                displayAs: Link.DisplayAs.EnclosedInlineBlock,
                                onClick: () => {
                                    alert("click");
                                },
                            });
                        } else {
                            delete defaultData.linkContent;
                        }
                        b.invalidate();
                    },
                },
            },
            {
                codeGeneratorAdditionalSettings: {
                    propertyPath: "buttons",
                    component: [
                        {
                            properties: [
                                {
                                    propertyPath: "size",
                                    enumSettings: {
                                        enumPropertyName: "Size",
                                        enum: Button.Size,
                                    },
                                },
                            ],
                        },
                        {
                            properties: [
                                {
                                    propertyPath: "size",
                                    enumSettings: {
                                        enumPropertyName: "Size",
                                        enum: Button.Size,
                                    },
                                },
                            ],
                        },
                    ],
                },
                fieldCategory: Example.FieldCategory.Content,
                fieldParam: {
                    fieldFactory: SwitchButton.create,
                    fieldType: Example.FieldType.Switch,
                    value: defaultData.buttons !== undefined,
                    onChange: (v) => {
                        if (v) {
                            defaultData.buttons = [
                                Button.create({
                                    label: "Action 1",
                                    onClick: () => {},
                                }),
                                Button.create({
                                    label: "Action 2",
                                    onClick: () => {},
                                }),
                            ];
                        } else {
                            delete defaultData.buttons;
                        }
                        b.invalidate();
                    },
                },
            },
            {
                codeGeneratorAdditionalSettings: { propertyPath: "afterLinkContent" },
                fieldCategory: Example.FieldCategory.Content,
                fieldParam: {
                    value: defaultData.afterLinkContent,
                    fieldFactory: Textbox.create,
                    fieldType: Example.FieldType.Textbox,
                    onChange: (v) => {
                        defaultData.afterLinkContent = v;
                        b.invalidate();
                    },
                },
            },
        ],
    });
}
