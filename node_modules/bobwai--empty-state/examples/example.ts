import * as EmptyState from "../src/lib";
import * as b from "bobril";
import * as Example from "bobwai--example";
import * as Container from "bobwai--viewer-container";
import * as Link from "bobwai--link";
import * as Button from "bobwai--button";
import * as Combobox from "bobwai--combobox";
import { getControlPanelContainer } from "./src/controlPanelContainer";
import * as Focus from "bobwai--focus";

function createButton(text: string): b.IBobrilNode {
    return Button.create({
        label: text,
        onClick: () => {},
    });
}

let size: EmptyState.Size;
let icon: EmptyState.IconType;

Example.init(
    {
        preferredHeight: Example.PreferredHeight.Medium,
    },
    () => {
        return [
            Container.create({
                header: "Configuration form",
                type: Container.Type.typical,
                content: getControlPanelContainer(),
            }),
            Container.create({
                content: [
                    EmptyState.create({
                        message: "Some message",
                        linkContent: Link.create({
                            isUnderlinedIfNotActive: true,
                            text: "download file",
                            displayAs: Focus.DisplayAs.Block,
                            onClick: () => {
                                // TODO: Implement
                            },
                        }),
                    }),

                    Example.createControlPanel({
                        items: [
                            Example.createField({
                                label: "Size",
                                customValueContent: Example.createComboEnum({
                                    comboboxFactory: Combobox.create,
                                    enum: EmptyState.Size,
                                    value: size,
                                    onChange: (v) => {
                                        size = v;
                                        b.invalidate();
                                    },
                                }),
                            }),
                            Example.createField({
                                label: "Icon type",
                                customValueContent: Example.createComboEnum({
                                    comboboxFactory: Combobox.create,
                                    enum: EmptyState.IconType,
                                    value: icon,
                                    onChange: (v) => {
                                        icon = v;
                                        b.invalidate();
                                    },
                                }),
                            }),
                        ],
                    }),
                ],
            }),
            Container.create({
                header: "Basic example",
                content: EmptyState.create({
                    message: "No data available.",
                    iconType: icon,
                    size: size,
                }),
            }),
            Container.create({
                header: "Message array",
                content: EmptyState.create({
                    message: ["First message row", "Second message row"],
                    iconType: icon,
                    size: size,
                }),
            }),
            Container.create({
                header: "Long message",
                content: EmptyState.create({
                    message: "Very long message text will be wrapped automatically",
                    iconType: icon,
                    size: size,
                }),
            }),
            Container.create({
                header: "Description with link",
                content: EmptyState.create({
                    message: "No data available.",
                    iconType: icon,
                    size: size,
                    beforeLinkContent: "Please",
                    linkContent: Link.create({
                        isUnderlinedIfNotActive: true,
                        text: "download file",
                        displayAs: Link.DisplayAs.EnclosedInlineBlock,
                        onClick: () => {
                            alert("click");
                        },
                    }),
                    afterLinkContent: "to preview.",
                }),
            }),
            Container.create({
                header: "Long description with link",
                content: EmptyState.create({
                    message: "No data available.",
                    iconType: icon,
                    size: size,
                    beforeLinkContent: "If you really want to see something interesting you could ",
                    linkContent: Link.create({
                        isUnderlinedIfNotActive: true,
                        text: "download some amazing file",
                        displayAs: Link.DisplayAs.EnclosedInlineBlock,
                        onClick: () => {
                            alert("click");
                        },
                    }),
                    afterLinkContent: "from our beautiful application.",
                }),
            }),
            Container.create({
                header: "One button",
                content: EmptyState.create({
                    message: "No data available.",
                    iconType: icon,
                    size: size,
                    beforeLinkContent: "Please",
                    linkContent: Link.create({
                        isUnderlinedIfNotActive: true,
                        text: "download file",
                        displayAs: Link.DisplayAs.EnclosedInlineBlock,
                        onClick: () => {
                            alert("click");
                        },
                    }),
                    afterLinkContent: "to preview.",
                    buttons: [createButton("button")],
                }),
            }),
            Container.create({
                header: "More buttons",
                content: EmptyState.create({
                    message: "No data available.",
                    iconType: icon,
                    size: size,
                    beforeLinkContent: "Please",
                    linkContent: Link.create({
                        isUnderlinedIfNotActive: true,
                        text: "download file",
                        displayAs: Link.DisplayAs.EnclosedInlineBlock,
                        onClick: () => {
                            alert("click");
                        },
                    }),
                    afterLinkContent: "to preview.",
                    buttons: [createButton("button 1"), createButton("button 2")],
                }),
            }),
        ];
    }
);
