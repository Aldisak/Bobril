export function deepEqual<TValue>(a: TValue, b: TValue) {
    if (a === b) {
        return true;
    } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
    } else if (a === null || b === null || typeof a !== "object" || typeof b !== "object") {
        return false;
    } else {
        if ((<{ prototype?: Object }>a).prototype !== (<{ prototype?: Object }>b).prototype) {
            return false;
        }
        let ka = Object.keys(a);
        let kb = Object.keys(b);
        if (ka.length !== kb.length) {
            return false;
        }
        ka.sort();
        kb.sort();
        for (let i = ka.length - 1; i >= 0; i--) {
            if (ka[i] !== kb[i]) {
                return false;
            }
        }
        for (let i = ka.length - 1; i >= 0; i--) {
            let key = ka[i];
            const aAsDict = <{ [key: string]: TValue }>(<{}>a);
            const bAsDict = <{ [key: string]: TValue }>(<{}>b);
            if (!deepEqual(aAsDict[key], bAsDict[key])) {
                return false;
            }
        }
        return true;
    }
}
