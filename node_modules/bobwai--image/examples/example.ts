import * as b from "bobril";
import * as Image from "../src/lib";
import * as bobwai__image from "../src/assets";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as Color from "bobwai--color";
import * as Checkbox from "bobwai--checkbox";
import * as FormElements from "bobwai--form-elements";
import * as Combobox from "bobwai--combobox";

let imageInfo: string;
let hasBorder: boolean;
let hasOverlay: boolean;
let isOverlayTransparent: boolean;
let backgroundColor: string | undefined;
let isRounded: boolean;
let centered: boolean;
let horizontalAlign: FormElements.TextAlign | undefined;

Example.init({}, () => {
    return [
        Container.create({
            header: "Image component in default state - size is according to image",
            content: Image.create({
                src: b.asset(bobwai__image.funny_faces_png),
            }),
        }),
        Container.create({
            header: "Image component with specific dimensions",
            content: Image.create({
                src: b.asset(bobwai__image.funny_faces_png),
                width: 290,
                height: 124,
            }),
        }),
        Container.create({
            header: "Image component with specific height and auto width to keep aspect ratio of image",
            content: Image.create({
                src: b.asset(bobwai__image.funny_faces_png),
                height: 25,
                width: "auto",
            }),
        }),
        Container.create({
            header: "Image component with empty src",
            content: Image.create({
                src: "",
            }),
        }),
        Container.create({
            header: "Image component in default state - size is according to image",
            model: imageInfo,
            content: Image.create({
                src: b.asset(bobwai__image.funny_faces_png),
                onLoad: (clientRect: ClientRect) => {
                    // JSON.stringify on ClientRect returns an empty object.
                    // https://bugs.webkit.org/show_bug.cgi?id=141063
                    imageInfo = `{ width: ${clientRect.width}, height: ${clientRect.height}}`;
                    b.invalidate();
                },
            }),
        }),
        Container.create({
            header: "Image which is centered to its parent",
            content: b.styledDiv(
                Image.create({
                    src: b.asset(bobwai__image.funny_faces_png),
                    centered: true,
                }),
                centeredContainer
            ),
        }),
        Container.create({
            header: "Image which is resized (diminished) to fit parent (width)",
            content: b.styledDiv(
                Image.create({
                    src: b.asset(bobwai__image.funny_faces_png),
                    fitParent: true,
                }),
                fitContainer1
            ),
        }),
        Container.create({
            header: "Image which is resized (diminished) to fit parent (height)",
            content: b.styledDiv(
                Image.create({
                    src: b.asset(bobwai__image.funny_faces_png),
                    fitParent: true,
                }),
                fitContainer2
            ),
        }),
        Container.create({
            header: "Image which is centered and resized (diminished) to fit parent (width)",
            content: b.styledDiv(
                Image.create({
                    src: b.asset(bobwai__image.funny_faces_png),
                    fitParent: true,
                    centered: true,
                }),
                centeredResizeContainer1
            ),
        }),
        Container.create({
            header: "Image which is centered and resized (diminished) to fit parent (height)",
            content: b.styledDiv(
                Image.create({
                    src: b.asset(bobwai__image.funny_faces_png),
                    fitParent: true,
                    centered: true,
                }),
                centeredResizeContainer2
            ),
        }),
        Container.create({
            header: "Image which is centered and resized (diminished) to fit parent (you can try to resize parent container)",
            content: b.styledDiv(
                b.styledDiv(
                    Image.create({
                        src: b.asset(bobwai__image.funny_faces_png),
                        fitParent: true,
                        centered: true,
                    }),
                    centeredResizeContainerResizableInner
                ),
                centeredResizeContainerResizableOuter
            ),
        }),
        Container.create({
            header: "Image with wrong src path ending with 404 Not Found replaced with default Image Not Found icon",
            content: Image.create({
                src: "wrong src path",
            }),
        }),
        Container.create({
            header: "Centered image with wrong src path ending with 404 Not Found replaced with default Image Not Found icon",
            content: b.styledDiv(
                b.styledDiv(
                    Image.create({
                        src: "wrong src path",
                        fitParent: true,
                        centered: true,
                    }),
                    centeredResizeContainerResizableInner
                ),
                centeredResizeContainerResizableOuter
            ),
        }),
        Container.create({
            header: "Image with overlay, custom border color, custom background and rounded settings",
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            fieldFactory: Checkbox.create,
                            fieldType: Example.FieldType.Checkbox,
                            value: hasBorder,
                            onChange: (v) => {
                                hasBorder = v;
                                b.invalidate();
                            },
                            label: "border",
                        }),
                        Example.createField({
                            fieldFactory: Checkbox.create,
                            fieldType: Example.FieldType.Checkbox,
                            value: isRounded,
                            onChange: (v) => {
                                isRounded = v;
                                b.invalidate();
                            },
                            label: "isRounded",
                        }),
                        Example.createField({
                            fieldFactory: Checkbox.create,
                            fieldType: Example.FieldType.Checkbox,
                            value: hasOverlay,
                            onChange: (v) => {
                                hasOverlay = v;
                                b.invalidate();
                            },
                            label: "hasOverlay (with icon)",
                        }),
                        Example.createField({
                            fieldFactory: Checkbox.create,
                            fieldType: Example.FieldType.Checkbox,
                            value: isOverlayTransparent,
                            onChange: (v) => {
                                isOverlayTransparent = v;
                                b.invalidate();
                            },
                            note: "Works only when overlay is set",
                            label: "isTransparent (overlay)",
                        }),
                        Example.createField({
                            fieldFactory: Checkbox.create,
                            fieldType: Example.FieldType.Checkbox,
                            value: centered,
                            onChange: (v) => {
                                centered = v;
                                b.invalidate();
                            },
                            label: "centered",
                        }),
                        Example.createField({
                            customValueContent: Example.createComboEnum({
                                enum: FormElements.TextAlign,
                                value: horizontalAlign,
                                onChange: (v) => {
                                    horizontalAlign = v;
                                    b.invalidate();
                                },
                                comboboxFactory: Combobox.create,
                            }),
                            label: "horizontalAlign",
                            note: "Make sense only if fitToParent and centered properties are set",
                        }),
                    ],
                }),
                b.styledDiv(
                    Image.create({
                        src: b.asset("../assets/user-image.png"),
                        height: 62,
                        centered: centered,
                        horizontalAlign: horizontalAlign,
                        width: 62,
                        backgroundColor: backgroundColor,
                        isRounded: isRounded,
                        overlay: hasOverlay
                            ? {
                                  content: b.styledDiv("I", { height: 20, width: 20, background: "red", display: "inline-block" }),
                                  isTransparent: isOverlayTransparent,
                              }
                            : undefined,
                        border: hasBorder
                            ? {
                                  color: Color.Application,
                              }
                            : undefined,
                    }),
                    centeredContainer,
                    { background: Example.ExampleColor.Color1 }
                ),
            ],
        }),
        Container.create({
            background: Container.Background.Dark,
            header: "For transparent images there can be set background color property",
            content: b.styledDiv([
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            fieldType: Example.FieldType.IColor,
                            value: backgroundColor,
                            onChange: (v) => {
                                backgroundColor = v;
                                b.invalidate();
                            },
                            label: "backgroundColor",
                        }),
                    ],
                }),

                Image.create({
                    src: b.asset("./assets/cloud_logo_big.png"),
                    fitParent: true,
                    centered: true,
                    backgroundColor: backgroundColor,
                }),
            ]),
        }),
    ];
});

const centeredContainer = b.styleDef({
    height: 300,
    width: 500,
    backgroundColor: "lime",
});

const fitContainer1 = b.styleDef({
    height: 70,
    width: 50,
    backgroundColor: "red",
});

const fitContainer2 = b.styleDef({
    height: 30,
    width: 500,
    backgroundColor: "red",
});

const centeredResizeContainer1 = b.styleDef({
    height: 70,
    width: 50,
    backgroundColor: "blue",
});

const centeredResizeContainer2 = b.styleDef({
    height: 30,
    width: 500,
    backgroundColor: "blue",
});

const centeredResizeContainerResizableInner = b.styleDef({
    height: 300,
    width: 500,
    maxHeight: 300,
    maxWidth: 500,
    backgroundColor: "gray",
    border: "solid",
    resize: "both",
    overflow: "auto",
});
const centeredResizeContainerResizableOuter = b.styleDef({
    height: 300,
    width: 500,
    backgroundColor: "red",
});
