import * as b from "bobril";
import * as bobwai__image from "./assets";
import * as StyleMixins from "bobwai--style-mixins";
import * as Icon from "bobwai--icon";
import * as LCenter from "bobwai--l-center";
import * as Color from "bobwai--color";
import { IWebContentAccessibility, setWebContentAccessibilityAttributes } from "helpers--web-content-accessibility";
import * as FormElements from "bobwai--form-elements";

const cannotLoadImageIcon = Icon.create({ sprite: b.sprite(Icon.dithering_mode_disabled_large_png, Color.Grey500) });

export const create = b.createComponent<IData>({
    id: "bobwai--image",
    render(ctx: IContext, me: b.IBobrilNode): void {
        if (ctx.data.centered || ctx.isCorruptedImage) {
            me.children = [!ctx.isCorruptedImage ? getImgNode(ctx) : getDefaultImage(ctx)];
            b.style(
                me,
                ctx.data.centered && centerStyleParent,
                ctx.data.horizontalAlign === FormElements.TextAlign.Left && leftStyleParent,
                ctx.data.horizontalAlign === FormElements.TextAlign.Right && rightStyleParent
            );
        } else {
            me.children = getImgNode(ctx);
            b.style(me, parentBaseStyle);
        }
    },
    postUpdateDom(ctx: IContext, _me: b.IBobrilCacheNode, element: HTMLElement): void {
        if (ctx.isLoaded) {
            ctx.data.onLoad && ctx.data.onLoad((element.firstChild as Element).getBoundingClientRect());
            ctx.isLoaded = false;
        }
    },
});

function getOverlay(ctx: IContext): b.IBobrilNode {
    return b.styledDiv(
        LCenter.create({
            horizontalCenterType: LCenter.HorizontalCenterType.Center,
            verticalCenterType: LCenter.VerticalCenterType.Center,
            children: ctx.data.overlay!.content,
        }),
        imageOverlayStyle,
        ctx.data.overlay!.isTransparent && imageTransparentOverlayStyle,
        ctx.data.isRounded && imageRoundedStyle
    );
}

function getImgNode(ctx: IContext): b.IBobrilNode {
    const image = b.style(
        {
            tag: "img",
            attrs: {
                src: getSrc(ctx.data),
                onload: () => {
                    if (ctx.data.onLoad && !ctx.isLoaded) {
                        ctx.isLoaded = true;
                        b.invalidate(ctx);
                    }
                },
                onerror: () => imageLoadFailed(ctx),
            },
        },
        [
            {
                width: ctx.data.width,
                height: ctx.data.height,
            },
            ctx.data.centered && centerStyleChild,
            ctx.data.fitParent && maxSizeStyle,
            ctx.data.isRounded && imageRoundedStyle,
            ctx.data.border && {
                borderStyle: "solid",
                borderWidth: 1,
                borderColor: ctx.data.border.color,
            },
            ctx.data.backgroundColor && { background: ctx.data.backgroundColor },
        ]
    );
    if (ctx.data.webContentAccessibility) {
        setWebContentAccessibilityAttributes(image, ctx.data.webContentAccessibility);
    }
    if (ctx.data.overlay) {
        return b.styledDiv([image, getOverlay(ctx)], maxSizeStyle, imageWrapperForOverlayStyle);
    }
    return image;
}

function imageLoadFailed(ctx: IContext) {
    ctx.isCorruptedImage = true;
    b.invalidate(ctx);
}

function getDefaultImage(ctx: IContext): b.IBobrilNode {
    return b.styledDiv(cannotLoadImageIcon, ctx.data.centered && centerStyleChild);
}

export interface IData {
    src: string;
    width?: number | string;
    height?: number | string;
    centered?: boolean;
    fitParent?: boolean;
    /** Only for the case fitToParent and centered are set */
    horizontalAlign?: FormElements.TextAlign;
    // has full border radius
    isRounded?: boolean;
    // has overlay with icon
    overlay?: IImageOverlay;
    border?: IImageBorder;
    backgroundColor?: Color.IColor;

    onLoad?: (clientRect: ClientRect) => void;
    webContentAccessibility?: WebContentAccessibility;
}

export interface IImageOverlay {
    content: b.IBobrilNode;
    isTransparent?: boolean;
}

export interface IImageBorder {
    color: Color.IColor;
}

export type WebContentAccessibility = Required<Pick<IWebContentAccessibility, "alternativeDescription">>;

interface IContext extends b.IBobrilCtx {
    data: IData;
    isLoaded: boolean;
    isCorruptedImage: boolean;
}

function getSrc(data: IData): string {
    return !data.src || data.src.length === 0 ? b.asset(bobwai__image.no_images_jpg) : data.src;
}

const parentBaseStyle = b.styleDef({ height: "100%" });

const centerStyleParent = b.styleDef([StyleMixins.centerVerticalParent("100%"), { height: "100%", textAlign: "center" }]);
const leftStyleParent = b.styleDef({ textAlign: "left" });
const rightStyleParent = b.styleDef({ textAlign: "right" });

const centerStyleChild = b.styleDef([StyleMixins.centerVerticalChildInlineBlock()]);

const maxSizeStyle = b.styleDef({ maxHeight: "100%", maxWidth: "100%" });

const imageOverlayStyle = b.styleDef({
    position: "absolute",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    background: Color.Application_64,
});

const imageTransparentOverlayStyle = b.styleDefEx(imageOverlayStyle, {
    background: "none",
});

const imageWrapperForOverlayStyle = b.styleDef({
    position: "relative",
    display: "inline-block",
    fontSize: 0,
});

const imageRoundedStyle = b.styleDef({ borderRadius: "50%" });

// added by script - BEGIN
export const Image = create;
// added by script - END
