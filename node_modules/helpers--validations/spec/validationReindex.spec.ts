import { IErrorInfo, getErrorInfoOrDefault } from "../src/lib";
import { decreasePropertyErrorsIndex } from "../src/validationReindex";

const ERROR_A = { error: "error A" };
const ERROR_B = { error: "error B" };
const ERROR_C = { error: "error C" };

describe("validations decrease indexes of properties", () => {
    let errorInfo: IErrorInfo;
    let items: string[] = [];

    beforeEach(() => {
        items = ["0", "1", "2", "3", "4", "5"];
        errorInfo = getErrorInfoOrDefault();
        errorInfo.propertyErrors = {
            "List[0].Name": [ERROR_A],
            "List[1].Name": [ERROR_A, ERROR_B],
            "List[3].Name": [ERROR_B, ERROR_C],
            "List[3].Value": [ERROR_A],
            "List[5].Value": [ERROR_C],
            Name: [ERROR_A],
        };
    });

    it("should decrease indexes on List.Name from index '2'", () => {
        decreasePropertyErrorsIndex({
            errorInfo,
            totalItemsCount: items.length,
            fromIndex: 2,
            propGetter: (i) => `List[${i}].Name`,
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[0].Name": [ERROR_A],
            "List[1].Name": [ERROR_A, ERROR_B],
            "List[2].Name": [ERROR_B, ERROR_C],
            "List[3].Value": [ERROR_A],
            "List[5].Value": [ERROR_C],
            Name: [ERROR_A],
        });
    });

    it("should decrease indexes on List.Name and List.Value from index '2'", () => {
        decreasePropertyErrorsIndex({
            errorInfo,
            totalItemsCount: items.length,
            fromIndex: 2,
            propGetter: [(i) => `List[${i}].Name`, (i) => `List[${i}].Value`],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[0].Name": [ERROR_A],
            "List[1].Name": [ERROR_A, ERROR_B],
            "List[2].Name": [ERROR_B, ERROR_C],
            "List[2].Value": [ERROR_A],
            "List[4].Value": [ERROR_C],
            Name: [ERROR_A],
        });
    });

    it("should decrease indexes on List.Name and List.Value from first index (first will be removed)", () => {
        decreasePropertyErrorsIndex({
            errorInfo,
            totalItemsCount: items.length,
            fromIndex: 0,
            propGetter: [(i) => `List[${i}].Name`, (i) => `List[${i}].Value`],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[0].Name": [ERROR_A, ERROR_B],
            "List[2].Name": [ERROR_B, ERROR_C],
            "List[2].Value": [ERROR_A],
            "List[4].Value": [ERROR_C],
            Name: [ERROR_A],
        });
    });

    it("should decrease indexes on List.Name and List.Value from last index (just last will be removed)", () => {
        decreasePropertyErrorsIndex({
            errorInfo,
            totalItemsCount: items.length,
            fromIndex: items.length - 1,
            propGetter: [(i) => `List[${i}].Name`, (i) => `List[${i}].Value`],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[0].Name": [ERROR_A],
            "List[1].Name": [ERROR_A, ERROR_B],
            "List[3].Name": [ERROR_B, ERROR_C],
            "List[3].Value": [ERROR_A],
            Name: [ERROR_A],
        });
    });

    it("should not make change when index is so high", () => {
        decreasePropertyErrorsIndex({
            errorInfo,
            totalItemsCount: items.length,
            fromIndex: items.length + 2,
            propGetter: [(i) => `List[${i}].Name`, (i) => `List[${i}].Value`],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[0].Name": [ERROR_A],
            "List[1].Name": [ERROR_A, ERROR_B],
            "List[3].Name": [ERROR_B, ERROR_C],
            "List[3].Value": [ERROR_A],
            "List[5].Value": [ERROR_C],
            Name: [ERROR_A],
        });
    });

    it("should not make change when index is negative", () => {
        decreasePropertyErrorsIndex({
            errorInfo,
            totalItemsCount: items.length,
            fromIndex: -3,
            propGetter: [(i) => `List[${i}].Name`, (i) => `List[${i}].Value`],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[0].Name": [ERROR_A],
            "List[1].Name": [ERROR_A, ERROR_B],
            "List[3].Name": [ERROR_B, ERROR_C],
            "List[3].Value": [ERROR_A],
            "List[5].Value": [ERROR_C],
            Name: [ERROR_A],
        });
    });
});
