import { removeValidationErrorsByParams } from "../src/validationRemoveByParams";
import { IErrorInfo, getErrorInfoOrDefault } from "../src/lib";

const ERROR_A = { error: "error A" };
const ERROR_B = { error: "error B" };
const ERROR_C = { error: "error C" };

describe("validations remove by params", () => {
    let errorInfo: IErrorInfo;

    beforeEach(() => {
        errorInfo = getErrorInfoOrDefault();
        errorInfo.propertyErrors = {
            "List[0].Name": [ERROR_A],
            "List[1].Name": [ERROR_A, ERROR_B],
            "List[1].Value": [ERROR_B, ERROR_C],
            Name: [ERROR_A],
        };
    });

    it("should remove errors A", () => {
        removeValidationErrorsByParams({
            errorInfo,
            errorKeys: ERROR_A.error,
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[1].Name": [ERROR_B],
            "List[1].Value": [ERROR_B, ERROR_C],
        });
    });

    it("should remove errors A and B", () => {
        debugger;
        removeValidationErrorsByParams({
            errorInfo,
            errorKeys: [ERROR_A.error, ERROR_B.error],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[1].Value": [ERROR_C],
        });
    });

    it("should remove errors A, B and C", () => {
        removeValidationErrorsByParams({
            errorInfo,
            errorKeys: [ERROR_A.error, ERROR_B.error, ERROR_C.error],
        });

        expect(errorInfo.propertyErrors).toEqual({});
    });

    it("should remove errors A on property that starts 'List['", () => {
        removeValidationErrorsByParams({
            errorInfo,
            properties: { startsWith: "List[" },
            errorKeys: [ERROR_A.error],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[1].Name": [ERROR_B],
            "List[1].Value": [ERROR_B, ERROR_C],
            Name: [ERROR_A],
        });
    });

    it("should remove errors B on property that starts 'List[' and ends '.Name'", () => {
        removeValidationErrorsByParams({
            errorInfo,
            properties: { startsWith: "List[", endsWith: ".Name" },
            errorKeys: [ERROR_B.error],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[0].Name": [ERROR_A],
            "List[1].Name": [ERROR_A],
            "List[1].Value": [ERROR_B, ERROR_C],
            Name: [ERROR_A],
        });
    });

    it("should remove errors A on property that ends 'Name'", () => {
        removeValidationErrorsByParams({
            errorInfo,
            properties: { endsWith: "Name" },
            errorKeys: [ERROR_A.error],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[1].Name": [ERROR_B],
            "List[1].Value": [ERROR_B, ERROR_C],
        });
    });

    it("should remove errors A on property that ends '.Name'", () => {
        removeValidationErrorsByParams({
            errorInfo,
            properties: { endsWith: ".Name" },
            errorKeys: [ERROR_A.error],
        });

        expect(errorInfo.propertyErrors).toEqual({
            "List[1].Name": [ERROR_B],
            "List[1].Value": [ERROR_B, ERROR_C],
            Name: [ERROR_A],
        });
    });

    it("should remove all errors on property that starts 'List['", () => {
        removeValidationErrorsByParams({
            errorInfo,
            properties: { startsWith: "List[" },
        });

        expect(errorInfo.propertyErrors).toEqual({
            Name: [ERROR_A],
        });
    });
});
