import { isDirty, isInvalid, IValidationsState, removeValidationError } from "../src/lib";
import { getState, setState, bootstrap, ICursor } from "bobflux";
import { expectNotToBeMutated, expectToBeMutated } from "helpers--jasmine";
import { IErrorInfo, IErrorInfoBase } from "../src/validationObjects";

const testValidationsCursor: ICursor<IValidationsState> = {
    key: "validations",
};

describe("validation functions", () => {
    beforeEach(() => {
        bootstrap({
            validations: {
                errorInfo: undefined,
                validationRules: undefined,
            },
        });
    });

    it("isDirty returns false when nothing has changed", () => {
        const state = getState(testValidationsCursor);

        expect(isDirty(testValidationsCursor)).toEqual(false);

        const newState = getState(testValidationsCursor);
        expectNotToBeMutated(newState, state);
    });

    it("isDirty returns true when something has changed", () => {
        setState(testValidationsCursor, { errorInfo: <IErrorInfo>{} });

        const state = getState(testValidationsCursor);

        expect(isDirty(testValidationsCursor)).toEqual(true);

        const newState = getState(testValidationsCursor);
        expectNotToBeMutated(newState, state);
    });

    it("isInvalid returns false when nothing has changed", () => {
        const state = getState(testValidationsCursor);

        expect(isInvalid(testValidationsCursor)).toEqual(false);

        const newState = getState(testValidationsCursor);
        expectNotToBeMutated(newState, state);
    });

    it("isInvalid returns false when error info is undefined", () => {
        setState(testValidationsCursor, { errorInfo: undefined });

        const state = getState(testValidationsCursor);

        expect(isInvalid(testValidationsCursor)).toEqual(false);

        const newState = getState(testValidationsCursor);
        expectNotToBeMutated(newState, state);
    });

    it("isInvalid returns false when error info is empty", () => {
        setState(testValidationsCursor, {
            errorInfo: <IErrorInfo>{},
        });

        const state = getState(testValidationsCursor);

        expect(isInvalid(testValidationsCursor)).toEqual(false);

        const newState = getState(testValidationsCursor);
        expectNotToBeMutated(newState, state);
    });

    it("isInvalid returns false when error info contains none error", () => {
        setState(testValidationsCursor, {
            errorInfo: <IErrorInfo>{
                propertyErrors: {},
            },
        });

        const state = getState(testValidationsCursor);

        expect(isInvalid(testValidationsCursor)).toEqual(false);

        const newState = getState(testValidationsCursor);
        expectNotToBeMutated(newState, state);
    });

    it("isInvalid returns true when error info contains some error", () => {
        setState(testValidationsCursor, {
            errorInfo: <IErrorInfo>{
                error: "",
                propertyErrors: { ["error-key"]: [<IErrorInfoBase>{ error: "error" }] },
                errorParameters: [],
                localizableParametersIds: [],
                parametersLocalizations: {},
                errorType: "General",
            },
        });

        const state = getState(testValidationsCursor);

        expect(isInvalid(testValidationsCursor)).toEqual(true);

        const newState = getState(testValidationsCursor);
        expectNotToBeMutated(newState, state);
    });

    it("removeValidationError remove property error if exists", () => {
        setState(testValidationsCursor, {
            errorInfo: <IErrorInfo>{
                error: "",
                propertyErrors: { ["property-with-key"]: [<IErrorInfoBase>{ error: "error" }] },
                errorParameters: [],
                localizableParametersIds: [],
                parametersLocalizations: {},
                errorType: "General",
            },
        });

        const state = getState(testValidationsCursor);

        removeValidationError(testValidationsCursor, "property-with-key");

        const newState = getState(testValidationsCursor);
        expectToBeMutated(newState, state);
        expect(newState.errorInfo).toBe(null);
    });

    it("removeValidationError remove property error if exists", () => {
        setState(testValidationsCursor, {
            errorInfo: <IErrorInfo>{
                error: "",
                propertyErrors: {
                    "property-with-key": [<IErrorInfoBase>{ error: "error" }],
                    "property-with-key-2": [<IErrorInfoBase>{ error: "error 2" }],
                },
                errorParameters: [],
                localizableParametersIds: [],
                parametersLocalizations: {},
                errorType: "General",
            },
        });

        const state = getState(testValidationsCursor);

        removeValidationError(testValidationsCursor, "property-with-key");

        const newState = getState(testValidationsCursor);
        expectToBeMutated(newState, state);
        expect(newState.errorInfo).toBeDefined();
        expect(newState.errorInfo!.propertyErrors).toBeDefined();
        expect(newState.errorInfo!.propertyErrors!.hasOwnProperty("property-with-key")).toBeFalsy();
        expect(newState.errorInfo!.propertyErrors!.hasOwnProperty("property-with-key-2")).toBeTruthy();
    });

    it("removeValidationError will do nothing if property error not exists", () => {
        setState(testValidationsCursor, {
            errorInfo: <IErrorInfo>{
                error: "",
                propertyErrors: { ["property-with-key"]: [<IErrorInfoBase>{ error: "error" }] },
                errorParameters: [],
                localizableParametersIds: [],
                parametersLocalizations: {},
                errorType: "General",
            },
        });

        const state = getState(testValidationsCursor);

        removeValidationError(testValidationsCursor, "property-with-key-invalid");

        const newState = getState(testValidationsCursor);
        expectNotToBeMutated(newState, state);
    });
});
