import * as flux from "bobflux";
import * as actions from "./actions/setValidations";
import { IValidationsState } from "./state";
import { IErrorInfo, IValidationRulesDto } from "./validationObjects";
import { IPromiseWithTypedError } from "helpers--promise";

export interface IApiWithQueryValidationRules {
    queryValidationRules(validationObjectTypeEnum: string): IPromiseWithTypedError<IValidationRulesDto, IErrorInfo>;
}

/** * Cache for loaded validation rules. */
export interface IValidationRulesCache {
    /**
     * Loads particular validation rules of given type and store it to the state on given cursor.
     * @function
     * @param cursor Cusor to the {IValidationsState} state.
     * @param api Backend api implementing {IApiWithQueryValidationRules} with method queryValidationRules.
     * @param validationObjectType {string} Validation object type.
     * @param onError Option callback for handling errors on loading rules.
     */
    getValidations(
        cursor: flux.ICursor<IValidationsState>,
        api: IApiWithQueryValidationRules,
        validationObjectType: string,
        onError?: (error: IErrorInfo) => void
    ): void;
}

/**
 * Factory for Validation Rules cache.
 * @param expiration Expiration period for validation rules of particular validation type in minutes.
 * @return {IValidationRulesCache}
 */
export function validationRulesCacheFactory(expiration: number = 30): IValidationRulesCache {
    const validationRulesPromises: { [key: string]: IPromiseWithTypedError<IValidationRulesDto, IErrorInfo> } = {};
    const timeout = expiration * 60000;

    return {
        getValidations: (
            cursor: flux.ICursor<IValidationsState>,
            api: IApiWithQueryValidationRules,
            validationObjectType: string,
            onError?: (error: IErrorInfo) => void
        ) => {
            if (!validationRulesPromises[validationObjectType]) {
                validationRulesPromises[validationObjectType] = api.queryValidationRules(validationObjectType);
                setTimeout(() => delete validationRulesPromises[validationObjectType], timeout);
            }

            validationRulesPromises[validationObjectType].then((rules) => {
                actions.setValidations({ cursor, validationRules: rules });
            });

            if (onError) {
                validationRulesPromises[validationObjectType].catch(onError);
            }
        },
    };
}
