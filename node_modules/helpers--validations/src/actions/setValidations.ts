import * as flux from "bobflux";
import { IValidationsState } from "../state";
import { IValidationCursorFactoryParams, dynamicValidationsCursorFactory } from "../cursor";
import { IErrorInfo, IValidationRulesDto } from "../validationObjects";

export interface IActionData extends IValidationCursorFactoryParams {
    errorInfo?: IErrorInfo | null;
    validationRules?: IValidationRulesDto | null;
}

export const setValidations: flux.IAction<IActionData> = flux.createAction<IValidationsState, IActionData>(
    dynamicValidationsCursorFactory,
    setValidationsHandler
);

export function setValidationsHandler(state: IValidationsState, params: IActionData): IValidationsState {
    if (params.errorInfo instanceof Error) {
        throw params.errorInfo;
    }
    return flux.shallowCopy(state, (result: IValidationsState) => {
        if (params.errorInfo !== undefined) {
            result.errorInfo = params.errorInfo;
        }
        if (params.validationRules !== undefined) {
            result.validationRules = params.validationRules || undefined;
        }
    });
}
