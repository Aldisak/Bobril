import * as b from "bobril";
import * as flux from "bobflux";
import * as ToolTip from "bobwai--tooltip-emplacer";
import * as FormElements from "bobwai--form-elements";
import * as Validator from "./validation";
import { IErrorInfo, IErrorInfoBase, IValidationRulesDto, IValidationTypeEnum } from "./validationObjects";
import { IValidationsState } from "./state";

export declare type ResultType = boolean | void | number | string | Object;
export declare type BobrilCtxAsArgType<TValue extends Validator.ValueType, TParam> = (
    ctx: b.IBobrilCtx<IFormElementData<TValue, TParam>>
) => void;
export declare type TValueAsArgType<TValue> = (value?: TValue) => void;

export function isIBobrilCtx<TValue extends Validator.ValueType, TParam>(
    value: b.IBobrilCtx<IFormElementData<TValue, TParam>> | TValue
): value is b.IBobrilCtx<IFormElementData<TValue, TParam>> {
    return (
        value !== undefined &&
        typeof value === "object" &&
        "data" in (value as object) &&
        (value as b.IBobrilCtx<IFormElementData<TValue, TParam>>).data !== undefined
    );
}

export interface IFormElementData<TValue extends Validator.ValueType, TParam> {
    validationState?: FormElements.ValidationState;
    onChange?: (value: TValue, ...params: TParam[]) => ResultType;
    onFocusOut?: BobrilCtxAsArgType<TValue, TParam> | TValueAsArgType<TValue>;
    isDisabled?: boolean;
    value?: TValue;
}

export enum ValidationTrigger {
    OnChange = "OnChange",
    OnFocusOut = "OnFocusOut",
}

export type RequiredDataComponentFactory<T> = (data: T) => b.IBobrilNode<T>;

export interface IData<TComponentData extends IFormElementData<TValue, TParam>, TValue extends Validator.ValueType, TParam> {
    builder: RequiredDataComponentFactory<TComponentData> | b.IComponentFactory<TComponentData>;
    componentData: TComponentData;
    propertyName: string;
    preventDisabled?: boolean;
    placement?: ToolTip.Placement;
    preventTooltip?: boolean;
    localizeErrorMessage: (errorInfo: IErrorInfo | IErrorInfoBase) => string;
    validationTypeEnum: IValidationTypeEnum;
    validationsCursor?: flux.ICursor<IValidationsState>;
    triggerValidationOn?: ValidationTrigger | ValidationTrigger[];
    validationDisabled?: boolean;

    /** Deprecated - Old mechanism without dynamic cursor */
    errorChanged?: (updatedError: IErrorInfo) => void;
    /** Deprecated - Old mechanism without dynamic cursor */
    validations?: IValidationRulesDto;
    /** Deprecated - Old mechanism without dynamic cursor */
    errorInfo?: IErrorInfo;
}
