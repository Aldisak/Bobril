import * as b from "bobril";
import { IErrorInfo } from "./lib";

/// to reindex property errors after removing item from list

export type PropGetter = (index: number) => string;

export interface IDecreaseErrorsIndexParams extends IDecreaseErrorsIndexBaseParams {
    errorInfo: IErrorInfo | null | undefined;
}

export interface IDecreaseErrorsIndexBaseParams {
    totalItemsCount: number;
    fromIndex: number;
    propGetter: PropGetter | PropGetter[];
}

export function decreasePropertyErrorsIndex({ errorInfo, totalItemsCount, fromIndex, propGetter }: IDecreaseErrorsIndexParams) {
    if (errorInfo && errorInfo.propertyErrors && fromIndex >= 0) {
        const propGetters = b.isArray(propGetter) ? propGetter : [propGetter];
        // clear start index
        for (const propGetter of propGetters) {
            delete errorInfo.propertyErrors[propGetter(fromIndex)];
        }
        // move other indexes
        for (let i = fromIndex + 1; i < totalItemsCount + 1; i++) {
            for (const propGetter of propGetters) {
                moveErrorProperty(errorInfo, propGetter(i), propGetter(i - 1));
            }
        }
    }
}

function moveErrorProperty(errorInfo: IErrorInfo, prop: string, newProp: string) {
    if (errorInfo.propertyErrors && errorInfo.propertyErrors.hasOwnProperty(prop)) {
        errorInfo.propertyErrors[newProp] = errorInfo.propertyErrors[prop];
        delete errorInfo.propertyErrors[prop];
    }
}
