import * as b from "bobril";
import * as mixins from "bobwai--style-mixins";

export let create = b.createComponent<IData>({
    id: "bobwai--l-center",
    render(ctx: IContext, me: b.IBobrilNode): void {
        let child = b.styledDiv(getHorizontalResetContent(ctx.data), getHorizontalStyles(ctx.data));
        if (ctx.data.verticalCenterType === VerticalCenterType.Center) {
            let isChildAsBlock =
                ctx.data.childrenDisplayType === undefined ||
                ctx.data.childrenDisplayType === null ||
                ctx.data.childrenDisplayType === ChildrenDisplayType.Block;
            let parentHeight = ctx.data.height || "100%";
            me.children = mixins.centerVerticalRuntimeEx(
                [child],
                isChildAsBlock,
                parentHeight,
                { height: ctx.data.height || "100%" },
                getHorizontalStyles(ctx.data)
            );
        } else {
            me.children = child;
        }
        b.style(me, baseStyle);
    }
});

export interface IData {
    children: b.IBobrilChildren;
    height?: number | string;
    horizontalCenterType?: HorizontalCenterType;
    verticalCenterType?: VerticalCenterType;
    childrenDisplayType?: ChildrenDisplayType;
}

export enum ChildrenDisplayType {
    Block,
    InlineBlock
}

export enum VerticalCenterType {
    Center
}

export enum HorizontalCenterType {
    Left,
    Center,
    Right
}

interface IContext extends b.IBobrilCtx {
    data: IData;
}

function getHorizontalStyles(data: IData): b.IBobrilStyles {
    return [
        data.horizontalCenterType === HorizontalCenterType.Center && horizontalCenterStyle,
        data.horizontalCenterType === HorizontalCenterType.Left && horizontalLeftStyle,
        data.horizontalCenterType === HorizontalCenterType.Right && horizontalRightStyle
    ];
}

function getHorizontalResetContent(data: IData): b.IBobrilChildren {
    if (data.horizontalCenterType && data.childrenDisplayType === ChildrenDisplayType.InlineBlock) {
        return b.styledDiv(data.children, horizontalLeftStyle, { display: "inline-block" });
    }
    return data.children;
}

const baseStyle = b.styleDef(
    {
        height: "100%"
    },
    {},
    "l-center"
);

const horizontalCenterStyle = b.styleDef(
    {
        textAlign: "center"
    },
    {},
    "l-center-horizontal-center"
);

const horizontalLeftStyle = b.styleDef(
    {
        textAlign: "left"
    },
    {},
    "l-center-horizontal-left"
);

const horizontalRightStyle = b.styleDef(
    {
        textAlign: "right"
    },
    {},
    "l-center-horizontal-right"
);

// added by script - BEGIN
export const LCenter = create;
// added by script - END
