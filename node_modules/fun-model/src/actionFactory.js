"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var s = require("./store");
var d = require("./debug");
var h = require("./helpers");
var stateChanged = null;
var exceptionHandling;
exports.bootstrap = function (onStateChanged, withExceptionHandling) {
    if (withExceptionHandling === void 0) { withExceptionHandling = false; }
    stateChanged = onStateChanged;
    queueOfHandlers = [];
    exceptionHandling = withExceptionHandling;
    d.log('Action factory has been initialized.');
};
var renderCallbackMustBeSetBefore = 'Render callback must be set before first usage through bootstrap(defaultState, () => { yourRenderCallback(); }).';
exports.createAction = function (cursor, handler) {
    return function (params) {
        if (stateChanged === null)
            throw renderCallbackMustBeSetBefore;
        if (changeStateWithQueue(unifyCursor(cursor, params), function (state) { return handler(state, params); })) {
            stateChanged();
            d.log('Rendering invoked...');
        }
    };
};
exports.createReplaceAction = function (cursor) {
    return exports.createAction(cursor, function (_state, params) { return params; });
};
exports.createParamLessAction = function (cursor, handler) {
    return function () {
        if (stateChanged === null)
            throw renderCallbackMustBeSetBefore;
        if (changeStateWithQueue(unifyCursor(cursor, null), handler)) {
            stateChanged();
            d.log('Rendering invoked...');
        }
    };
};
function unifyCursor(cursor, params) {
    return cursor.create instanceof Function
        ? cursor.create(params)
        : (s.isCursorFunction(cursor) ? cursor() : cursor);
}
exports.createActions = function () {
    var pairs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        pairs[_i] = arguments[_i];
    }
    return function (params) {
        if (stateChanged === null)
            throw renderCallbackMustBeSetBefore;
        var changed = false;
        var _loop_1 = function () {
            if (pairs.hasOwnProperty(i)) {
                var pair_1 = pairs[i];
                if (changeStateWithQueue(pair_1.cursor, function (state) { return pair_1.handler(state, params); }))
                    changed = true;
            }
        };
        for (var i in pairs) {
            _loop_1();
        }
        changed && stateChanged();
    };
};
exports.createParamLessActions = function () {
    var pairs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        pairs[_i] = arguments[_i];
    }
    return function () {
        if (stateChanged === null)
            throw renderCallbackMustBeSetBefore;
        var changed = false;
        for (var i in pairs)
            if (pairs.hasOwnProperty(i)) {
                var pair = pairs[i];
                if (changeStateWithQueue(pair.cursor, pair.handler))
                    changed = true;
            }
        changed && stateChanged();
    };
};
var queueOfHandlers = [];
function changeStateWithQueue(cursor, handler) {
    queueOfHandlers.push({ cursor: cursor, handler: handler });
    if (queueOfHandlers.length > 1)
        return false;
    var isStateChanged = false;
    while (queueOfHandlers.length > 0) {
        var n = queueOfHandlers[0];
        if (h.isFunction(exceptionHandling) ? exceptionHandling() : exceptionHandling)
            try {
                isStateChanged = changeState(n.cursor, n.handler) || isStateChanged;
            }
            catch (error) {
                d.log('Error in action handling: ', error);
            }
        else
            isStateChanged = changeState(n.cursor, n.handler) || isStateChanged;
        queueOfHandlers.shift();
    }
    isStateChanged && d.log('Global state has been changed.');
    return isStateChanged;
}
function changeState(cursor, handler) {
    var oldState = s.getState(cursor);
    var newState = handler(oldState);
    if (oldState === newState)
        return false;
    s.setState(cursor, newState);
    return true;
}
//# sourceMappingURL=actionFactory.js.map