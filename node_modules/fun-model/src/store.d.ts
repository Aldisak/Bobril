export interface IState {
}
export declare type CursorType<TState extends IState> = (() => ICursor<TState>) | ICursor<TState>;
export declare function createNestedCursor<TState extends IState, TNestedState extends IState>(cursor: CursorType<TState>, nestedStateKey: string): CursorType<TNestedState>;
export declare function createNestedCursorFactory<TRootState extends IState, TNestedState extends IState>(key: string): (cursor: CursorType<TRootState>) => CursorType<TNestedState>;
export declare function isCursorFunction<TState extends IState>(cursor: CursorType<TState>): cursor is () => ICursor<TState>;
export interface ICursor<TState> {
    key: string;
    isUndefinable?: boolean;
    _?: TState;
}
export interface ICursorFactory<TState, TParms> {
    create(data: TParms): ICursor<TState>;
}
export declare const rootCursor: ICursor<IState>;
export declare const bootstrap: (defaultState: IState | null, withStateFreezing?: boolean | (() => boolean), subStateSeparator?: string) => void;
export declare const isExistingCursor: <TState>(cursor: CursorType<TState>) => boolean;
export declare const getState: <TState>(cursor: CursorType<TState>) => TState;
export declare const setState: <TState>(cursor: CursorType<TState>, updatedState: TState, canCreateObjectsOnPath?: boolean) => void;
