import * as s from './store';
export declare const bootstrap: (onStateChanged: (() => void) | null, withExceptionHandling?: boolean | (() => boolean)) => void;
export interface IAction<T> {
    (param: T): void;
}
export interface IParamLessAction {
    (): void;
}
export declare type IActionHandler<TState, TParams> = (state: TState, t: TParams) => TState;
export declare type IParamLessActionHandler<TState> = (state: TState) => TState;
export declare const createAction: <TState, TParams>(cursor: s.ICursor<TState> | (() => s.ICursor<TState>) | s.ICursorFactory<TState, TParams>, handler: IActionHandler<TState, TParams>) => IAction<TParams>;
export declare const createReplaceAction: <TState>(cursor: s.ICursor<TState> | (() => s.ICursor<TState>) | s.ICursorFactory<TState, TState>) => IAction<TState>;
export declare const createParamLessAction: <TState>(cursor: s.ICursor<TState> | (() => s.ICursor<TState>) | s.ICursorFactory<TState, TState>, handler: IParamLessActionHandler<TState>) => IParamLessAction;
export interface IPair<TState, TParam> {
    cursor: s.ICursor<TState>;
    handler: (state: TState, t: TParam) => TState;
}
export declare const createActions: <TState, TParams>(...pairs: IPair<TState, TParams>[]) => IAction<TParams>;
export interface IParamLessPair<TState> {
    cursor: s.ICursor<TState>;
    handler: (state: TState) => TState;
}
export declare const createParamLessActions: <TState>(...pairs: IParamLessPair<TState>[]) => IParamLessAction;
