"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var h = require("./helpers");
var d = require("./debug");
function createNestedCursor(cursor, nestedStateKey) {
    if (isCursorFunction(cursor))
        return function () { return { key: cursor().key + stateSeparator + nestedStateKey }; };
    else
        return { key: cursor.key + stateSeparator + nestedStateKey };
}
exports.createNestedCursor = createNestedCursor;
function createNestedCursorFactory(key) {
    return function (cursor) { return createNestedCursor(cursor, key); };
}
exports.createNestedCursorFactory = createNestedCursorFactory;
function isCursorFunction(cursor) {
    return typeof cursor == "function";
}
exports.isCursorFunction = isCursorFunction;
var state = null;
var stateSeparator = '.';
var freezing = false;
var rootStateKey = '';
exports.rootCursor = {
    key: rootStateKey
};
exports.bootstrap = function (defaultState, withStateFreezing, subStateSeparator) {
    if (withStateFreezing === void 0) { withStateFreezing = false; }
    if (subStateSeparator === void 0) { subStateSeparator = '.'; }
    stateSeparator = subStateSeparator;
    state = defaultState;
    freezing = withStateFreezing;
};
exports.isExistingCursor = function (cursor) {
    cursor = isCursorFunction(cursor) ? cursor() : cursor;
    var hasExistingInnerStateInArray = function (innerState, path) {
        var index = Number(path.shift());
        return index < innerState.length
            ? hasExistingInnerState(innerState[index], path)
            : false;
    };
    var hasExistingInnerState = function (innerState, path) {
        if (path.length === 0)
            return true;
        var subPath = path.shift();
        if (!subPath)
            return true;
        if (innerState[subPath] === undefined)
            return false;
        var prop = innerState[subPath];
        return Array.isArray(prop)
            ? hasExistingInnerStateInArray(prop, path)
            : hasExistingInnerState(prop, path);
    };
    if (!isSetDefaultState(state) || !isValidCursorKey(cursor))
        throw 'Invalid operation.';
    return cursor.key === rootStateKey
        ? true
        : hasExistingInnerState(state, cursor.key.split(stateSeparator));
};
exports.getState = function (cursor) {
    var cursorValue = isCursorFunction(cursor) ? cursor() : cursor;
    var getInnerState = function (innerState, path) {
        if (path.length === 0)
            return innerState;
        var subPath = path.shift();
        if (!subPath)
            return innerState;
        checkSubstate(innerState, subPath, path, cursorValue);
        var prop = innerState[subPath];
        return Array.isArray(prop) && path.length > 0
            ? getInnerState(prop[Number(path.shift())], path)
            : getInnerState(prop, path);
    };
    if (!isSetDefaultState(state) || !isValidCursorKey(cursorValue))
        throw 'Invalid operation.';
    return (cursorValue.key === rootStateKey
        ? state
        : getInnerState(state, cursorValue.key.split(stateSeparator)));
};
exports.setState = function (cursor, updatedState, canCreateObjectsOnPath) {
    if (canCreateObjectsOnPath === void 0) { canCreateObjectsOnPath = false; }
    var cursorValue = isCursorFunction(cursor) ? cursor() : cursor;
    var setInnerState = function (innerState, path) {
        if (path.length === 0)
            return updatedState;
        var subPath = path.shift();
        if (!subPath)
            return updatedState;
        if (canCreateObjectsOnPath)
            createSubstate(innerState, subPath);
        else
            checkSubstate(innerState, subPath, path, cursorValue);
        var prop = innerState[subPath];
        var newSubState = null;
        if (Array.isArray(prop) && path.length > 0) {
            var index = Number(path.shift());
            newSubState = prop.slice();
            newSubState[index] = setInnerState(newSubState[index], path);
        }
        else
            newSubState = setInnerState(prop, path);
        if (newSubState === prop)
            return innerState;
        var newState = h.shallowCopy(innerState);
        newState[subPath] = newSubState;
        return newState;
    };
    if (!isSetDefaultState(state) || !isValidCursorKey(cursorValue))
        throw 'Invalid operation.';
    state =
        cursorValue.key === rootStateKey
            ? updatedState
            : setInnerState(state, cursorValue.key.split(stateSeparator));
    if (h.isFunction(freezing) ? freezing() : freezing)
        h.deepFreeze(state);
    d.log('Current state:', state);
};
function checkSubstate(s, subPath, remainingPath, cursor) {
    if (remainingPath.length === 0 && cursor.isUndefinable)
        return;
    if (s[subPath] === undefined)
        throw "State for cursor key (" + cursor.key + ") does not exist.";
}
function createSubstate(s, subPath) {
    if (s[subPath] === undefined)
        s[subPath] = {};
}
function isSetDefaultState(state) {
    if (state === null)
        throw 'Default state must be set before first usage through bootstrap(defaultState, () => { yourRenderCallback(); }).';
    return true;
}
function isValidCursorKey(cursor) {
    if (cursor.key === null)
        throw 'Cursor key cannot be null.';
    return true;
}
//# sourceMappingURL=store.js.map