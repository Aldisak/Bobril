import * as b from "bobril";
import * as font from "bobwai--font";
import * as g from "bobril-g11n";
import * as ColorModifier from "bobwai-debug--color-modifier";
import * as LDebuggerBox from "bobwai-debug--l-debugger-box";
import * as InfiniteRenderDetector from "bobwai-debug--infinite-render-detector";

export * from "./helpers";
/** TSX alternatives */
export { createControlPanel as ControlPanel } from "./helpers";
export { createField as ControlPanelField } from "./helpers";
export { createGroup as ControlPanelGroup } from "./helpers";
export { createComboEnum as ControlPanelComboEnum } from "./helpers";
export { createSeparator as ControlPanelSeparator } from "./helpers";
export * from "./panelHeaderHelper";
export * from "./colorPalette";
export * from "./mockArray";
export * from "./keyboardPanel";
export * from "./controlPanelGenerator/data";
export { createControlPanelContainer } from "./controlPanelGenerator/controlPanelContainer";

font.init();

const BobwaiExampleInfoEventName = "BobwaiExampleInfo";
const BobwaiExampleG11nInitName = "BobwaiExampleG11nInit";

export interface IExampleOptions {
    preferredHeight?: number;
    debug?: boolean;
    isToolbarHidden?: boolean;
}

export interface IExampleInit {
    g11nConfig?: g.IG11NConfig;
}

export const init = function (options: IExampleOptions, factory: () => {} | undefined | null) {
    initGlobalization().then(() => {
        b.injectCss("html, body { height: 100%; margin: 0; padding: 0 }");

        const paramDebug = getUrlParameter("debug");
        if (paramDebug !== undefined && paramDebug.length > 0) {
            options.debug = paramDebug === "1";
        }
        const paramToolbar = getUrlParameter("toolbar");
        if (paramToolbar !== undefined && paramToolbar.length > 0) {
            options.isToolbarHidden = paramToolbar !== "1";
        }
        const paramHeight = getUrlParameter("height");
        if (paramHeight !== undefined && paramHeight.length > 0) {
            options.preferredHeight = Number(paramHeight) || undefined;
        }

        if (options.debug) {
            b.init(() => {
                const debugFrame = b.styledDiv(getContent());
                debugFrame.style = {
                    height: options.preferredHeight && options.preferredHeight + "px",
                    overflow: "auto",
                    background: "pink",
                };
                return debugFrame;
            });
        } else {
            b.init(getContent);
        }

        // trigger example info event
        // http://caniuse.com/#feat=customevent
        const e = document.createEvent("CustomEvent");
        e.initCustomEvent(BobwaiExampleInfoEventName, true, true, options);
        document.dispatchEvent(e);
    });

    function getContent(): b.IBobrilChildren {
        b.useProvideContext("isExample", true);
        return [
            factory(),
            !options.isToolbarHidden &&
                LDebuggerBox.create({
                    content: [ColorModifier.create({}), InfiniteRenderDetector.create()],
                    isTopAligned: true,
                    minWidth: 0,
                }),
        ];
    }
};

function isCustomEvent(event: Event): event is CustomEvent {
    return "detail" in event;
}

// used on the place where events needs to be caught
export function addExampleInfoEventListener(d: Document, onEvent: (options: IExampleOptions) => void) {
    d.addEventListener(BobwaiExampleInfoEventName, (e: Event) => {
        if (isCustomEvent(e)) {
            onEvent(<IExampleOptions>e.detail);
        }
    });
}

// used on the place where events needs to be caught
export function addExampleG11nInitEventListener(d: Document, onEvent: (outInitOptions: IExampleInit) => void) {
    d.addEventListener(BobwaiExampleG11nInitName, (e: Event) => {
        if (isCustomEvent(e)) {
            onEvent(<IExampleInit>e.detail);
            e.preventDefault();
        }
    });
}

export namespace PreferredHeight {
    export const XSmall = 150;
    export const Small = 300;
    export const Medium = 600;
    export const Large = 900;
    export const XLarge = 1200;
}

function initGlobalization(): Promise<void> {
    return new Promise<void>((resolve) => {
        const e = document.createEvent("CustomEvent");
        const outInitOptions: IExampleInit = {};
        e.initCustomEvent(BobwaiExampleG11nInitName, true, true, outInitOptions);
        document.dispatchEvent(e);

        if (!outInitOptions.g11nConfig) {
            outInitOptions.g11nConfig = {
                defaultLocale: "en-us",
                pathToTranslation(locale: string): string {
                    return "./" + locale + ".js";
                },
            };
        }
        try {
            g.initGlobalization(outInitOptions.g11nConfig).then(resolve);
        } catch (e) {
            console.log("G11n init failed, probably already initialized");
            console.log(e);
            console.log('You are expected to remove g11n init, because "bobwai--example" is doing it for you');
            resolve();
        }
    });
}

function getUrlParameter(name: string): string {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    const regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    const results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}
