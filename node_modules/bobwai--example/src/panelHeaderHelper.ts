import * as b from "bobril";
import { createField, FieldType, createComboEnum, createGroup } from "./helpers";

export interface IMockPanelHeaderExampleSettings {
    comboboxFactory: (data: any) => b.IBobrilNode;
    checkboxFactory: (data: any) => b.IBobrilNode;
    spinnerFactory: (data: any) => b.IBobrilNode;
    textboxFactory: (data: any) => b.IBobrilNode;
    variantEnum: any;
}

export interface IMockPanelHeaderData {
    title: string;
    titleIcon?: b.IBobrilNode;
    subtitle?: string | IMockSubtitleTextPart[];
    actions?: b.IBobrilNode[];
    filterContent?: b.IBobrilNode;
    actionButtonsContent?: b.IBobrilNode;
    tabContent?: b.IBobrilNode;
    isDividerVisible?: boolean;
    variant?: any;
}

interface IMockSubtitleTextPart {
    text: string;
    isBold?: boolean;
}

export function createPanelHeaderExampleFields(params: {
    data: IMockPanelHeaderData;
    exampleSettings: IMockPanelHeaderExampleSettings;
}): b.IBobrilNode[] {
    const d = params.data;
    const exampleSettings = params.exampleSettings;

    return [
        createField({
            label: "Variant",
            customValueContent: createComboEnum({
                value: d.variant,
                comboboxFactory: exampleSettings.comboboxFactory,
                enum: exampleSettings.variantEnum,
                onChange: (v) => {
                    d.variant = v;
                    b.invalidate();
                },
            }),
        }),
        createField({
            fieldType: FieldType.Textbox,
            value: d.title,
            onChange: (v) => {
                d.title = v;
                b.invalidate();
            },
            label: "Title",
            fieldFactory: exampleSettings.textboxFactory,
        }),
        createGroup({
            name: "Subtitle",
            items: b.flatten([
                createField({
                    fieldType: FieldType.Checkbox,
                    value: !isIMockSubtitleTextPart(d.subtitle),
                    onChange: (v) => {
                        if (v) {
                            d.subtitle = "";
                        } else {
                            d.subtitle = [{ text: "Bold part", isBold: true }, { text: "Normal part" }];
                        }
                        b.invalidate();
                    },
                    label: "isText(check)/isTextParts",
                    fieldFactory: exampleSettings.checkboxFactory,
                }),
                (typeof d.subtitle === "string" || d.subtitle === undefined) &&
                    createField<string>({
                        fieldType: FieldType.Textbox,
                        value: <string>d.subtitle,
                        onChange: (v) => {
                            d.subtitle = v;
                            b.invalidate();
                        },
                        label: "Subtitle Text",
                        fieldFactory: exampleSettings.textboxFactory,
                    }),
                d.subtitle &&
                    isIMockSubtitleTextPart(d.subtitle) &&
                    createField({
                        fieldType: FieldType.Spinner,
                        value: d.subtitle.length,
                        onChange: (v) => {
                            if (isIMockSubtitleTextPart(d.subtitle)) {
                                if (v > d.subtitle.length) {
                                    d.subtitle.push({
                                        text: "Subtitle part" + v,
                                    });
                                }
                                if (v < d.subtitle.length) {
                                    d.subtitle.splice(d.subtitle.length - 1, 1);
                                }
                            }

                            b.invalidate();
                        },
                        label: "Text Part Test Count",
                        fieldFactory: exampleSettings.spinnerFactory,
                    }),
                d.subtitle &&
                    isIMockSubtitleTextPart(d.subtitle) &&
                    d.subtitle.map((textPart: IMockSubtitleTextPart, index) => {
                        return [
                            createField({
                                fieldType: FieldType.Checkbox,
                                value: textPart.isBold,
                                onChange: (v) => {
                                    textPart.isBold = v;
                                    b.invalidate();
                                },
                                label: `text part ${index} isBold`,
                                fieldFactory: exampleSettings.checkboxFactory,
                            }),
                            createField({
                                fieldType: FieldType.Textbox,
                                value: textPart.text,
                                onChange: (v) => {
                                    textPart.text = v;
                                    b.invalidate();
                                },
                                label: `text part ${index}`,
                                fieldFactory: exampleSettings.textboxFactory,
                            }),
                        ];
                    }),
            ]),
        }),

        createField({
            fieldType: FieldType.Checkbox,
            value: d.titleIcon !== undefined,
            onChange: (v) => {
                d.titleIcon = v ? getMockTitleIcon() : undefined;
                b.invalidate();
            },
            label: "TitleIcon",
            fieldFactory: exampleSettings.checkboxFactory,
        }),
        createField({
            fieldType: FieldType.Spinner,
            value: d.actions ? d.actions.length : 0,
            minValue: 0,
            maxValue: 10,
            onChange: (v) => {
                d.actions = getMockActions(v);
                b.invalidate();
            },
            label: "Actions",
            fieldFactory: exampleSettings.spinnerFactory,
        }),
        createField({
            fieldType: FieldType.Checkbox,
            value: d.filterContent !== undefined,
            minValue: 0,
            onChange: (v) => {
                d.filterContent = v ? getMockFilter() : undefined;
                b.invalidate();
            },
            label: "FilterContent",
            fieldFactory: exampleSettings.checkboxFactory,
        }),
        createField({
            fieldType: FieldType.Checkbox,
            value: d.actionButtonsContent !== undefined,
            minValue: 0,
            onChange: (v) => {
                d.actionButtonsContent = v ? getMockActionButtons() : undefined;
                b.invalidate();
            },
            label: "ActionButtonsContent",
            fieldFactory: exampleSettings.checkboxFactory,
        }),
        createField({
            fieldType: FieldType.Checkbox,
            value: d.tabContent !== undefined,
            minValue: 0,
            onChange: (v) => {
                d.tabContent = v ? getMockTabContent() : undefined;
                b.invalidate();
            },
            label: "TabContent",
            fieldFactory: exampleSettings.checkboxFactory,
        }),
        createField({
            fieldType: FieldType.Checkbox,
            value: d.isDividerVisible,
            minValue: 0,
            onChange: (v) => {
                d.isDividerVisible = v;
                b.invalidate();
            },
            label: "IsDividerVisible",
            fieldFactory: exampleSettings.checkboxFactory,
        }),
    ];
}

function isIMockSubtitleTextPart(v?: string | IMockSubtitleTextPart[]): v is IMockSubtitleTextPart[] {
    return b.isArray(v);
}

function getMockFilter(): b.IBobrilNode {
    return b.styledDiv("Filter content", exampleMockFilterContentStyle);
}

function getMockActionButtons(): b.IBobrilNode {
    return b.styledDiv("ActionButtons content", exampleMockActionButtonsContentStyle);
}

function getMockTitleIcon(): b.IBobrilNode {
    return b.styledDiv("", exampleMockIconStyle);
}

function getMockTabContent(): b.IBobrilNode {
    return b.styledDiv("Tab content", exampleMockTabContentStyle);
}

function getMockActions(actionsCount: number): b.IBobrilNode[] {
    if (!actionsCount) {
        return [];
    }
    return new Array(actionsCount)
        .join(",")
        .split(",")
        .map((_a, i) => {
            return b.styledDiv(`${i + 1}`, exampleMockActionContentStyle);
        });
}

const exampleMockIconStyle = b.styleDef({ height: 20, width: 20, display: "inline-block", background: "#1aff00", verticalAlign: "middle" });
const exampleMockTabContentStyle = b.styleDef({ background: "#d6ff00", height: 35, lineHeight: "35px" });
const exampleMockFilterContentStyle = b.styleDef({ background: "#00abff", height: 35, lineHeight: "35px" });
const exampleMockActionButtonsContentStyle = b.styleDef({ background: "#c1ffc4", height: 35, lineHeight: "35px" });
const exampleMockActionContentStyle = b.styleDef({
    height: 20,
    width: 20,
    background: "orange",
    display: "inline-block",
    fontSize: 13,
    verticalAlign: "middle",
    textAlign: "center",
    lineHeight: "20px",
});
