import * as b from "bobril";
import { IFieldParams } from "../helpers";

export interface ICodeGeneratorAdditionalSettings {
    /* property path from IData - e.g. label or customTheme.fontSize for structured objects */
    propertyPath: string;
    /** use if property is enum */
    enumSettings?: {
        /** For showing selected value */
        enum: any;
        /** E.g. 'Size' for Button.Size */
        enumPropertyName: string;
        /** For the case that enum is from another component e.g. validationState from bobwai--form-elements */
        exportedComponentName?: string;
    };
    /** If the property expects icon */
    shouldHaveIconAsContent?: boolean;

    /** If value type is string, automatically is wrapped via t from g11n
     * If you want not to use automatic wrap via, set this property to false
     */
    isStringValueTranslated?: boolean;

    /* e.g. 'Some text instead of property value - e.g. `// TODO add content`*/
    substituteValue?: string;
    /* Content is another component e.g. button as a content of action */
    component?: ICodeGeneratorComponentDefinition | ICodeGeneratorComponentDefinition[];
    /* Content is array objects, all object has same type */
    arrayOfSameObjects?: ICodeGeneratorObjectDefinition;
}

export interface ICodeGeneratorObjectDefinition {
    properties: ICodeGeneratorAdditionalSettings[];
}

export interface ICodeGeneratorComponentDefinition {
    properties: ICodeGeneratorAdditionalSettings[];
}

export enum FieldCategory {
    Appearance,
    Behavior,
    Content,
}

export interface IFieldsSettings<T> {
    fieldParam: IFieldParams<T>;
    fieldCategory: FieldCategory;
    /** Add additional settings for getting better source code via generator */
    codeGeneratorAdditionalSettings: ICodeGeneratorAdditionalSettings;
    /** Wheter field is available immediatelly or after 'showAdvancedProperty' applied */
    isAdvancedField?: boolean;
    /** Properties with same group will be automatically groupped */
    groupName?: string;
    /** Separator below property settings */
    hasSeparator?: boolean;
}

export interface IPredefinedConfigurations<T> {
    configurations: IPredefinedConfigurationItem<T>[];
    comboboxFactory: (data: any) => b.IBobrilNode;
    onConfigurationSelected: (data: T) => void;
}

export interface IPropertiesFilter {
    /** use bobwai--filter or bobwai--textbox */
    filterFactory: (data: any) => b.IBobrilNode;
}

export enum ControlPanelContentType {
    Component,
    Layout,
}

export interface IPredefinedConfigurationItem<T> {
    name: string;
    data: T;
}
