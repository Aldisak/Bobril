import * as b from "bobril";
import * as Button from "../button";
import { copyToClipboard, ContentProperty } from "./copyToClipboard";
import { createGroup, createControlPanel, createField, FieldParam, FieldType, ExampleGroupTheme, ControlPanelTheme, createSeparator } from "../helpers";
import { getCode, CodeType } from "./codeGenerator";
import { IControlPanelContext, ICodeGeneratorContext, IInternalCodeGeneratorAdditionalSettings } from "./contexts";
import { IFieldsSettings, FieldCategory, IPredefinedConfigurations, IPropertiesFilter, ControlPanelContentType } from "./data";
import { borderColor } from "./../localVariables";
import { activeButtonBackground, passiveButtonBackground } from "../localVariables";
import { getComponentNameCamelCase } from "./utils";

export function createControlPanelContainer<T>(params: {
    controlPanelItems: IFieldsSettings<any>[];
    content: b.IBobrilNode;
    data: T;
    fullComponentName: string;
    predefinedData?: IPredefinedConfigurations<T>;
    propertiesFilter?: IPropertiesFilter;
    contentType?: ControlPanelContentType;
}): b.IBobrilNode {
    const codeGeneratorSettings: IInternalCodeGeneratorAdditionalSettings[] = [];

    for (let i = 0; i < params.controlPanelItems.length; i++) {
        const item = params.controlPanelItems[i];

        const itemGeneratorSettings: IInternalCodeGeneratorAdditionalSettings = item.codeGeneratorAdditionalSettings;
        if (item.fieldParam.fieldType === FieldType.IColor) {
            itemGeneratorSettings.isIColor = true;
        }
        codeGeneratorSettings.push(itemGeneratorSettings);
    }

    return b.style({
        tag: "div",
        component: {
            init(ctx: ICodeGeneratorContext, _me: b.IBobrilNode) {
                ctx.isCodeVisible = true;
                ctx.selectedCodeType = CodeType.TSX;
            },
            render(ctx: ICodeGeneratorContext, me: b.IBobrilNode) {
                ctx.codeText = ctx.isCodeVisible
                    ? getCode({
                          ctx,
                          fullComponentName: params.fullComponentName,
                          componentName: getComponentNameCamelCase(params.fullComponentName),
                          data: params.data,
                          codeType: ctx.selectedCodeType,
                          substituteValues: codeGeneratorSettings,
                      })
                    : "";
                me.children = [
                    b.styledDiv(
                        [
                            b.styledDiv(
                                createControlPanel({
                                    items: [
                                        getPredefinedDataCombobox(ctx, params.predefinedData),
                                        getFilterIfNeeded({
                                            ctx,
                                            propertiesFilter: params.propertiesFilter,
                                            items: params.controlPanelItems,
                                        }),
                                        createCategoryFields({
                                            items: params.controlPanelItems,
                                            propertiesFilterValue: ctx.propertiesFilter,
                                        }),
                                    ],
                                    theme: ControlPanelTheme.Light,
                                }),
                                mockExampleContainerPanelStyle
                            ),
                            b.styledDiv(params.content, [mockExampleContainerContentStyle, params.contentType === ControlPanelContentType.Layout &&  mockExampleContainerForLayoutContentStyle]),
                        ],
                        mockExampleContainerStyle
                    ),
                    b.styledDiv(
                        [
                            b.styledDiv(
                                [
                                    Button.create({
                                        background: activeButtonBackground,
                                        label: ctx.isCodeVisible ? "Hide Code ▲" : "Show Code ▼",
                                        onClick: () => {
                                            ctx.isCodeVisible = !ctx.isCodeVisible;
                                            b.invalidate(ctx);
                                        },
                                    }),
                                    ctx.isCodeVisible &&
                                        b.styledDiv([
                                            Button.create({
                                                background:
                                                    ctx.selectedCodeType === CodeType.TSX
                                                        ? activeButtonBackground
                                                        : passiveButtonBackground,
                                                label: "TSX",
                                                onClick: () => {
                                                    ctx.selectedCodeType = CodeType.TSX;
                                                    b.invalidate(ctx);
                                                },
                                            }),
                                            Button.create({
                                                background:
                                                    ctx.selectedCodeType === CodeType.TS ? activeButtonBackground : passiveButtonBackground,
                                                label: "TS",
                                                onClick: () => {
                                                    ctx.selectedCodeType = CodeType.TS;
                                                    b.invalidate(ctx);
                                                },
                                            }),
                                            Button.create({
                                                background:
                                                    ctx.selectedCodeType === CodeType.IData
                                                        ? activeButtonBackground
                                                        : passiveButtonBackground,
                                                label: "IData",
                                                onClick: () => {
                                                    ctx.selectedCodeType = CodeType.IData;
                                                    b.invalidate(ctx);
                                                },
                                            }),
                                        ]),
                                    ctx.isCodeVisible &&
                                        Button.create({
                                            background: activeButtonBackground,
                                            label: "Copy code",
                                            onClick: () => {
                                                copyToClipboard(ctx.codeText, ContentProperty.innerText);
                                                b.invalidate(ctx);
                                            },
                                        }),
                                ],
                                mockExampleContainerHeaderStyle
                            ),
                            ctx.isCodeVisible && b.styledDiv(ctx.codeText, mockExampleContainerCodeContentStyle),
                        ],
                        mockExampleContainerCodeStyle
                    ),
                ];
            },
        },
    });
}

function getPredefinedDataCombobox<T>(
    ctx: ICodeGeneratorContext,
    predefinedData?: IPredefinedConfigurations<T>
): b.IBobrilNode | undefined {
    if (predefinedData && predefinedData.configurations && predefinedData.configurations.length) {
        const items: { label: string; value: any }[] = [];

        for (let i = 0; i < predefinedData.configurations.length; i++) {
            const configuration = predefinedData.configurations[i];
            items.push({ label: configuration.name, value: i });
        }

        return b.styledDiv([
            createField({
                customValueContent: predefinedData.comboboxFactory({
                    value: ctx.selectedPredefinedDataIndex,
                    items: items,
                    size: 1,
                    displayAs: 1,
                    onChange: (v: number) => {
                        ctx.selectedPredefinedDataIndex = v;
                        predefinedData.onConfigurationSelected(predefinedData.configurations[v].data);
                        b.invalidate(ctx);
                    },
                }),
                label: "Predefined configurations",
            }),
            b.styledDiv("", predefinedDataSeparatorStyle),
        ]);
    }
    return undefined;
}

function createFieldAndSetLabel<T extends FieldParam>(item: IFieldsSettings<T>, propertiesFilterValue?: string): b.IBobrilNode {
    const fieldParams = { ...item.fieldParam };
    if (!fieldParams.label) {
        fieldParams.label = getLabelFromPropertyName(item.codeGeneratorAdditionalSettings.propertyPath);
    }
    let isInFilterResults: boolean | undefined = propertiesFilterValue ? false : undefined;
    if (propertiesFilterValue) {
        isInFilterResults = fieldParams.label.toLocaleLowerCase().indexOf(propertiesFilterValue.toLocaleLowerCase()) > -1;
    }
   return  b.styledDiv([b.style(b.cloneNode(createField(fieldParams)), [
        isInFilterResults !== undefined && { visibility: isInFilterResults ? "visible" : "hidden" },
    ]), item.hasSeparator && createSeparator()]);
    
}

function getLabelFromPropertyName(propertyPath: string) {
    // label -> Label
    // label.property -> Property

    const pathParts = propertyPath.split(".");
    const lastPart = pathParts[pathParts.length - 1];
    return lastPart[0].toUpperCase() + lastPart.substr(1, lastPart.length);
}

function createCategoryFields<T extends FieldParam>(params: {
    items: IFieldsSettings<T>[];
    propertiesFilterValue?: string;
}): b.IBobrilNode {
    return b.style({
        tag: "div",
        component: {
            render(ctx: IControlPanelContext, me: b.IBobrilNode) {
                const appearanceCategory: b.IBobrilNode[] = [];
                const contentCategory: b.IBobrilNode[] = [];
                const behaviorCategory: b.IBobrilNode[] = [];
                const someAdvancedField: boolean = !!params.items.filter((x) => x.isAdvancedField).length;

                // create group - group will be created only if all items in group has same field category
                const groups: { [name: string]: IFieldsSettings<T>[] } = {};

                for (let i = 0; i < params.items.length; i++) {
                    const item = params.items[i];
                    if (!ctx.areAdvancedParametersVisible && item.isAdvancedField) {
                        continue;
                    }
                    if (item.groupName) {
                        if (!groups[item.groupName]) {
                            groups[item.groupName] = [];
                        }
                        groups[item.groupName].push(item);
                        continue;
                    }

                    switch (item.fieldCategory) {
                        case FieldCategory.Appearance:
                            appearanceCategory.push(createFieldAndSetLabel(item, params.propertiesFilterValue));
                            break;
                        case FieldCategory.Behavior:
                            behaviorCategory.push(createFieldAndSetLabel(item, params.propertiesFilterValue));
                            break;
                        case FieldCategory.Content:
                            contentCategory.push(createFieldAndSetLabel(item, params.propertiesFilterValue));
                            break;
                    }
                }

                // add groups
                for (const key in groups) {
                    const items = groups[key];
                    if (items.length) {
                        const groupName = items[0].groupName;
                        const groupFields = [];
                        const groupCategory = items[0].fieldCategory;
                        for (let i = 0; i < items.length; i++) {
                            const item = items[i];
                            groupFields.push(createFieldAndSetLabel(item, params.propertiesFilterValue));
                        }

                        const group = createGroup({
                            name: groupName!,
                            theme: ExampleGroupTheme.Dark,
                            items: groupFields,
                        });

                        switch (groupCategory) {
                            case FieldCategory.Appearance:
                                appearanceCategory.push(group);
                                break;
                            case FieldCategory.Behavior:
                                behaviorCategory.push(group);
                                break;
                            case FieldCategory.Content:
                                contentCategory.push(group);
                                break;
                        }
                    }
                }

                me.children = b.flatten([
                    !!contentCategory.length &&
                        createGroup({
                            name: "Content",
                            items: contentCategory,
                        }),
                    !!appearanceCategory.length &&
                        createGroup({
                            name: "Appearance",
                            items: [...appearanceCategory],
                        }),
                    !!behaviorCategory.length &&
                        createGroup({
                            name: "Behavior",
                            items: behaviorCategory,
                        }),
                    !!(someAdvancedField && !ctx.areAdvancedParametersVisible) &&
                        b.styledDiv(
                            Button.create({
                                label: "Show advanced parameter",
                                background: activeButtonBackground,
                                onClick: () => {
                                    ctx.areAdvancedParametersVisible = !ctx.areAdvancedParametersVisible;
                                    b.invalidate(ctx);
                                },
                            }),
                            controlPanelMoreParametersStyle
                        ),
                ]);
            },
        },
    });
}

function getFilterIfNeeded<T>(params: {
    ctx: ICodeGeneratorContext;
    propertiesFilter?: IPropertiesFilter;
    items: IFieldsSettings<T>[];
}): b.IBobrilNode | undefined {
    if (params.propertiesFilter) {
        return b.styledDiv([
            createField({
                customValueContent: params.propertiesFilter.filterFactory({
                    value: params.ctx.propertiesFilter,
                    size: 1,
                    onChange: (v: string) => {
                        params.ctx.propertiesFilter = v;
                        b.invalidate(params.ctx);
                    },
                }),
                label: "Properties name filter",
            }),
            //  b.styledDiv("", predefinedDataSeparatorStyle)
        ]);
    }
    return undefined;
}

const mockExampleContainerStyle = b.styleDef({
    background: "white",
    display: "flex",
});
const mockExampleContainerPanelStyle = b.styleDef({
    border: `1px solid ${borderColor}`,
});
const mockExampleContainerCodeStyle = b.styleDef({
    border: `1px solid ${borderColor}`,
    borderTop: "none",
    background: "#ECEBE9",
});
const mockExampleContainerContentStyle = b.styleDef({
    alignItems: "center",
    justifyContent: "center",
    width: "100%",
    display: "flex",
    border: `1px solid ${borderColor}`,
    borderLeft: "none",
});

const mockExampleContainerForLayoutContentStyle = b.styleDefEx(mockExampleContainerContentStyle, {
    display: 'block'
})

const mockExampleContainerHeaderStyle = b.styleDef({
    display: "flex",
    justifyContent: "space-between",
    borderBottom: `1px solid ${borderColor}`,
    padding: 5,
});

const mockExampleContainerCodeContentStyle = b.styleDef({
    padding: 25,
    fontFamily: "monospace",
    fontSize: 14,
    whiteSpace: `pre-wrap`,
    fontWeight: 600,
});

const controlPanelMoreParametersStyle = b.styleDef({
    textAlign: "center",
    paddingTop: 5,
});

const predefinedDataSeparatorStyle = b.styleDef({
    height: 1,
    background: "#ece9e9",
    marginTop: 4,
    marginLeft: -20,
    marginRight: -20,
});
