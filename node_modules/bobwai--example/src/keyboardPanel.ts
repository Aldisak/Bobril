import * as b from "bobril";

export enum KeyCode {
    ArrowDown = 40,
    ArrowLeft = 37,
    ArrowRight = 39,
    ArrowUp = 38,
    Enter = 13,
    End = 35,
    Escape = 27,
    Home = 36,
    PageUp = 33,
    PageDown = 34,
    Space = 32,
    Delete = 46,
    A = 65,
}

export enum ControlKey {
    Ctrl = 1024,
    Alt = 2048,
    Shift = 4096,
}

export interface IKey {
    /** Use KeyCode from helpers--key-code component */
    /** If more keys do same thing - use array */
    keyCode: number | number[];
    description: string;
    controlKey?: ControlKey;
    isDisabled?: boolean;
}

export function getKeyboardControlPanel(fields: IKey[]): b.IBobrilNode {
    return b.styledDiv(
        fields.map((k) => {
            let keySymbol;
            let controlSymbol;
            if (b.isArray(k.keyCode)) {
                keySymbol = k.keyCode.map((key) => {
                    return b.styledDiv(createKey(key), mockKeysItem);
                });
            } else {
                keySymbol = createKey(k.keyCode);
            }

            if (k.controlKey) {
                controlSymbol = createKey(k.controlKey);
            }

            return b.styledDiv(
                [
                    controlSymbol && b.styledDiv(controlSymbol, mockControlSymbolStyle),
                    keySymbol,
                    b.styledDiv(k.description, mockKeyDescriptionStyle),
                ],
                [mockKeyField, k.isDisabled && mockKeyFieldDisabled]
            );
        })
    );
}

function createKey(key: number): b.IBobrilNode {
    const keysWithLabels: number[] = [KeyCode.Space, KeyCode.Escape, ControlKey.Alt, ControlKey.Ctrl, ControlKey.Shift];
    return b.style(
        {
            tag: "div",
            attrs: { title: KeyCode[key] },
            children: getKeySymbol(key),
        },
        [
            mockKeyStyle,
            key === KeyCode.Space && mockSpaceKeyStyle,
            key === KeyCode.Enter && mockEnterKeyStyle,
            key === KeyCode.Delete && mockDeleteKeyStyle,
            (key === ControlKey.Alt || key === ControlKey.Ctrl || key === ControlKey.Shift) && mockControlKey,
            keysWithLabels.indexOf(key) > -1 && mockSpaceKeyWithLabel,
        ]
    );
}

function getKeySymbol(key: number): b.IBobrilChild {
    switch (key) {
        case KeyCode.ArrowDown:
            return "⇩";
        case KeyCode.ArrowUp:
            return "⇧";
        case KeyCode.ArrowLeft:
            return "⇦";
        case KeyCode.ArrowRight:
            return "⇨";
        case KeyCode.ArrowRight:
            return "⇨";
        case KeyCode.Home:
            return getKeyLabelAndSymbol("Home", "⇤");
        case KeyCode.End:
            return getKeyLabelAndSymbol("End", "⇥");
        case KeyCode.PageDown:
            return getKeyLabelAndSymbol("Page Down", "▼", true);
        case KeyCode.PageUp:
            return getKeyLabelAndSymbol("Page Up", "▲", true);
        case KeyCode.Space:
            return "Space";
        case KeyCode.Escape:
            return "Esc";
        case KeyCode.Enter:
            return "↵";
        case KeyCode.A:
            return "A";
        case KeyCode.Delete:
            return "Delete";
        case ControlKey.Ctrl:
            return "Ctrl";
        case ControlKey.Alt:
            return "Alt";
        case ControlKey.Shift:
            return "Shift";
    }
    return "";
}

function getKeyLabelAndSymbol(label: string, symbol: string, isMultiline?: boolean): b.IBobrilNode {
    return b.styledDiv(
        [
            b.styledDiv(label, [mockKeyLabel, isMultiline && mockKeyLabelMultiline]),
            b.styledDiv(symbol, [mockKeyLabelIcon, isMultiline && mockKeyMultilineLabelIcon]),
        ],
        mockKeyLabelAndIcon
    );
}

const mockKeyField = b.styleDef({
    marginBottom: 5,
});

const mockKeyFieldDisabled = b.styleDef({
    opacity: 0.4,
});

const mockKeyLabelAndIcon = b.styleDef({
    fontSize: 0,
    lineHeight: "normal",
});

const mockControlSymbolStyle = b.styleDef(
    {
        display: "inline-block",
    },
    {
        after: {
            content: `" + "`,
            fontSize: 20,
            lineHeight: "30px",
            marginLeft: 5,
            marginRight: 5,
            display: "inline-block",
            verticalAlign: "middle",
        },
    }
);

const mockKeyStyle = b.styleDef({
    display: "inline-block",
    lineHeight: `26px`,
    fontSize: 18,
    color: "#827676",
    width: 30,
    height: 30,
    fontWeight: "bold",
    textAlign: "center",
    borderRadius: 2,
    border: "1px solid #827676",
    cursor: "default",
    boxShadow: "#c5c5c5 1px 1px 3px 2px",
    verticalAlign: "middle",
    boxSizing: "border-box",
});

const mockKeysItem = b.styleDef({ display: "inline-block", marginRight: 7 });

const mockSpaceKeyStyle = b.styleDefEx(mockKeyStyle, {
    height: 18,
    width: 60,
    lineHeight: "16px",
    marginLeft: -30,
    marginBottom: 6,
    marginTop: 6,
});
const mockEnterKeyStyle = b.styleDefEx(mockKeyStyle, {
    height: 35,
    lineHeight: "35px",
});

const mockSpaceKeyWithLabel = b.styleDefEx(mockKeyStyle, {
    fontSize: 11,
});

const mockDeleteKeyStyle = b.styleDefEx(mockKeyStyle, {
    fontSize: 8,
});

const mockControlKey = b.styleDefEx(mockKeyStyle, {
    width: 35,
    height: 25,
    lineHeight: "23px",
});

const mockKeyDescriptionStyle = b.styleDef(
    {
        display: "inline-block",
        verticalAlign: "middle",
        paddingLeft: 10,
    },
    { before: { content: `"- "` } }
);

const mockKeyLabel = b.styleDef({
    display: "inline-block",
    lineHeight: "17px",
    fontSize: 9,
});

const mockKeyLabelMultiline = b.styleDefEx(mockKeyLabel, {
    lineHeight: "9px",
    marginBottom: 1,
});

const mockKeyLabelIcon = b.styleDef({
    display: "inline-block",
    lineHeight: "7px",
    fontSize: 15,
});

const mockKeyMultilineLabelIcon = b.styleDefEx(mockKeyLabelIcon, {
    fontSize: 12,
});
