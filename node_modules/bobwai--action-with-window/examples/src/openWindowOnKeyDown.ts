import * as b from "bobril";
import * as ActionWithWindow from "../../src/lib";
import * as Helpers from "./helpers";
import * as Container from "bobwai--viewer-container";
import * as Checkbox from "bobwai--checkbox";
import * as Example from "bobwai--example";
import * as Textbox from "bobwai--textbox";
import { IBobrilNode } from "bobril";

let commandKeyCodes: ActionWithWindow.KeyCode[] | undefined;
let closeWindowOnEsc: boolean | undefined;
let useFocusLocker: boolean | undefined;
let focusContentOnInit: boolean | undefined;
let focusActionAfterWindowClosed: boolean | undefined;

export default function (): IBobrilNode[] {
    return [
        Container.create({
            header: " keyboardSettings",
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            labelWidth: 200,
                            fieldType: Example.FieldType.Checkbox,
                            fieldFactory: Checkbox.create,
                            label: "closeWindowOnEsc",
                            value: closeWindowOnEsc,
                            onChange: (v) => {
                                closeWindowOnEsc = v;
                                b.invalidate();
                            },
                            note: "Make sense when there is some focusable element inside the window content",
                        }),
                        Example.createField({
                            labelWidth: 200,
                            fieldType: Example.FieldType.Checkbox,
                            fieldFactory: Checkbox.create,
                            label: "useFocusLocker",
                            value: useFocusLocker,
                            onChange: (v) => {
                                useFocusLocker = v;
                                if (!v) {
                                    focusContentOnInit = undefined;
                                }
                                b.invalidate();
                            },
                            note: "Holding the focus inside the window when the focus is changing via keyboard",
                        }),
                        Example.createGroup({
                            name: "FocusLockerAdditionalSettings",
                            items: [
                                Example.createField({
                                    labelWidth: 200,
                                    fieldType: Example.FieldType.Checkbox,
                                    fieldFactory: Checkbox.create,
                                    label: "focusContentOnInit",
                                    value: focusContentOnInit !== undefined ? focusContentOnInit : useFocusLocker,
                                    isDisabled: !useFocusLocker,
                                    onChange: (v) => {
                                        focusContentOnInit = v;
                                        b.invalidate();
                                    },
                                    note: "True by default",
                                }),
                            ],
                        }),

                        Example.createField({
                            labelWidth: 200,
                            fieldType: Example.FieldType.Checkbox,
                            fieldFactory: Checkbox.create,
                            label: "focusActionAfterWindowClosed",
                            value: focusActionAfterWindowClosed,
                            onChange: (v) => {
                                focusActionAfterWindowClosed = v;
                                b.invalidate();
                            },
                        }),
                        Example.createSeparator(),
                        Example.createField({
                            fieldType: Example.FieldType.Note,
                            label: "Note",
                            value:
                                "In automatic mode (without isWindowVisible) key down events (ENTER by default or onOpenWindowCommandKeyCodes) are used for open the window - YOU HAVE TO BE SURE THAT action content component DOES NOT BLOCK key event into parent",
                        }),
                        Example.createField({
                            fieldType: Example.FieldType.Note,
                            label: "Note",
                            value:
                                "In manual mode (with isWindowVisible) key down events are not observer, for opening the window is responsible the action content component",
                        }),
                        Example.createGroup({
                            name: "openWindowCommandKeyCodes test",
                            items: [
                                Example.createField({
                                    fieldType: Example.FieldType.Checkbox,
                                    fieldFactory: Checkbox.create,
                                    label: "Enter (by default)",
                                    isDisabled: commandKeyCodes === undefined,
                                    value:
                                        !!(commandKeyCodes && commandKeyCodes.indexOf(ActionWithWindow.KeyCode.Enter) > -1) ||
                                        commandKeyCodes === undefined,
                                    onChange: (v) => {
                                        addOrRemoveKeyCode(v, ActionWithWindow.KeyCode.Enter);
                                    },
                                    note:
                                        "If onOpenWindowCommandKeyCodes is not set -> Enter is set by default, if onOpenWindowCommandKeyCodes is not set and needs Enter -> it has to be added manually into array!",
                                }),
                                Example.createField({
                                    fieldType: Example.FieldType.Checkbox,
                                    fieldFactory: Checkbox.create,
                                    label: "Space",
                                    value: !!(commandKeyCodes && commandKeyCodes.indexOf(ActionWithWindow.KeyCode.Space) > -1),

                                    onChange: (v) => {
                                        addOrRemoveKeyCode(v, ActionWithWindow.KeyCode.Space);
                                    },
                                }),
                                Example.createField({
                                    fieldType: Example.FieldType.Checkbox,
                                    fieldFactory: Checkbox.create,
                                    label: "Arrow down",
                                    value: !!(commandKeyCodes && commandKeyCodes.indexOf(ActionWithWindow.KeyCode.ArrowDown) > -1),
                                    onChange: (v) => {
                                        addOrRemoveKeyCode(v, ActionWithWindow.KeyCode.ArrowDown);
                                    },
                                }),
                            ],
                        }),
                    ],
                }),
                b.styledDiv(
                    ActionWithWindow.create({
                        actionContent: Helpers.getButton(false, undefined),
                        windowContent: Helpers.getWindow([
                            Textbox.create({ value: "Text 1", onChange: (_v) => {} }),
                            Textbox.create({ value: "Text 2", onChange: (_v) => {} }),
                            Textbox.create({ value: "Text 3", onChange: (_v) => {} }),
                            Textbox.create({ value: "Text 4", onChange: (_v) => {} }),
                        ]),
                        keyboardSettings: {
                            useFocusLocker: focusContentOnInit !== undefined ? { focusContentOnInit } : useFocusLocker,
                            closeWindowOnEsc,
                            openWindowCommandKeyCodes: commandKeyCodes,
                            focusActionAfterWindowClosed,
                        },
                    })
                ),
            ],
            highlightedDescription:
                "There is never focus on action content! Getting focus is always responsibility of the action content component!",
        }),
    ];
}

function addOrRemoveKeyCode(value: boolean, keyCode: ActionWithWindow.KeyCode): void {
    if (value) {
        if (!commandKeyCodes) {
            commandKeyCodes = [];
        }
        commandKeyCodes.push(keyCode);
    } else {
        if (commandKeyCodes) {
            const index = commandKeyCodes.indexOf(keyCode);
            if (index > -1) {
                commandKeyCodes.splice(index, 1);
            }
        }
    }
    b.invalidate();
}
