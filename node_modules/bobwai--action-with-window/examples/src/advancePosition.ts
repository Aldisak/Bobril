import * as b from "bobril";
import * as ActionWithWindow from "../../src/lib";
import * as Helpers from "./helpers";
import * as RadioBtn from "bobwai--radio-button";
import * as Container from "bobwai--viewer-container";
import * as ComboBox from "bobwai--combobox";
import * as Checkbox from "bobwai--checkbox";
import * as TextBox from "bobwai--textbox";

let positionMode = ActionWithWindow.PositioningMode.TopBottom;
let arrowType = ActionWithWindow.ArrowType.Default;
let hoverToOpenWindow: boolean = true;
let hasArrow: boolean = true;
let hasShadow: boolean = true;
let hasBorder: boolean = true;
let hasAnimation: boolean = false;
let verticalOffsetValue: number;
let horizontalOffsetValue: number;
let hasDefaultCursor: boolean = false;

let actualPreferredPlacement: ActionWithWindow.Placement = ActionWithWindow.Placement.Left;
let actualSecondaryPreferredPlacement: ActionWithWindow.Placement | undefined;

let leftCenter = false;
let rightCenter = false;
let topCenter = false;
let topLeft = false;
let topRight = false;
let bottomCenter = false;
let bottomLeft = false;
let bottomRight = false;

let secondaryUndefined = true;
let secondaryLeftCenter = false;
let secondaryRightCenter = false;
let secondaryTopCenter = false;
let secondaryTopLeft = false;
let secondaryTopRight = false;
let secondaryBottomCenter = false;
let secondaryBottomLeft = false;
let secondaryBottomRight = false;

const containerStyle = b.styleDef({
    background: "#fff",
    height: 250,
    position: "relative",
});

const radioButtonsContainer = b.styleDef({
    clear: "both",
    marginBottom: 20,
    marginTop: 20,
    overflow: "hidden",
});

export default function () {
    return Container.create({
        header: "Window with advance position",
        content: [
            Helpers.createGroupField([
                Helpers.createField(
                    ComboBox.create({
                        value: arrowType,
                        items: [
                            { label: "Default", value: ActionWithWindow.ArrowType.Default },
                            { label: "ContentWithoutHeader", value: ActionWithWindow.ArrowType.ContentWithoutHeader },
                        ],
                        onChange: (value: ActionWithWindow.ArrowType) => {
                            arrowType = value;
                            b.invalidate();
                        },
                    }),
                    "Arrow Type"
                ),

                Helpers.createField(
                    ComboBox.create({
                        value: positionMode,
                        items: [
                            { label: "TopBottom (Default)", value: ActionWithWindow.PositioningMode.TopBottom },
                            { label: "All", value: ActionWithWindow.PositioningMode.All },
                        ],
                        onChange: (value: ActionWithWindow.PositioningMode) => {
                            positionMode = value;
                            b.invalidate();
                        },
                    }),
                    "Position mode"
                ),

                Helpers.createField(
                    TextBox.create({
                        value: verticalOffsetValue ? verticalOffsetValue.toString() : undefined,
                        placeholder: "Enter vertical offset value",
                        onChange: (value: string) => {
                            if (value) {
                                verticalOffsetValue = parseInt(value, 10);
                            }

                            b.invalidate();
                        },
                    }),
                    "Vertical offset",
                    Helpers.windowSizeDefault
                ),

                Helpers.createField(
                    TextBox.create({
                        value: horizontalOffsetValue ? horizontalOffsetValue.toString() : undefined,
                        placeholder: "Enter horizontal offset value",
                        onChange: (value: string) => {
                            if (value) {
                                horizontalOffsetValue = parseInt(value, 10);
                            }

                            b.invalidate();
                        },
                    }),
                    "Horizontal offset",
                    Helpers.windowSizeDefault
                ),
                Helpers.createField(
                    Checkbox.create({
                        value: hoverToOpenWindow,
                        title: "Hover to open window",
                        onChange: (value: boolean) => {
                            hoverToOpenWindow = value;
                            b.invalidate();
                        },
                    })
                ),
                Helpers.createField(
                    Checkbox.create({
                        value: hasAnimation,
                        title: "has Animation",
                        onChange: (value: boolean) => {
                            hasAnimation = value;
                            b.invalidate();
                        },
                    })
                ),

                Helpers.createField(
                    Checkbox.create({
                        value: hasArrow,
                        title: "Has arrow",
                        onChange: (value: boolean) => {
                            hasArrow = value;
                            b.invalidate();
                        },
                    })
                ),

                Helpers.createField(
                    Checkbox.create({
                        value: hasShadow,
                        title: "Has shadow",
                        onChange: (value: boolean) => {
                            hasShadow = value;
                            b.invalidate();
                        },
                    })
                ),

                Helpers.createField(
                    Checkbox.create({
                        value: hasBorder,
                        title: "Has border",
                        onChange: (value: boolean) => {
                            hasBorder = value;
                            b.invalidate();
                        },
                    })
                ),
                Helpers.createField(
                    Checkbox.create({
                        value: hasDefaultCursor,
                        title: "Has action default cursor",
                        onChange: (value: boolean) => {
                            hasDefaultCursor = value;
                            b.invalidate();
                        },
                    })
                ),
            ]),

            getRadioButtons(),

            b.styledDiv(
                [
                    getActionWithWindow(0, 0, "auto", "auto"),
                    getActionWithWindow("auto", 0, 0, "auto"),
                    getActionWithWindow("auto", "auto", 0, 0),
                    getActionWithWindow(0, "auto", "auto", 0),
                    getActionWithWindow("50%", "50%", "auto", "auto"),
                ],
                containerStyle
            ),
        ],
        description: "Click green button to toggle overlay window.",
    });
}

function getActionWithWindow(
    _left: number | string,
    top: number | string,
    _right: number | string,
    bottom: number | string
): b.IBobrilNode {
    return b.styledDiv(
        ActionWithWindow.create({
            actionContent: Helpers.getButton(),
            windowContent: Helpers.getWindowWithHeader({
                withoutHeader: arrowType === ActionWithWindow.ArrowType.ContentWithoutHeader,
            }),
            positioningMode: positionMode,
            preferredPlacement: actualPreferredPlacement,
            secondaryPreferredPlacement: actualSecondaryPreferredPlacement,
            verticalOffset: verticalOffsetValue,
            horizontalOffset: horizontalOffsetValue,
            hasArrow: hasArrow,
            hasShadow: hasShadow,
            hasBorder: hasBorder,
            hasAnimation: hasAnimation,
            activationType: hoverToOpenWindow ? ActionWithWindow.ActivationType.Hover : ActionWithWindow.ActivationType.Default,
            arrowType: arrowType,
            hasActionDefaultCursor: hasDefaultCursor,
        }),
        {
            display: "inline-block",
            left: _left,
            top: top,
            right: _right,
            bottom: bottom,
            position: "absolute",
        }
    );
}

function getRadioButtons() {
    return b.styledDiv(
        [
            b.styledDiv(
                [
                    /*
                     * PREFERRED PLACEMENT
                     */
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Preferred placement - Left (works only if position mode is set to all)",
                        value: leftCenter,
                        isDisabled: positionMode === ActionWithWindow.PositioningMode.TopBottom,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualPreferredPlacement = ActionWithWindow.Placement.Left;
                            }
                            leftCenter = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Preferred placement - Right (works only if position mode is set to all)",
                        isDisabled: positionMode === ActionWithWindow.PositioningMode.TopBottom,
                        value: rightCenter,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualPreferredPlacement = ActionWithWindow.Placement.Right;
                            }
                            rightCenter = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Preferred placement - Top Center",
                        value: topCenter,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualPreferredPlacement = ActionWithWindow.Placement.TopCenter;
                            }
                            topCenter = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Preferred placement - Top Left",
                        value: topLeft,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualPreferredPlacement = ActionWithWindow.Placement.TopLeft;
                            }
                            topLeft = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Preferred placement - Top Right",
                        value: topRight,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualPreferredPlacement = ActionWithWindow.Placement.TopRight;
                            }
                            topRight = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Preferred placement - Bottom Center (DEFAULT)",
                        value: bottomCenter,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualPreferredPlacement = ActionWithWindow.Placement.BottomCenter;
                            }
                            bottomCenter = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Preferred placement - Bottom Left",
                        value: bottomLeft,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualPreferredPlacement = ActionWithWindow.Placement.BottomLeft;
                            }
                            bottomLeft = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "placement",
                        label: "Preferred placement - Bottom Right",
                        value: bottomRight,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualPreferredPlacement = ActionWithWindow.Placement.BottomRight;
                            }
                            bottomRight = value;
                            b.invalidate();
                        },
                    }),

                    { tag: "br" },

                    /*
                     * SECONDARY PREFERRED PLACEMENT
                     */
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary preferred placement - not defined (DEFAULT)",
                        value: secondaryUndefined,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualSecondaryPreferredPlacement = undefined;
                            }
                            secondaryUndefined = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary preferred placement - Left (works only if position mode is set to all)",
                        isDisabled: positionMode === ActionWithWindow.PositioningMode.TopBottom,
                        value: secondaryLeftCenter,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualSecondaryPreferredPlacement = ActionWithWindow.Placement.Left;
                            }
                            secondaryLeftCenter = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary preferred placement - Right (works only if position mode is set to all)",
                        isDisabled: positionMode === ActionWithWindow.PositioningMode.TopBottom,
                        value: secondaryRightCenter,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualSecondaryPreferredPlacement = ActionWithWindow.Placement.Right;
                            }
                            secondaryRightCenter = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary preferred placement - Top Center",
                        value: secondaryTopCenter,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualSecondaryPreferredPlacement = ActionWithWindow.Placement.TopCenter;
                            }
                            secondaryTopCenter = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary preferred placement - Top Left",
                        value: secondaryTopLeft,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualSecondaryPreferredPlacement = ActionWithWindow.Placement.TopLeft;
                            }
                            secondaryTopLeft = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary preferred placement - Top Right",
                        value: secondaryTopRight,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualSecondaryPreferredPlacement = ActionWithWindow.Placement.TopRight;
                            }
                            secondaryTopRight = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary preferred placement - Bottom Center",
                        value: secondaryBottomCenter,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualSecondaryPreferredPlacement = ActionWithWindow.Placement.BottomCenter;
                            }
                            secondaryBottomCenter = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary preferred placement - Bottom Left",
                        value: secondaryBottomLeft,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualSecondaryPreferredPlacement = ActionWithWindow.Placement.BottomLeft;
                            }
                            secondaryBottomLeft = value;
                            b.invalidate();
                        },
                    }),
                    RadioBtn.create({
                        groupName: "secondary placement",
                        label: "Secondary preferred placement - Bottom Right",
                        value: secondaryBottomRight,
                        onChange: (value: boolean) => {
                            if (value) {
                                actualSecondaryPreferredPlacement = ActionWithWindow.Placement.BottomRight;
                            }
                            secondaryBottomRight = value;
                            b.invalidate();
                        },
                    }),
                ],
                { cssFloat: "left" }
            ),
        ],
        radioButtonsContainer
    );
}
