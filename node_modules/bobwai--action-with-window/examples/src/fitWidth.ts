import * as b from "bobril";
import * as ActionWithWindow from "../../src/lib";
import * as Helpers from "./helpers";
import * as Example from "bobwai--example";
import * as Textbox from "bobwai--textbox";
import * as Spinner from "bobwai--spinner";
import * as Checkbox from "bobwai--checkbox";
import * as Container from "bobwai--viewer-container";
import { IBobrilNode } from "bobril";

let actionContentText = "Some longer action button";
let windowContentText = "Win content";
let isFitWidth: boolean | undefined;
let hasInnerComponentLongText: boolean | undefined;
let isFitMinWidth: boolean | undefined;
let customToggleWindowWidth: number | undefined;

export default function (): IBobrilNode {
    return Container.create({
        header: "Fit Width, minFitWidth, customToggleWindowWidth",
        content: [
            Example.createControlPanel({
                items: [
                    Example.createField({
                        fieldFactory: Checkbox.create,
                        fieldType: Example.FieldType.Checkbox,
                        value: isFitWidth,
                        onChange: (v) => {
                            isFitWidth = v;
                            b.invalidate();
                        },
                        label: "isFitWidth",
                        note:
                            "Window has at least the same width as content (button) - but it can wrap inline elements in the window content!",
                    }),
                    Example.createField({
                        fieldFactory: Checkbox.create,
                        fieldType: Example.FieldType.Checkbox,
                        value: isFitMinWidth,
                        onChange: (v) => {
                            isFitMinWidth = v;
                            b.invalidate();
                        },
                        label: "isFitMinWidth",
                        note: "Window min width according content (button). It does not wrap inline items inside window into more lines!",
                    }),
                    Example.createField({
                        fieldFactory: Spinner.create,
                        fieldType: Example.FieldType.Spinner,
                        value: customToggleWindowWidth,
                        onChange: (v) => {
                            customToggleWindowWidth = v;
                            b.invalidate();
                        },
                        label: "customToggleWindowWidth",
                    }),
                    Example.createSeparator(),
                    Example.createField({
                        fieldFactory: Textbox.create,
                        fieldType: Example.FieldType.Textbox,
                        value: actionContentText,
                        onChange: (v) => {
                            actionContentText = v;
                            b.invalidate();
                        },
                        label: "Button text",
                    }),
                    Example.createField({
                        fieldFactory: Textbox.create,
                        fieldType: Example.FieldType.Textbox,
                        value: windowContentText,
                        onChange: (v) => {
                            windowContentText = v;
                            b.invalidate();
                        },
                        label: "Window content",
                    }),
                ],
            }),

            b.styledDiv(
                ActionWithWindow.create({
                    actionContent: Helpers.getButton(true, undefined, undefined, actionContentText),
                    windowContent: Helpers.getWindow(
                        [
                            windowContentText,
                            b.style(
                                {
                                    tag: "div",
                                    component: {
                                        onClick: () => {
                                            hasInnerComponentLongText = !hasInnerComponentLongText;
                                            b.invalidate();
                                        },
                                    },
                                    children: b.styledDiv(
                                        hasInnerComponentLongText
                                            ? "There is longer text, and if fit width is active - this inline element is wrapped into more lines!! Remove isFitWidth or set isFitMinWidth to solve this issue."
                                            : "Click here!!!",
                                        { cursor: "pointer" }
                                    ),
                                },
                                { width: "100%", background: "pink" }
                            ),
                        ],
                        true
                    ),
                    isFitWidth,
                    isFitMinWidth,
                    customToggleWindowWidth,
                })
            ),
        ],
        description: "Click green button to toggle overlay window.",
    });
}
