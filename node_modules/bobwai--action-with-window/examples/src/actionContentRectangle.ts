import * as ActionWithWindow from "../../src/lib";
import * as b from "bobril";
import * as Helpers from "./helpers";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as Combobox from "bobwai--combobox";
import * as Button from "bobwai--button";
import { IBobrilNode } from "bobril";

const htmlElements: HTMLElement[] = [];
let isWindowVisible: boolean = false;
let preferredPlacement: ActionWithWindow.Placement | undefined;
let rectangleIndex: number = 0;

export default function (): IBobrilNode[] {
    return [
        Container.create({
            isTest: true,
            header:
                "Action content is rectangle (IRect) - for special cases where popups above several elements are solved at one place in code (for example in AdvancedFilter)",
            description:
                "If action content is IRect no action content is rendered, rectangle is used only for getting information about position. Note that using of IRect " +
                "gives you freedom so it is not needed to have any specific element on specific coordinates.",
            content: [
                getControlPanel(),
                getOpenWindowButton(),
                b.styledDiv("", mockSeparatorStyle),
                getMockHTMLElement(),
                b.styledDiv("", mockSeparatorStyle),
                htmlElements.length > 0 && isWindowVisible && getActionWithWindow(),
            ],
        }),
    ];
}

function getControlPanel(): b.IBobrilNode {
    return Example.createControlPanel({
        items: [
            Example.createField({
                customValueContent: Example.createComboEnum({
                    comboboxFactory: Combobox.create,
                    enum: mockElementColors,
                    onChange: (v) => {
                        rectangleIndex = v;
                        b.invalidate();
                    },
                    value: rectangleIndex,
                }),
                label: "Action content rectangle",
            }),
            Example.createField({
                customValueContent: Example.createComboEnum({
                    comboboxFactory: Combobox.create,
                    enum: ActionWithWindow.Placement,
                    onChange: (v) => {
                        preferredPlacement = v;
                        b.invalidate();
                    },
                    value: preferredPlacement,
                }),
                label: "PreferredPlacement",
            }),
        ],
    });
}

function getOpenWindowButton(): b.IBobrilNode {
    return Button.create({
        label: "Open window",
        isDisabled: isWindowVisible,
        onClick: () => {
            isWindowVisible = true;
            b.invalidate();
        },
    });
}

function getMockHTMLElement(): b.IBobrilNode {
    const elements = mockElementColors.map((col: string, i: number) =>
        b.style(
            {
                tag: "span",
                component: {
                    postInitDom(_ctx: b.IBobrilCtx, _me: b.IBobrilCacheNode, element: HTMLElement) {
                        htmlElements[i] = element;
                        b.invalidate();
                    },
                },
            },
            mockElementStyles[i],
            {
                background: col,
            }
        )
    );

    return b.styledDiv(elements, mockCenterStyle);
}

function getActionWithWindow(): b.IBobrilNode {
    const activeRect = htmlElements[rectangleIndex].getBoundingClientRect();
    return ActionWithWindow.create({
        isVirtual: true,
        positioningMode: ActionWithWindow.PositioningMode.All,
        isWindowVisible: isWindowVisible,
        onCloseWindow: () => {
            isWindowVisible = false;
            b.invalidate();
        },
        actionContent: activeRect,
        windowContent: Helpers.getWindow(`ActionContent rectangle : ${JSON.stringify(activeRect).replace(/[{},]/g, " ")}`),
        maxWindowHeight: Helpers.windowSizeDefault,
        preferredPlacement: preferredPlacement,
    });
}

const mockSeparatorStyle = b.styleDef({
    height: 200,
});

const mockElementColors = ["cyan", "magenta", "yellow"];

const mockElementStyles = [
    b.styleDef({ height: 20, width: 20, display: "inline-block", marginRight: 150 }),
    b.styleDef({ height: 20, width: 20, display: "inline-block" }),
    b.styleDef({ height: 20, width: 20, display: "inline-block", marginLeft: 150 }),
];

const mockCenterStyle = b.styleDef({ textAlign: "center" });
