import * as b from "bobril";
import * as Color from "bobwai--color";
import * as LField from "bobwai--l-field";
import * as LFieldGroup from "bobwai--l-field-group";
import * as FormElements from "bobwai--form-elements";

const buttonWidthDefault = 100;
const buttonHeightDefault = 22;
export const windowSizeDefault = 200;
const windowPadding = 20;
const windowTitleHeight = 10;
const defaultWindowContentColor = "yellow";

export function createVerticalSpace() {
    return b.styledDiv("", {
        width: windowSizeDefault,
        height: 22,
        display: "inline-block",
    });
}

export function createHorizontalSpace() {
    return b.styledDiv("", {
        width: windowSizeDefault,
        height: 300,
        display: "inline-block",
    });
}

export function createField(content: b.IBobrilNode, labelContent?: string, valueWidth?: number): b.IBobrilNode {
    return LField.create({
        labelContent: labelContent,
        labelWidth: FormElements.LabelWidth.Label200,
        valueContent: content,
        valueContentWidth: valueWidth,
    });
}

export function createGroupField(content: b.IBobrilChildren[]): b.IBobrilNode {
    return LFieldGroup.create({
        children: content,
        displayAs: FormElements.DisplayAs.Block,
        hasMarginTop: true,
    });
}

export function getButton(isFullWidth?: boolean, width?: number, height?: number, label?: string) {
    let buttonWidth: number | undefined = width || buttonWidthDefault;
    if (isFullWidth) {
        buttonWidth = undefined;
    }
    const buttonHeight: number | undefined = height || buttonHeightDefault;

    return b.style(
        {
            tag: "div",
            attrs: { tabindex: 0 },
            children: b.styledDiv(
                label || "Open window",

                { fontWeight: "bold", color: "#ffffff", display: "inline-block" }
            ),
        },
        {
            minWidth: buttonWidth,
            height: buttonHeight,
            lineHeight: buttonHeight + "px",
            textAlign: "center",
            paddingTop: 7,
            paddingBottom: 5,
            paddingLeft: 13,
            paddingRight: 13,
            display: isFullWidth ? "block" : "inline-block",
            background: Color.Application(),
            fontSize: 13,
        }
    );
}

export function getWindowWithHeader(data: {
    content?: b.IBobrilChildren;
    autoWidth?: boolean;
    width?: number;
    height?: number;
    withoutHeader?: boolean;
}) {
    return [
        !data.withoutHeader &&
            b.styledDiv(b.styledDiv("Title", { color: Color.White, fontWeight: 600 }), {
                paddingTop: windowPadding,
                paddingBottom: windowPadding,
                paddingLeft: windowPadding,
                paddingRight: windowPadding,
                height: windowTitleHeight,
                background: Color.Basic(),
                width: data.autoWidth ? undefined : data.width || windowSizeDefault,
            }),

        b.styledDiv(data.content || "This is overlay window", {
            paddingTop: windowPadding,
            paddingBottom: windowPadding,
            paddingLeft: windowPadding,
            paddingRight: windowPadding,
            height: data.height || windowSizeDefault,
            width: data.autoWidth ? undefined : data.width || windowSizeDefault,
            background: Color.White,
        }),
    ];
}

export function getWindow(content?: b.IBobrilChildren, autoWidth?: boolean, width?: number, height?: number) {
    return b.styledDiv(content || "This is overlay window", {
        paddingTop: windowPadding,
        paddingBottom: windowPadding,
        paddingLeft: windowPadding,
        paddingRight: windowPadding,
        width: autoWidth ? undefined : width || windowSizeDefault,
        height: height || windowSizeDefault,
        background: defaultWindowContentColor,
    });
}
