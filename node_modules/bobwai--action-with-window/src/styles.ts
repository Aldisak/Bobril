import * as b from "bobril";
import * as Color from "bobwai--color";
import * as Mixins from "bobwai--style-mixins";
import * as Constants from "./publicConstants";

export const minMarginLeftRight = 10;
export const arrowSize = 8;
export const borderSize = 1;
const defaultBoxShadow = `0px 1px 3px 0px ${Color.Black_20}`;
export const upperSideShadow = `0px -1px 3px 0px ${Color.Black_20}`;

export const arrowPadding = 12;
const arrowPosition = -(arrowSize / 2);
const arrowBoxShadow = `-1px 1px 1px 0px ${Color.Black_20}`;

export const actionWithWindowStyle = b.styleDef({
    display: "inline-block",
});

export const clickableStyle = b.styleDef(Mixins.getClickableElement());

export const actionDefaultCursorStyle = b.styleDefEx(actionWithWindowStyle, {
    cursor: "default",
});

export const actionWithWindowZeroFontSizeStyle = b.styleDefEx(actionWithWindowStyle, {
    fontSize: 0,
});

export const actionWithWindowBlockStyle = b.styleDefEx(actionWithWindowStyle, {
    display: "block",
});

export const actionWithWindowMiddleStyle = b.styleDefEx(actionWithWindowStyle, {
    verticalAlign: "middle",
});

export const toggleWindowStyle = b.styleDef({
    position: "absolute",
    display: "inline-block",
});

export const toggleWindowFixedStyle = b.styleDefEx(toggleWindowStyle, {
    position: "fixed",
});

export const toggleWindowMaxWidthStyle = b.styleDef({
    maxWidth: `calc(100% - ${2 * minMarginLeftRight}px)`,
});

export const toggleWindowWithDefaultShadowStyle = b.styleDef({
    boxShadow: defaultBoxShadow,
});

export const toggleWindowWithBorderStyle = b.styleDef({
    borderWidth: borderSize,
    borderStyle: "solid",
    borderColor: Color.Grey400,
});

export const toggleWindowWithScrollbarStyle = b.styleDefEx(toggleWindowStyle, {
    overflow: "auto",
    overflowX: "hidden",
});

export const toggleWindowWithOverflowHiddenStyle = b.styleDefEx(toggleWindowStyle, {
    overflow: "hidden",
});

export const arrowBaseStyle = b.styleDef(
    {
        position: "relative",
    },
    {
        before: {
            content: "",
            position: "absolute",
            width: arrowSize,
            height: arrowSize,
            backgroundColor: Color.White,
        },
    }
);

export const arrowDownStyle = b.styleDefEx(
    arrowBaseStyle,
    {},
    {
        before: {
            bottom: arrowPosition,
            transform: "rotate(-45deg)",
        },
    }
);

export const arrowWithShadowStyle = b.styleDefEx(
    arrowBaseStyle,
    {},
    {
        before: {
            boxShadow: arrowBoxShadow,
        },
    }
);

export const arrowDownCenterStyle = b.styleDefEx(
    arrowDownStyle,
    {},
    {
        before: {
            left: "50%",
            marginLeft: arrowPosition,
        },
    }
);

export const arrowDownRightStyle = b.styleDefEx(
    arrowDownStyle,
    {},
    {
        before: {
            right: arrowPadding,
        },
    }
);

export const arrowDownLeftStyle = b.styleDefEx(
    arrowDownStyle,
    {},
    {
        before: {
            left: arrowPadding,
        },
    }
);

export const arrowUpStyle = b.styleDefEx(
    arrowBaseStyle,
    {},
    {
        before: {
            top: arrowPosition,
            transform: "rotate(-225deg)",
        },
    }
);

export const arrowUpCenterStyle = b.styleDefEx(
    arrowUpStyle,
    {},
    {
        before: {
            left: "50%",
            marginLeft: arrowPosition,
        },
    }
);

export const arrowUpLeftStyle = b.styleDefEx(
    arrowUpStyle,
    {},
    {
        before: {
            left: arrowPadding,
        },
    }
);

export const arrowUpRightStyle = b.styleDefEx(
    arrowUpStyle,
    {},
    {
        before: {
            right: arrowPadding,
        },
    }
);

export const arrowRightStyle = b.styleDefEx(
    arrowBaseStyle,
    {},
    {
        before: {
            right: arrowPosition,
            transform: "rotate(225deg)",
        },
    }
);

export const arrowRightCenterStyle = b.styleDefEx(
    arrowRightStyle,
    {},
    {
        before: {
            top: `calc(50% + ${borderSize}px)`,
            marginTop: arrowPosition - borderSize,
        },
    }
);

export const arrowLeftStyle = b.styleDefEx(
    arrowBaseStyle,
    {},
    {
        before: {
            left: arrowPosition,
            transform: "rotate(45deg)",
        },
    }
);

export const arrowLeftCenterStyle = b.styleDefEx(
    arrowLeftStyle,
    {},
    {
        before: {
            top: `calc(50% + ${borderSize}px)`,
            marginTop: arrowPosition - borderSize,
        },
    }
);

export const arrowWithHeaderStyle = b.styleDefEx(
    arrowBaseStyle,
    {},
    {
        before: {
            backgroundColor: Constants.ArrowUpColor,
        },
    }
);

export const actionContentMaxWidthStyle = b.styleDef({ maxWidth: "100%" });

export const visibilityHiddenStyle = b.styleDef({ opacity: 0, pointerEvents: "none" });

/** we can't use display:none, because we need real position of element to detect element scroll */
export const actionWithWindowRectangleTypeStyle = b.styleDef({ display: "block", width: 0, height: 0 });
