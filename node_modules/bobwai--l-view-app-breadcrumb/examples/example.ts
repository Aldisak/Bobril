import * as b from "bobril";
import * as LViewAppBreadcrumb from "../src/lib";
import * as Color from "bobwai--color";
import * as Example from "bobwai--example";
import * as Breadcrumb from "bobwai--breadcrumb";
import * as LViewAppHeader from "bobwai--l-view-app-header";
import * as CheckBox from "bobwai--checkbox";
import * as LApp from "bobwai--l-app";
import * as Container from "bobwai--viewer-container";
import * as Spinner from "bobwai--spinner";

let onClick = () => {
    alert("The BreadCrumb item has been clicked");
};

let contentPadding: number = LViewAppBreadcrumb.ContentPadding();
let contentPaddingSmall: number = LViewAppBreadcrumb.ContentPaddingSmall();

let isCombinedWithAppHeader: boolean = true;
let paddingSize: LViewAppBreadcrumb.PaddingSize;

let breadcrumbItems: Breadcrumb.IData = {
    items: [
        <Breadcrumb.IBreadcrumbItem>{
            title: "Page level 1",
            onClick: onClick
        },
        <Breadcrumb.IBreadcrumbItem>{
            title: "Page level 2",
            onClick: onClick
        }
    ]
};

Example.init({}, () => {
    return [
        LApp.create({
            children: [
                LViewAppBreadcrumb.create({
                    children: Breadcrumb.create(breadcrumbItems),
                    isCombinedWithAppHeader: isCombinedWithAppHeader,
                    paddingSize: paddingSize
                }),
                isCombinedWithAppHeader &&
                    b.withKey(
                        LViewAppHeader.create({
                            children: b.styledDiv("(space reserved for header)", {
                                color: "gray",
                                paddingTop: 14,
                                paddingLeft: 22,
                                fontStyle: "italic",
                                height: "100%"
                            })
                        }),
                        "key"
                    ),
                b.styledDiv(
                    CheckBox.create({
                        value: isCombinedWithAppHeader,
                        title: "Combined with app header",
                        onChange: (value: boolean) => {
                            isCombinedWithAppHeader = value;
                            b.invalidate();
                        }
                    }),
                    {
                        position: "fixed",
                        top: 100
                    }
                ),
                b.styledDiv(
                    CheckBox.create({
                        value: paddingSize === LViewAppBreadcrumb.PaddingSize.Small,
                        title: "Small padding variant",
                        onChange: (value: boolean) => {
                            paddingSize = value ? LViewAppBreadcrumb.PaddingSize.Small : LViewAppBreadcrumb.PaddingSize.Default;
                            b.invalidate();
                        }
                    }),
                    {
                        position: "fixed",
                        top: 130
                    }
                )
            ]
        }),
        Container.create({
            isForConstantOverride: true,
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField<number>({
                            fieldFactory: Spinner.create,
                            label: "ContentPadding",
                            labelWidth: 200,
                            value: contentPadding,
                            onChange: (v: number) => {
                                contentPadding = v;
                                LViewAppBreadcrumb.setContentPadding(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.Spinner
                        }),
                        Example.createField<number>({
                            fieldFactory: Spinner.create,
                            label: "ContentPaddingSmall",
                            labelWidth: 200,
                            value: contentPaddingSmall,
                            onChange: (v: number) => {
                                contentPaddingSmall = v;
                                LViewAppBreadcrumb.setContentPaddingSmall(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.Spinner
                        }),
                        Example.createField<Color.IColor>({
                            label: "BorderColor",
                            labelWidth: 200,
                            onChange: (v: Color.IColor) => {
                                LViewAppBreadcrumb.setBorderColor(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.IColor
                        })
                    ]
                })
            ]
        })
    ];
});
