import * as b from "bobril";
import * as assets from "./../assets";
import * as MockColor from "./color";

const warningIcon = b.sprite(assets.warning_small_png, MockColor.warningColor);
const errorIcon = b.sprite(assets.error_small_png, MockColor.errorColor);
const infoIcon = b.sprite(assets.info_small_png, MockColor.infoColor);

interface IData {
    message: string;
    type: Type;
}

interface IContext extends b.IBobrilCtx {
    data: IData;
}

export enum Type {
    Error,
    Warning,
    Info
}

export let create = b.createComponent<IData>({
    id: "bobwai--",
    render(ctx: IContext, me: b.IBobrilNode) {
        me.children = [getIcon(ctx.data.type), b.styledDiv(ctx.data.message, viewerContainerMessageTextStyle)];
        b.style(me, [
            viewerContainerMessageStyle,
            ctx.data.type === Type.Warning && viewerContainerMessageWarningStyle,
            ctx.data.type === Type.Error && viewerContainerMessageErrorStyle,
            ctx.data.type === Type.Info && viewerContainerMessageInfoStyle
        ]);
    }
});

const viewerContainerMessageStyle = b.styleDef({
    fontSize: 13,
    minHeight: 20,
    lineHeight: "19px",
    paddingRight: 5,
    display: "inline-block",
    paddingBottom: 3,
    verticalAlign: "middle"
});

const viewerContainerMessageTextStyle = b.styleDef({
    verticalAlign: "middle",
    display: "inline-block",
    marginLeft: 10
});

const viewerContainerMessageErrorStyle = b.styleDef({
    color: MockColor.errorColor
});

const viewerContainerMessageWarningStyle = b.styleDef({
    color: MockColor.warningColor
});

const viewerContainerMessageInfoStyle = b.styleDef({
    color: MockColor.infoColor
});

function getIcon(type: Type): b.IBobrilNode {
    switch (type) {
        case Type.Error:
            return createIcon(errorIcon);

        case Type.Warning:
            return createIcon(warningIcon);

        case Type.Info:
            return createIcon(infoIcon);
    }
}

function createIcon(iconStyle: string): b.IBobrilNode {
    return b.styledDiv("", [iconStyle, viewerContainerMessageIconStyle]);
}

const viewerContainerMessageIconStyle = b.styleDef({
    display: "inline-block",
    fontSize: 0,
    verticalAlign: "middle"
});
