import * as b from "bobril";
import * as MockColor from "./color";

interface IData {
    content?: string;
    isBolder?: boolean;
    validationState?: ValidationState;
}

interface IContext extends b.IBobrilCtx {
    data: IData;
}

export enum ValidationState {
    Default,
    Error
}

export let create = b.createComponent<IData>({
    render(ctx: IContext, me: b.IBobrilNode) {
        me.children = ctx.data.content;
        b.style(me, [
            viewerContainerLabelStyle,
            ctx.data.isBolder && viewerContainerLabelBoldStyle,
            ctx.data.validationState === ValidationState.Error && viewerContainerLabelErrorStyle
        ]);
    }
});

const viewerContainerLabelStyle = b.styleDef({
    fontSize: 13,
    fontWeight: 400,
    lineHeight: "19px",
    color: "#aeaeae"
});

const viewerContainerLabelBoldStyle = b.styleDefEx(viewerContainerLabelStyle, {
    fontWeight: 600
});

const viewerContainerLabelErrorStyle = b.styleDefEx(viewerContainerLabelStyle, {
    color: MockColor.errorColor,
    fontWeight: "bold"
});
