import * as b from "bobril";
import * as assets from "./../assets";
import * as MockColor from "./color";

interface IData {
    text: string;
    param?: string;
    url?: string;
    shouldOpenInNewWindow?: boolean;
    isPermalink?: boolean;
}

interface IContext extends b.IBobrilCtx {
    data: IData;
}

const linkIcon = b.sprite(assets.permalink_png, MockColor.permalinkColor);

export let create = b.createComponent<IData>({
    id: "bobwai--viever-container-link",
    render(ctx: IContext, me: b.IBobrilNode) {
        me.tag = "a";
        me.children = ctx.data.text || getIcon();
        me.attrs = { href: getUrl(ctx.data), target: ctx.data.shouldOpenInNewWindow ? "_blank" : undefined };
        b.style(me, ctx.data.isPermalink ? permalinkStyle : linkStyle);
    }
});

function getIcon() {
    return b.styledDiv("", [linkIcon, { display: "inline-block" }]);
}

function getUrl(d: IData): string {
    return getUrlWithParam(d.url, d.param);
}

function getUrlWithParam(baseUrl?: string, par?: string) {
    let url = baseUrl || getCurrentUrl();
    if (par) {
        if (url.indexOf("/") === -1) {
            url = url + "/";
        }
        url = url + "?" + par;
    }
    return url;
}

function getCurrentUrl(): string {
    let url = document.URL;
    const i = url.indexOf("?");
    if (i > -1) {
        url = url.substring(0, i);
    }
    return url;
}

export const linkStyle = b.styleDef(
    { textDecoration: "none", color: MockColor.exampleLinkColor },
    { hover: { textDecoration: "underline" } }
);

export const permalinkStyle = b.styleDef(
    { textDecoration: "none", color: MockColor.permalinkColor, opacity: 0.2 },
    { hover: { opacity: 0.5 } }
);
