import * as b from "bobril";
import * as Container from "../src/lib";
import * as MockLink from "../src/mockComponents/link";
import * as Example from "bobwai--example";
import { getExampleInTsx } from "./src/example";

Example.init({}, () => {
    return [
        Container.create({
            header: "Header",
            content: "Content",
            description: "Some optional description",
            highlightedDescription: "Some optional highlighted description",
            model: { property: "stringValue in optional model" }
        }),
        Container.create({
            header: "Header",
            content: "Content without padding",
            description: "Some optional description",
            model: { property: "stringValue in optional model" },
            withoutPadding: true
        }),
        Container.create({
            header: "Header of test variant",
            content: "Used just for testing some configurations which shouldn't occur.",
            isTest: true
        }),
        Container.create({
            header: "Header of typical variant",
            content: "Used for examples aimed also to non-technical users of BG.",
            type: Container.Type.typical
        }),
        Container.create({
            header: "Header of experimental variant",
            content: 'Used for unofficial variant which should be used in "experimental" application only. Confirmation by UX needed.',
            type: Container.Type.experimental
        }),
        Container.create({
            header: "Header of deprecated variant",
            content: "Used for deprecated variant.",
            type: Container.Type.deprecated
        }),
        Container.create({
            header: "Header with id=alpha",
            content: "Container with id=alpha",
            id: "alpha",
            model: { property: "stringValue in optional model" }
        }),
        Container.create({
            header: "Header with id=beta",
            content: "Container with id=beta",
            id: "beta",
            model: { property: "stringValue in optional model" }
        }),
        Container.create({
            header: "Header of test variant with id",
            content: "Used just for testing some configurations which shouldn't occur.",
            id: "test",
            isTest: true
        }),
        Container.create({
            header: "Header of typical variant with id",
            content: "Used for examples aimed also to non-technical users of BG.",
            id: "typical",
            type: Container.Type.typical
        }),
        Container.create({
            header: "Header of experimental variant with id",
            content: 'Used for unofficial variant which should be used in "experimental" application only. Confirmation by UX needed.',
            id: "experimental",
            type: Container.Type.experimental
        }),
        Container.create({
            header: "Header of deprecated variant with id",
            content: "Used for deprecated variant.",
            id: "deprecated",
            type: Container.Type.deprecated
        }),
        Container.create({
            header: "Header",
            content: b.styledDiv([b.styledDiv("Variant with relative position"), b.styledDiv("(this text is positioned absolutely)")], {
                position: "absolute",
                top: 0,
                left: 0,
                background: "rgba(0, 0, 255, 0.1)"
            }),
            description: "Some optional description",
            size: Container.Size.small,
            hasRelativePosition: true,
            model: { property: "stringValue in optional model" }
        }),
        Container.create({
            header: "Header",
            content: "Variant with some height",
            description: "Some optional description",
            size: Container.Size.small,
            model: { property: "stringValue in optional model" }
        }),
        Container.create({
            header: "Outer Header - disabled listening to filter",
            messageListeningDisabled: true,
            content: [
                Container.create({
                    header: "Inner Header 1",
                    content: "Inner content"
                }),
                Container.create({
                    header: "Inner Header test through isTest",
                    content: "Inner content",
                    isTest: true
                }),
                Container.create({
                    header: "Inner Header Experimental",
                    content: "Inner content",
                    type: Container.Type.experimental
                })
            ]
        }),
        getExampleInTsx(),
        getPanel()
    ];
});

function getPanel(): b.IBobrilNode {
    return b.styledDiv(
        [
            getLink(undefined, "No filtering"),
            getLink("typical=1"),
            getLink("id=alpha"),
            getLink("id=beta"),
            getLink("id=alpha|beta"),
            getLink("id=beta&pure=1"),
            getLink("id=beta&toolbar=0"),
            getLink("id=beta&pure=1&toolbar=0"),
            getLink("typical=1&pure=1")
        ],
        boxStyle
    );
}

function getLink(par: string | undefined, text?: string): b.IBobrilNode {
    return b.styledDiv(MockLink.create({ param: par, text: text || par || "" }));
}

const boxStyle = b.styleDef({
    background: "#ccc",
    position: "fixed",
    bottom: 20,
    right: 20,
    opacity: 0.6,
    padding: 8,
    borderRadius: 8,
    boxShadow: "5px 5px 5px #aaa"
});
