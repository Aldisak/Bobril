import { User } from "../src/utils";
import { State } from "../src/state";

let userList: User[] = [
    {
        id: 111,
        name: "Michal Kovařík"
    },
    {
        id: 222,
        name: "Tomáš Pospíšil"
    },
    {
        id: 333,
        name: "Adam Obrtel"
    },
    {
        id: 444,
        name: "Tomáš Sychra"
    }
];

describe("ux enhancements", () => {
    it("removes whole tag if last character is deleted (backspace)", () => {
        let rawString = "lorem @{111} ipsum @{222} dolor";
        let output1 = "lorem Michal Kovařík ipsum Tomáš Pospíšil dolor";
        let output2 = "lorem  ipsum Tomáš Pospíšil dolor";
        let output3 = "lorem  ipsum  dolor";
        let diff1 = { start: 19, removed: 1, added: 0 };
        let diff2 = { start: 26, removed: 1, added: 0 };
        let initState = State.fromRawString(rawString, userList);
        expect(initState.translatedString).toBe(output1);
        let midState = State.fromStateAndDiff(initState, diff1, userList);
        expect(midState.translatedString).toBe(output2);
        let endState = State.fromStateAndDiff(midState, diff2, userList);
        expect(endState.translatedString).toBe(output3);
    });

    describe("reviving inserted tags", () => {
        it("state.translatedString contains translated tag", () => {
            let input = "lorem  ipsum @{222} dolor";
            let output = "lorem Michal Kovařík ipsum Tomáš Pospíšil dolor";
            let diff = { start: 6, removed: 0, added: 6, insertion: "@{111}" };
            let initState = State.fromRawString(input, userList);
            let endState = State.fromStateAndDiff(initState, diff, userList);
            expect(endState.translatedString).toBe(output);
        });

        it("state.rawString contains translated tag", () => {
            let input = "lorem  ipsum @{222} dolor";
            let output = "lorem @{111} ipsum @{222} dolor";
            let diff = { start: 6, removed: 0, added: 6, insertion: "@{111}" };
            let initState = State.fromRawString(input, userList);
            let endState = State.fromStateAndDiff(initState, diff, userList);
            expect(endState.rawString).toBe(output);
        });

        it("state.insets contains two insets", () => {
            let input = "lorem  ipsum @{222} dolor";
            let diff = { start: 6, removed: 0, added: 6, insertion: "@{111}" };
            let initState = State.fromRawString(input, userList);
            let endState = State.fromStateAndDiff(initState, diff, userList);
            expect(endState.insets.length).toBe(2);
        });

        it(".shadowContent should contain bobril nodes", () => {
            let input = "lorem  ipsum @{222} dolor";
            let diff = { start: 6, removed: 0, added: 6, insertion: "@{111}" };
            let initState = State.fromRawString(input, userList);
            let endState = State.fromStateAndDiff(initState, diff, userList);
            expect(endState.shadowContent![1]).toEqual(jasmine.any(Object));
            expect(endState.shadowContent![3]).toEqual(jasmine.any(Object));
        });
    });
});
