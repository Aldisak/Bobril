import { User } from "../src/utils";
import { State } from "../src/state";

let userList: User[] = [
    {
        id: 111,
        name: "Michal Kovařík"
    },
    {
        id: 222,
        name: "Tomáš Pospíšil"
    },
    {
        id: 333,
        name: "Adam Obrtel"
    },
    {
        id: 444,
        name: "Tomáš Sychra"
    }
];

////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// INSERT ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

describe("insert", () => {
    describe("insert outside tag", () => {
        it("before, bare", () => {
            let rawString = "@{111}"; // "Michal Kovařík";
            let output = "-Michal Kovařík";
            let diff = { start: 0, removed: 0, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("before, surrounded", () => {
            let rawString = "abc @{111} def"; // "abc Michal Kovařík def";
            let output = "abc- Michal Kovařík def";
            let diff = { start: 3, removed: 0, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("after, bare", () => {
            let rawString = "@{111}"; // "Michal Kovařík";
            let output = "Michal Kovařík-";
            let diff = { start: 15, removed: 0, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("after, surrounded", () => {
            let rawString = "abc @{111} def"; // "abc Michal Kovařík def";
            let output = "abc Michal Kovařík -def";
            let diff = { start: 19, removed: 0, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("between, bare", () => {
            let rawString = "@{111}  @{222}"; // "Michal Kovařík  Tomáš Pospíšil";
            let output = "Michal Kovařík - Tomáš Pospíšil";
            let diff = { start: 15, removed: 0, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("between, surrounded", () => {
            let rawString = "abc @{111}  @{222} def"; // "abc Michal Kovařík  Tomáš Pospíšil def";
            let output = "abc Michal Kovařík - Tomáš Pospíšil def";
            let diff = { start: 19, removed: 0, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("between, adjacent, bare", () => {
            let rawString = "@{111}@{222}"; // "Michal KovaříkTomáš Pospíšil";
            let output = "Michal Kovařík-Tomáš Pospíšil";
            let diff = { start: 14, removed: 0, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("between, adjacent, surrounded", () => {
            let rawString = "abc @{111}@{222} def"; // "abc Michal KovaříkTomáš Pospíšil def";
            let output = "abc Michal Kovařík-Tomáš Pospíšil def";
            let diff = { start: 18, removed: 0, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("insert into single tag", () => {
        it("bare", () => {
            let rawString = "@{111}"; // "Michal Kovařík"
            let output = "Michal X Kovařík";
            let diff = { start: 7, removed: 0, added: 2, insertion: "X " };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded", () => {
            let rawString = "abc @{111} def"; // "abc Michal Kovařík def"
            let output = "abc Michal X Kovařík def";
            let diff = { start: 11, removed: 0, added: 2, insertion: "X " };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("complex cases", () => {
        it("bare - insert before adjacent tags", () => {
            let rawString = "@{111}@{222}@{333}"; // "Michal KovaříkTomáš PospíšilAdam Obrtel";
            let output = "-Michal KovaříkTomáš PospíšilAdam Obrtel";
            let diff = { start: 0, removed: 0, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });
});

////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// REMOVE ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

describe("remove", () => {
    describe("remove selection outside tag", () => {
        it("before", () => {
            let rawString = "foobar @{111}"; // "foobar Michal Kovařík";
            let output = "foo Michal Kovařík";
            let diff = { start: 3, removed: 3, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("after", () => {
            let rawString = "@{111} foobar"; // "Michal Kovařík foobar";
            let output = "Michal Kovařík bar";
            let diff = { start: 15, removed: 3, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("between, bare", () => {
            let rawString = "@{111} foobar @{222}"; // "Michal Kovařík foobar Tomáš Pospíšil";
            let output = "Michal Kovařík foo Tomáš Pospíšil";
            let diff = { start: 18, removed: 3, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("between, surrounded", () => {
            let rawString = "abc @{111} foobar @{222} def"; // "abc Michal Kovařík foobar Tomáš Pospíšil def";
            let output = "abc Michal Kovařík foo Tomáš Pospíšil def";
            let diff = { start: 22, removed: 3, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("remove within single tag", () => {
        it("bare - at the beginning", () => {
            let rawString = "@{111}"; // "Michal Kovařík"
            let output = "Kovařík";
            let diff = { start: 0, removed: 7, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare - in middle", () => {
            let rawString = "@{111}"; // "Michal Kovařík"
            let output = "MKovařík";
            let diff = { start: 1, removed: 6, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded", () => {
            let rawString = "abc @{111} def"; // "abc Michal Kovařík def"
            let output = "abc Kovařík def";
            let diff = { start: 4, removed: 7, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, adjacent to another tag", () => {
            let rawString = "@{111}@{222}"; // "Michal KovaříkTomáš Pospíšil"
            let output = "MKovaříkTomáš Pospíšil";
            let diff = { start: 1, removed: 6, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, adjacent to another tag", () => {
            let rawString = "abc @{111}@{222} def"; // "abc Michal KovaříkTomáš Pospíšil def"
            let output = "abc MKovaříkTomáš Pospíšil def";
            let diff = { start: 5, removed: 6, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, spaced to another tag", () => {
            let rawString = "@{111} @{222}"; // "Michal Kovařík Tomáš Pospíšil"
            let output = "MKovařík Tomáš Pospíšil";
            let diff = { start: 1, removed: 6, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, spaced to another tag", () => {
            let rawString = "abc @{111} @{222} def"; // "abc Michal Kovařík Tomáš Pospíšil def"
            let output = "abc MKovařík Tomáš Pospíšil def";
            let diff = { start: 5, removed: 6, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("remove selection from tag to text", () => {
        it("bare", () => {
            let rawString = "@{111} foobar"; // "Michal Kovařík foobar";
            let output = "Michal bar";
            let diff = { start: 7, removed: 11, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded", () => {
            let rawString = "abc @{111} foobar"; // "abc Michal Kovařík foobar";
            let output = "abc Michal bar";
            let diff = { start: 11, removed: 11, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, with two tags in the string", () => {
            let rawString = "@{111} foobar @{222} foobar"; // "Michal Kovařík foobar Tomáš Pospíšil foobar";
            let output = "Michal bar Tomáš Pospíšil foobar";
            let diff = { start: 7, removed: 11, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, with two tags in the string", () => {
            let rawString = "abc @{111} foobar @{222} foobar"; // "abc Michal Kovařík foobar Tomáš Pospíšil foobar";
            let output = "abc Michal bar Tomáš Pospíšil foobar";
            let diff = { start: 11, removed: 11, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("remove selection from one tag to another", () => {
        it("bare, spaced", () => {
            let rawString = "@{111} @{222}"; // "Michal Kovařík Tomáš Pospíšil";
            let output = "Michal Pospíšil";
            let diff = { start: 6, removed: 14, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, adjacent", () => {
            let rawString = "@{111}@{222}"; // "Michal KovaříkTomáš Pospíšil";
            let output = "Michal Pospíšil";
            let diff = { start: 6, removed: 13, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, spaced", () => {
            let rawString = "abc @{111} @{222} def"; // "abc Michal Kovařík Tomáš Pospíšil def";
            let output = "abc Michal Pospíšil def";
            let diff = { start: 10, removed: 14, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, adjacent", () => {
            let rawString = "abc @{111}@{222} def"; // "abc Michal KovaříkTomáš Pospíšil def";
            let output = "abc Michal Pospíšil def";
            let diff = { start: 10, removed: 13, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("remove selection from one tag, through another, to text", () => {
        it("bare, spaced", () => {
            let rawString = "@{111} @{222} foobar"; // "Michal Kovařík Tomáš Pospíšil foobar";
            let output = "Michal bar";
            let diff = { start: 7, removed: 26, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, spaced", () => {
            let rawString = "@{111}@{222} foobar"; // "Michal KovaříkTomáš Pospíšil foobar";
            let output = "Michal bar";
            let diff = { start: 7, removed: 25, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, spaced", () => {
            let rawString = "abc @{111} @{222} foobar"; // "abc Michal Kovařík Tomáš Pospíšil foobar";
            let output = "abc Michal bar";
            let diff = { start: 11, removed: 26, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, spaced", () => {
            let rawString = "abc @{111}@{222} foobar"; // "abc Michal KovaříkTomáš Pospíšil foobar";
            let output = "abc Michal bar";
            let diff = { start: 11, removed: 25, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("remove selection from one tag, across second, ending in third tag", () => {
        it("bare, spaced", () => {
            let rawString = "@{111} @{222} @{333}"; // "Michal Kovařík Tomáš Pospíšil Adam Obrtel";
            let output = "Michal Obrtel";
            let diff = { start: 7, removed: 28, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, spaced", () => {
            let rawString = "@{111}@{222}@{333}"; // "Michal KovaříkTomáš PospíšilAdam Obrtel";
            let output = "Michal Obrtel";
            let diff = { start: 7, removed: 26, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, spaced", () => {
            let rawString = "abc @{111} @{222} @{333} def"; // "abc Michal Kovařík Tomáš Pospíšil Adam Obrtel def";
            let output = "abc Michal Obrtel def";
            let diff = { start: 10, removed: 28, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, spaced", () => {
            let rawString = "abc @{111}@{222}@{333} def"; // "abc Michal KovaříkTomáš PospíšilAdam Obrtel def";
            let output = "abc Michal Obrtel def";
            let diff = { start: 10, removed: 26, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("remove selection covering all tags", () => {
        it("should not delete rest of the text", () => {
            let rawString = "abc @{111} @{222} @{333} def"; // "abc Michal Kovařík Tomáš Pospíšil Adam Obrtel def";
            let output = "abef";
            let diff = { start: 2, removed: 45, added: 0 };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("complex cases", () => {
        it("bare - delete first symbol of adjacent tag", () => {
            let rawString = "@{111}@{222}"; // "Michal KovaříkTomáš Pospíšil";
            let output = "Michal Kovaříkomáš Pospíšil";
            let diff = { start: 14, removed: 1, added: 0 };
            let initState = State.fromRawString(rawString, userList);
            let endState = State.fromStateAndDiff(initState, diff, userList);
            expect(endState.translatedString).toBe(output);
        });

        it("surrounded - delete first symbol of adjacent tag", () => {
            let rawString = "abc @{111}@{222} def"; // "abc Michal KovaříkTomáš Pospíšil def";
            let output = "abc Michal Kovaříkomáš Pospíšil def";
            let diff = { start: 18, removed: 1, added: 0 };
            let initState = State.fromRawString(rawString, userList);
            let endState = State.fromStateAndDiff(initState, diff, userList);
            expect(endState.translatedString).toBe(output);
        });
    });
});

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// REPLACE ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

describe("replace", () => {
    describe("replace selection outside tag", () => {
        it("before", () => {
            let rawString = "foobar @{111}"; // "foobar Michal Kovařík";
            let output = "foo- Michal Kovařík";
            let diff = { start: 3, removed: 3, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("after", () => {
            let rawString = "@{111} foobar"; // "Michal Kovařík foobar";
            let output = "Michal Kovařík -bar";
            let diff = { start: 15, removed: 3, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("between, bare", () => {
            let rawString = "@{111} foobar @{222}"; // "Michal Kovařík foobar Tomáš Pospíšil";
            let output = "Michal Kovařík foo- Tomáš Pospíšil";
            let diff = { start: 18, removed: 3, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("between, surrounded", () => {
            let rawString = "abc @{111} foobar @{222} def"; // "abc Michal Kovařík foobar Tomáš Pospíšil def";
            let output = "abc Michal Kovařík foo- Tomáš Pospíšil def";
            let diff = { start: 22, removed: 3, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("replace within single tag", () => {
        it("bare - at the beginning", () => {
            let rawString = "@{111}"; // "Michal Kovařík"
            let output = "-Kovařík";
            let diff = { start: 0, removed: 7, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare - in middle", () => {
            let rawString = "@{111}"; // "Michal Kovařík"
            let output = "M-Kovařík";
            let diff = { start: 1, removed: 6, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare - at the end", () => {
            let rawString = "@{111}"; // "Michal Kovařík"
            let output = "Michal Kovaří-";
            let diff = { start: 13, removed: 1, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded", () => {
            let rawString = "abc @{111} def"; // "abc Michal Kovařík def"
            let output = "abc -Kovařík def";
            let diff = { start: 4, removed: 7, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, adjacent to another tag", () => {
            let rawString = "@{111}@{222}"; // "Michal KovaříkTomáš Pospíšil"
            let output = "M-KovaříkTomáš Pospíšil";
            let diff = { start: 1, removed: 6, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, adjacent to another tag", () => {
            let rawString = "abc @{111}@{222} def"; // "abc Michal KovaříkTomáš Pospíšil def"
            let output = "abc M-KovaříkTomáš Pospíšil def";
            let diff = { start: 5, removed: 6, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, spaced to another tag", () => {
            let rawString = "@{111} @{222}"; // "Michal Kovařík Tomáš Pospíšil"
            let output = "M-Kovařík Tomáš Pospíšil";
            let diff = { start: 1, removed: 6, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, spaced to another tag", () => {
            let rawString = "abc @{111} @{222} def"; // "abc Michal Kovařík Tomáš Pospíšil def"
            let output = "abc M-Kovařík Tomáš Pospíšil def";
            let diff = { start: 5, removed: 6, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("inside one of three adjacent tags", () => {
            let rawString = "@{111}@{222}@{333}"; // "Michal KovaříkTomáš PospíšilAdam Obrtel";
            let output = "Michal KovaříkTomáš-PospíšilAdam Obrtel";
            let diff = { start: 19, removed: 1, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("replace selection from tag to text", () => {
        it("bare", () => {
            let rawString = "@{111} foobar"; // "Michal Kovařík foobar";
            let output = "Michal-bar";
            let diff = { start: 6, removed: 12, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded", () => {
            let rawString = "abc @{111} foobar"; // "abc Michal Kovařík foobar";
            let output = "abc Michal-bar";
            let diff = { start: 10, removed: 12, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, with two tags in the string", () => {
            let rawString = "@{111} foobar @{222} foobar"; // "Michal Kovařík foobar Tomáš Pospíšil foobar";
            let output = "Michal-bar Tomáš Pospíšil foobar";
            let diff = { start: 6, removed: 12, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, with two tags in the string", () => {
            let rawString = "abc @{111} foobar @{222} foobar"; // "abc Michal Kovařík foobar Tomáš Pospíšil foobar";
            let output = "abc Michal-bar Tomáš Pospíšil foobar";
            let diff = { start: 10, removed: 12, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("replace selection from one tag to another", () => {
        it("bare, spaced", () => {
            let rawString = "@{111} @{222}"; // "Michal Kovařík Tomáš Pospíšil";
            let output = "Michal-Pospíšil";
            let diff = { start: 6, removed: 15, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, adjacent", () => {
            let rawString = "@{111}@{222}"; // "Michal KovaříkTomáš Pospíšil";
            let output = "Michal-Pospíšil";
            let diff = { start: 6, removed: 14, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, spaced", () => {
            let rawString = "abc @{111} @{222} def"; // "abc Michal Kovařík Tomáš Pospíšil def";
            let output = "abc Michal-Pospíšil def";
            let diff = { start: 10, removed: 15, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, adjacent", () => {
            let rawString = "abc @{111}@{222} def"; // "abc Michal KovaříkTomáš Pospíšil def";
            let output = "abc Michal-Pospíšil def";
            let diff = { start: 10, removed: 14, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });

    describe("replace selection from one tag, across second, ending in third tag", () => {
        it("bare, spaced", () => {
            let rawString = "@{111} @{222} @{333}"; // "Michal Kovařík Tomáš Pospíšil Adam Obrtel";
            let output = "Michal-Obrtel";
            let diff = { start: 6, removed: 29, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("bare, adjacent", () => {
            let rawString = "@{111}@{222}@{333}"; // "Michal KovaříkTomáš PospíšilAdam Obrtel";
            let output = "Michal-Obrtel";
            let diff = { start: 6, removed: 27, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, spaced", () => {
            let rawString = "abc @{111} @{222} @{333} def"; // "abc Michal Kovařík Tomáš Pospíšil Adam Obrtel def";
            let output = "abc Michal-Obrtel def";
            let diff = { start: 10, removed: 29, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });

        it("surrounded, adjacent", () => {
            let rawString = "abc @{111}@{222}@{333} def"; // "abc Michal KovaříkTomáš PospíšilAdam Obrtel def";
            let output = "abc Michal-Obrtel def";
            let diff = { start: 10, removed: 27, added: 1, insertion: "-" };
            let lastState = State.fromRawString(rawString, userList);
            let newState = State.fromStateAndDiff(lastState, diff, userList);
            expect(newState.translatedString).toBe(output);
        });
    });
});

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// MULTI STEP //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

describe("multi step actions", () => {
    it("bare - insert between adjacent tags", () => {
        let rawString = "@{111}@{222}@{333}"; // "Michal KovaříkTomáš PospíšilAdam Obrtel";
        let output = "Michal Kovařík-Tomáš Pospíšil-Adam Obrtel";
        let diff1 = { start: 28, removed: 0, added: 1, insertion: "-" };
        let diff2 = { start: 14, removed: 0, added: 1, insertion: "-" };
        let initState = State.fromRawString(rawString, userList);
        let midState = State.fromStateAndDiff(initState, diff1, userList);
        let endState = State.fromStateAndDiff(midState, diff2, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("surrounded - insert between adjacent tags", () => {
        let rawString = "abc @{111}@{222}@{333} def"; // "abc Michal KovaříkTomáš PospíšilAdam Obrtel def";
        let output = "abc Michal Kovařík-Tomáš Pospíšil-Adam Obrtel def";
        let diff1 = { start: 32, removed: 0, added: 1, insertion: "-" };
        let diff2 = { start: 18, removed: 0, added: 1, insertion: "-" };
        let initState = State.fromRawString(rawString, userList);
        let midState = State.fromStateAndDiff(initState, diff1, userList);
        let endState = State.fromStateAndDiff(midState, diff2, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("bare - remove comma between tags, then delete first symbol of next tag", () => {
        let rawString = "@{111},@{222}"; // "Michal Kovařík,Tomáš Pospíšil";
        let output = "Michal Kovaříkomáš Pospíšil";
        let diff = { start: 14, removed: 1, added: 0 };
        let initState = State.fromRawString(rawString, userList);
        let midState = State.fromStateAndDiff(initState, diff, userList);
        let endState = State.fromStateAndDiff(midState, diff, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("surrounded - remove comma between tags, then delete first symbol of next tag", () => {
        let rawString = "abc @{111},@{222} def"; // "abc Michal Kovařík,Tomáš Pospíšil def";
        let output = "abc Michal Kovaříkomáš Pospíšil def";
        let diff = { start: 18, removed: 1, added: 0 };
        let initState = State.fromRawString(rawString, userList);
        let midState = State.fromStateAndDiff(initState, diff, userList);
        let endState = State.fromStateAndDiff(midState, diff, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("bare - remove comma between tags, then add another symbol", () => {
        let rawString = "@{111},@{222}"; // "Michal Kovařík,Tomáš Pospíšil";
        let output = "Michal Kovařík-Tomáš Pospíšil";
        let diff1 = { start: 14, removed: 1, added: 0 };
        let diff2 = { start: 14, removed: 0, added: 1, insertion: "-" };
        let initState = State.fromRawString(rawString, userList);
        let midState = State.fromStateAndDiff(initState, diff1, userList);
        let endState = State.fromStateAndDiff(midState, diff2, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("surrounded - remove comma between tags, then add another symbol", () => {
        let rawString = "abc @{111},@{222} def"; // "abc Michal Kovařík,Tomáš Pospíšil def";
        let output = "abc Michal Kovařík-Tomáš Pospíšil def";
        let diff1 = { start: 18, removed: 1, added: 0 };
        let diff2 = { start: 18, removed: 0, added: 1, insertion: "-" };
        let initState = State.fromRawString(rawString, userList);
        let midState = State.fromStateAndDiff(initState, diff1, userList);
        let endState = State.fromStateAndDiff(midState, diff2, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("bare - insert between adjacent tags", () => {
        let rawString = "@{111}@{222}@{333}"; // "Michal KovaříkTomáš PospíšilAdam Obrtel";
        let output = "Michal Kovařík-Tomáš Pospíšil-Adam Obrtel";
        let diff1 = { start: 28, removed: 0, added: 1, insertion: "-" };
        let diff2 = { start: 14, removed: 0, added: 1, insertion: "-" };
        let initState = State.fromRawString(rawString, userList);
        let midState = State.fromStateAndDiff(initState, diff1, userList);
        let endState = State.fromStateAndDiff(midState, diff2, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("inside one of three adjacent tags", () => {
        let rawString = "@{111}@{222}@{333}"; // "Michal KovaříkTomáš PospíšilAdam Obrtel";
        let output = "Michal KovaříkTomáš-PospíšilAdam Obrtel";
        let diff = { start: 19, removed: 1, added: 1, insertion: "-" };
        let initState = State.fromRawString(rawString, userList);
        let midState = State.fromStateAndDiff(initState, diff, userList);
        let endState = State.fromStateAndDiff(midState, diff, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("inside one of three adjacent tags 2", () => {
        let rawString = "*@{111}_@{222}_@{333}*"; // "*Michal Kovařík_Tomáš Pospíšil_Adam Obrtel*"
        let output = "*Michal Kovařík_Tomáš-Pospíšil_Adam Obrtel*";
        let diff = { start: 21, removed: 1, added: 1, insertion: "-" };
        let initState = State.fromRawString(rawString, userList);
        let midState = State.fromStateAndDiff(initState, diff, userList);
        let endState = State.fromStateAndDiff(midState, diff, userList);
        expect(endState.translatedString).toBe(output);
    });
});

describe("unknown users", () => {
    it("prepending char", () => {
        let rawString = "hello world @{888} lorem ipsum"; // "hello world Unknown User lorem ipsum"
        let output = "+hello world Unknown User lorem ipsum";
        let diff = { start: 0, removed: 0, added: 1, insertion: "+" };
        let initState = State.fromRawString(rawString, userList);
        let endState = State.fromStateAndDiff(initState, diff, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("appending char", () => {
        let rawString = "hello world @{888} lorem ipsum"; // "hello world Unknown User lorem ipsum"
        let output = "hello world Unknown User lorem ipsum+";
        let diff = { start: 36, removed: 0, added: 1, insertion: "+" };
        let initState = State.fromRawString(rawString, userList);
        let endState = State.fromStateAndDiff(initState, diff, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("inserting char between 'Unknown' and 'User'", () => {
        let rawString = "hello world @{888} lorem ipsum"; // "hello world Unknown User lorem ipsum"
        let output = "hello world Unknown+ User lorem ipsum";
        let diff = { start: 19, removed: 0, added: 1, insertion: "+" };
        let initState = State.fromRawString(rawString, userList);
        let endState = State.fromStateAndDiff(initState, diff, userList);
        expect(endState.translatedString).toBe(output);
    });

    it("replacing char between 'Unknown' and 'User'", () => {
        let rawString = "hello world @{888} lorem ipsum"; // "hello world Unknown User lorem ipsum"
        let output = "hello world Unknown+User lorem ipsum";
        let diff = { start: 19, removed: 1, added: 1, insertion: "+" };
        let initState = State.fromRawString(rawString, userList);
        let endState = State.fromStateAndDiff(initState, diff, userList);
        expect(endState.translatedString).toBe(output);
    });
});
