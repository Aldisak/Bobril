import { diffStrings } from "../src/diff";

describe("diffStrings()", () => {
    describe("add", () => {
        it("add at the beginning", () => {
            let oldText = "Hello world";
            let newText = "-Hello world";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(0);
            expect(diff.removed).toBe(0);
            expect(diff.added).toBe(1);
            expect(diff.insertion).toBe("-");
        });

        it("add in the middle", () => {
            let oldText = "Hello world";
            let newText = "Hello- world";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(5);
            expect(diff.removed).toBe(0);
            expect(diff.added).toBe(1);
            expect(diff.insertion).toBe("-");
        });

        it("add at the end", () => {
            let oldText = "Hello world";
            let newText = "Hello world-";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(11);
            expect(diff.removed).toBe(0);
            expect(diff.added).toBe(1);
            expect(diff.insertion).toBe("-");
        });

        it("add long portion", () => {
            let oldText = "Hello world";
            let newText = "Hello--- world";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(5);
            expect(diff.removed).toBe(0);
            expect(diff.added).toBe(3);
            expect(diff.insertion).toBe("---");
        });
    });

    describe("remove", () => {
        it("remove at the beginning", () => {
            let oldText = "Hello world";
            let newText = "ello world";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(0);
            expect(diff.removed).toBe(1);
            expect(diff.added).toBe(0);
            expect(diff.insertion).toBe(undefined);
        });

        it("remove in the middle", () => {
            let oldText = "Hello world";
            let newText = "Hello orld";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(6);
            expect(diff.removed).toBe(1);
            expect(diff.added).toBe(0);
            expect(diff.insertion).toBe(undefined);
        });

        it("remove at the end", () => {
            let oldText = "Hello world";
            let newText = "Hello worl";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(10);
            expect(diff.removed).toBe(1);
            expect(diff.added).toBe(0);
            expect(diff.insertion).toBe(undefined);
        });

        it("remove long portion", () => {
            let oldText = "Hello world";
            let newText = "Held";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(3);
            expect(diff.removed).toBe(7);
            expect(diff.added).toBe(0);
            expect(diff.insertion).toBe(undefined);
        });

        it("remove all", () => {
            let oldText = "Hello world";
            let newText = "";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(0);
            expect(diff.removed).toBe(11);
            expect(diff.added).toBe(0);
            expect(diff.insertion).toBe(undefined);
        });
    });

    describe("replace", () => {
        it("replace at the beginning", () => {
            let oldText = "Hello world";
            let newText = ".ello world";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(0);
            expect(diff.removed).toBe(1);
            expect(diff.added).toBe(1);
            expect(diff.insertion).toBe(".");
        });

        it("replace in the middle", () => {
            let oldText = "Hello world";
            let newText = "Hello.world";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(5);
            expect(diff.removed).toBe(1);
            expect(diff.added).toBe(1);
            expect(diff.insertion).toBe(".");
        });

        it("replace at the end", () => {
            let oldText = "Hello world";
            let newText = "Hello worl.";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(10);
            expect(diff.removed).toBe(1);
            expect(diff.added).toBe(1);
            expect(diff.insertion).toBe(".");
        });

        it("replace long portion", () => {
            let oldText = "Hello world";
            let newText = "He.......ld";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(2);
            expect(diff.removed).toBe(7);
            expect(diff.added).toBe(7);
            expect(diff.insertion).toBe(".......");
        });

        it("replace all", () => {
            let oldText = "Hello world";
            let newText = "...........";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(0);
            expect(diff.removed).toBe(11);
            expect(diff.added).toBe(11);
            expect(diff.insertion).toBe(newText);
        });

        it("replace all and more", () => {
            let oldText = "Hello world";
            let newText = "Lorem Ipsum dolor set amet";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(0);
            expect(diff.removed).toBe(11);
            expect(diff.added).toBe(26);
            expect(diff.insertion).toBe(newText);
        });

        it("replace complex", () => {
            let oldText = "hello world";
            let newText = "Well hello beautiful world";
            let diff = diffStrings(oldText, newText);
            expect(diff.start).toBe(0);
            expect(diff.removed).toBe(5);
            expect(diff.added).toBe(20);
            expect(diff.insertion).toBe("Well hello beautiful");
        });
    });
});
