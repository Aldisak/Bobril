import * as b from "bobril";
import { observable } from "bobx";
import * as Example from "bobwai--example";
import TaggedTextarea, { translateTaggedTextToString, translateTaggedTextToNodes } from "../src/textarea";
import { User } from "../src/utils";
import { create as Container } from "bobwai--viewer-container";

let userList: User[] = [
	{
		id: 111,
		name: "Michal Kovařík",
		avatar: "https://www.w3schools.com/howto/img_avatar2.png",
		email: "m.kovarik@quadient.com"
	},
	{
		id: 222,
		name: "Tomáš Pospíšil"
	},
	{
		id: 333,
		name: "Adam Obrtel",
		avatar: "https://www.w3schools.com/howto/img_avatar.png"
	},
	{
		id: 444,
		name: "Tomáš Sychra",
		email: "t.sychra@quadient.com"
	},
	{
		id: 555,
		name: "Lukáš Jelínek",
		email: "l.jelinek@quadient.com"
	},
	{
		id: 666,
		name: "Ondřej Hrabovský",
		email: "o.hrabovsky@quadient.com"
	},
	{
		id: 777,
		name: "Ondřej Müller",
		email: "o.muller@quadient.com",
		avatar: "https://www.w3schools.com/w3images/avatar6.png"
	},
	{
		id: 888,
		name: "Ondřej Pauswang",
		email: "o.pauswang@quadient.com"
	},
	{
		id: 1111,
		name: "Very Long Named Guy",
		avatar: "https://www.w3schools.com/howto/img_avatar2.png",
		email: "v.verylongnamedguy@quadient.com"
	}
];

let value = observable(
	"Tohle je demo text se jmény Olomouckých all-stars ze ČTYŘICET DVOJKY. Jmenovitě třeba @{111}, nebo taky @{333}. Tahle textarea správně zobrazuje mezery     @{222} a zalomené jména @{444} zvládá taky obstojně."
);

let unknownValue = observable("Z našeho týmu bohužel nedávno odešli dva lidé. @{999} a @{12345} ale v našich srdcích zůstávají i nadále.");

let longValue = observable(
	"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin a suscipit orci, eu varius risus. Nullam pharetra, nibh eget tincidunt gravida, eros libero mollis nisl, sagittis rutrum quam felis ac felis @{111}. Morbi sollicitudin arcu ac tempor tempor. Nam aliquam porttitor condimentum. Praesent molestie nec metus eget facilisis. Donec a dapibus nulla. Nunc eget massa dui. Proin dapibus malesuada nunc, a lobortis lorem vulputate a. Nunc a tortor tellus. Quisque pellentesque, nisi ut finibus semper, lorem erat bibendum ligula, non hendrerit justo @{222} lacus quis augue. Nam id consequat ligula. Morbi non posuere enim. Sed ante metus, rutrum in felis a, elementum gravida lectus. Nullam bibendum leo nec efficitur fringilla. Morbi rutrum vel justo id bibendum. Maecenas eget sagittis quam, vitae sodales arcu.\n\nMorbi facilisis est non dolor lobortis, imperdiet ullamcorper justo pharetra. Phasellus vel egestas neque. Nulla maximus orci ac elit viverra tincidunt. Mauris est ipsum, porta at purus tempor, @{333} consequat luctus ex. Phasellus lacinia eget tortor at finibus. In rhoncus dolor eget dui suscipit, id malesuada odio pharetra. Etiam eget neque consequat, cursus ante id, molestie diam.\n\nPellentesque venenatis, turpis sed suscipit cursus, urna nisl ultrices sapien, eu egestas urna nunc a erat. Praesent tortor tellus, condimentum id finibus sed, pretium id lacus. Aenean mattis purus nisl. Duis imperdiet pellentesque dictum. In mollis consequat mi, eget volutpat odio porta vel. Phasellus eget dolor @{444} id tellus tristique elementum. Pellentesque eu vehicula erat."
);

let adjacentTagsValue = observable('@{111}@{222}@{333}@{444}@{555}text');

let observableClearVal = observable("some initial non-empty value");

Example.init({}, () => (
	<>

		<Container header="Basic demo">
			<div style={{ display: "flex" }}>
				<div style={{ flex: 1, flexShrink: 0 }}>
					<TaggedTextarea
						value={value.get()}
						userList={userList}
						onChange={(newVal: string) => value.set(newVal)}
					></TaggedTextarea>
				</div>
				{renderRightPanel(value.get())}
			</div>
		</Container>

		<Container header="Unknown id">
			<div style={{ display: "flex" }}>
				<div style={{ flex: 1, flexShrink: 0 }}>
					<TaggedTextarea
						value={unknownValue.get()}
						userList={userList}
						onChange={(newVal: string) => unknownValue.set(newVal)}
					></TaggedTextarea>
				</div>
				{renderRightPanel(unknownValue.get())}
			</div>
		</Container>

		<Container header="Scrollable demo">
			<div style={{ display: "flex" }}>
				<div style={{ flex: 0.5, height: 240 }}>
					<TaggedTextarea
						value={longValue.get()}
						autoHeight={true}
						userList={userList}
						onChange={(newVal: string) => longValue.set(newVal)}
					></TaggedTextarea>
				</div>
				{renderRightPanel(longValue.get())}
			</div>
		</Container>

		<Container
			header="Suggestion box does not overflow from viewport"
			description="suggestion box should be repositioned and not cut-off if the textarea is close to edge of the browser"
		>
			<div style={{ display: "flex" }}>
				<div style={{ flex: 1 }}></div>
				<div style={{ width: 170 }}>
					<TaggedTextarea
						value={value.get()}
						userList={userList}
						onChange={(newVal: string) => value.set(newVal)}
					></TaggedTextarea>
				</div>
			</div>
		</Container>

		<Container header="debug: Inside scrollable container">
			<div style={{ height: 160, overflowY: "scroll" }}>
				<br />
				<br />
				<br />
				<br />
				<div style={{ height: 160, width: 400 }}>
					<TaggedTextarea
						autoHeight={true}
						value={value.get()}
						userList={userList}
						onChange={(newVal: string) => value.set(newVal)}
					></TaggedTextarea>
				</div>
			</div>
		</Container>

		<Container header="debug: fixed width">
			<div style={{ width: 200 }}>
				<TaggedTextarea
					value={adjacentTagsValue.get()}
					userList={userList}
					onChange={(newVal: string) => adjacentTagsValue.set(newVal)}
				></TaggedTextarea>
			</div>
		</Container>

		<Container header="debug: Changing value externally">
			<button onClick={() => observableClearVal.set("")}>Clear</button>
			<button onClick={() => observableClearVal.set("hello world")}>set text without tags</button>
			<button onClick={() => observableClearVal.set("hello @{111}")}>set text with tags</button>
			<div style={{ display: "flex" }}>
				<div style={{ flex: 1, flexShrink: 0 }}>
					<TaggedTextarea
						value={observableClearVal.get()}
						userList={userList}
						onChange={(newVal: string) => observableClearVal.set(newVal)}
					></TaggedTextarea>
				</div>
				<textarea value={observableClearVal.get()} onChange={(newVal: string) => observableClearVal.set(newVal)}></textarea>
				{renderRightPanel(observableClearVal.get())}
			</div>
		</Container>

		<Container header="helper: tagged node translation function">{translateTaggedTextToNodes("hello @{111}!", userList)}</Container>
		<Container header="helper: raw string translation function">{translateTaggedTextToString("hello @{111}!", userList)}</Container>
	</>
));

function renderRightPanel(value: string) {
	return <pre style={{ flex: 1, margin: "0 0 0 20px", wordBreak: "break-word" }}>{value}</pre>;
}
