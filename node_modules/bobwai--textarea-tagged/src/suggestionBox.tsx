import * as b from "bobril";
import { t } from "bobril-g11n";
import { everyoneId, User } from "./utils";
import * as colors from "bobwai--color";
import * as s from "./style";
import Avatar, { AvatarIcon } from "bobwai--avatar";

interface ISuggestionList {
    userList: User[];
    totalUserCount: number;
    maxVisibleItems: number;
    onSelect(userId: number): void;
    selectedIndex: number;
}

interface IUserInfoBox {
    user: User;
}

interface IListItem extends User {
    color?: string;
    icon?: AvatarIcon;
    selected?: boolean;
    onClick?(): void;
}

export class UserInfoBox extends b.Component<IUserInfoBox> {
    static id = "bobwai--textarea-tagged-user-info";

    render(): b.IBobrilChildren {
        return (
            <div style={[s.listContainerStyle]}>
                <SuggestionListItem {...this.data.user!} />
            </div>
        );
    }
}

export class SuggestionList extends b.Component<ISuggestionList> {
    static id = "bobwai--textarea-tagged-suggestion-list";

    render() {
        return <div style={[s.listContainerStyle]}>{this.renderItems()}</div>;
    }

    renderItems(): b.IBobrilChildren {
        if (this.data.userList.length === 0) {
            return this.renderEmptyListItem();
        } else {
            let slicedList = this.data.userList.slice(0, this.data.maxVisibleItems);
            let items = slicedList.map((user, index) => {
                if (user.id === everyoneId) return this.renderEveryoneItem(index);
                else return this.renderUserItem(user, index);
            });
            let notShownUserCount = this.data.userList.length - slicedList.length;
            if (notShownUserCount > 0) {
                items.push(this.renderMoreListItem(notShownUserCount));
            }
            return items;
        }
    }

    @b.bind renderEveryoneItem(index: number) {
        return (
            <SuggestionListItem
                id={everyoneId}
                name={t("Everyone")}
                email={t("{count} people", { count: this.data.totalUserCount })}
                icon={AvatarIcon.Group}
                color={colors.Grey500}
                selected={index === this.data.selectedIndex}
                onClick={() => this.data.onSelect(0)}
            />
        );
    }

    @b.bind renderUserItem(user: User, index: number) {
        return <SuggestionListItem {...user} selected={index === this.data.selectedIndex} onClick={() => this.data.onSelect(index)} />;
    }

    renderEmptyListItem(): b.IBobrilNode {
        return <div style={s.moreItemStyle}>{t("No users with access to this map have been found.")}</div>;
    }

    renderMoreListItem(notShownUserCount: number): b.IBobrilNode {
        return <div style={s.moreItemStyle}>{t("and {notShownUserCount} more people", { notShownUserCount })}</div>;
    }
}

export class SuggestionListItem extends b.Component<IListItem> {
    static id = "bobwai--textarea-tagged-suggestion-list-item";

    render() {
        return (
            <div style={this.style} onClick={this.data.onClick}>
                <Avatar size={s.avatarSize} imageSrc={this.data.avatar} icon={this.data.icon} colorSeed={this.data.name} />
                <div style={s.itemBodyStyle}>
                    <div style={s.nameStyle}>{this.data.name}</div>
                    <div style={s.emailStyle}>{this.data.email}</div>
                </div>
            </div>
        );
    }

    get style(): b.IBobrilStyle[] {
        return [s.listItemStyle, this.data.selected && s.listItemHoverStyle];
    }
}
