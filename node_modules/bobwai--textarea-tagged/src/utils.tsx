const diacriticAlphabet =
    "ÀÁÂÃÄÅĄĀāàáâãäåąßÒÓÔÕÕÖØŐòóôőõöøĎďDŽdžĚÈÉÊËĘěèéêëęðÇçČčĆćÐÌÍÎÏĪìíîïīŮÙÚÛÜŰůùűúûüĽĹŁľĺłÑŇŃňñńŘŔřŕŠŚŞšśşŤťŸÝÿýŽŻŹžżźđĢĞģğ";
const cleanAlphabet =
    "AAAAAAAAaaaaaaaasOOOOOOOOoooooooDdDZdzEEEEEEeeeeeeeCcCcCcDIIIIIiiiiiUUUUUUuuuuuuLLLlllNNNnnnRRrrSSSsssTtYYyyZZZzzzdGGgg";

const useIntl = "normalize" in String.prototype;

export function removeDiacritics(text: string): string {
    if (useIntl) {
        return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    } else {
        let str = text.split("");
        var strLen = str.length;
        var i, x;
        for (i = 0; i < strLen; i++) {
            if ((x = diacriticAlphabet.indexOf(str[i])) != -1) {
                str[i] = cleanAlphabet[x];
            }
        }
        return str.join("");
    }
}

export const everyoneId = 0;

export interface Coord {
    x: number;
    y: number;
}

export interface User {
    id: number;
    name?: string;
    avatar?: string;
    email?: string;
}

export const keys = {
    BACKSPACE: 8,
    ENTER: 13,
    ESC: 27,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    ARROW_LEFT: 37,
    ARROW_UP: 38,
    ARROW_RIGHT: 39,
    ARROW_DOWN: 40,
    HOME: 36,
    END: 35
};

export function includes(haystack: number[] | string, needle: number | string): boolean {
    return haystack.indexOf(needle as never) !== -1;
}

export function prevent(e: Event) {
    e.preventDefault();
    e.stopPropagation();
}

export function clamp(min: number, val: number, max: number): number {
    return Math.max(min, Math.min(max, val));
}
