import * as b from "bobril";
import * as styles from "./styles";
import * as HorizontalScrollCorrection from "bobwai--horizontal-scroll-correction";
import * as Toolbar from "bobwai--toolbar";

export { Size } from "bobwai--toolbar";

export let create = b.createVirtualComponent<IData>({
    id: "bobwai--l-view-toolbar",
    render(ctx: IContext, me: b.IBobrilNode): void {
        me.children = HorizontalScrollCorrection.create({
            content: b.styledDiv(
                ctx.data.children,
                styles.baseStyle,
                getMainStyle(ctx),
                ctx.data.toolbarSize === Toolbar.Size.Small && styles.smallToolbarStyle
            )
        });
    }
});

function getMainStyle(ctx: IContext): b.IBobrilStyle {
    let mainStyle: b.IBobrilStyle = {};
    if (ctx.data.isCombinedWithAppHeader && ctx.data.isCombinedWithAppBreadcrumb) {
        mainStyle = styles.withAppBreadcrumbAndAppHeaderStyle;
    } else if (ctx.data.isCombinedWithAppHeader) {
        mainStyle = styles.withAppHeaderStyle;
    } else if (ctx.data.isCombinedWithAppBreadcrumb) {
        mainStyle = styles.withAppBreadcrumbStyle;
    }
    return mainStyle;
}

export interface IData {
    children?: b.IBobrilChildren;
    isCombinedWithAppHeader?: boolean;
    isCombinedWithAppBreadcrumb?: boolean;
    toolbarSize?: Toolbar.Size;
}

export * from "./publicConstants";

interface IContext extends b.IBobrilCtx {
    data: IData;
}

// added by script - BEGIN
export const LViewAppToolbar = create;
// added by script - END
