import * as b from "bobril";
import { Icon, user_medium_png, group_medium_png } from "bobwai--icon";
import { Image } from "bobwai--image";
import * as Font from "bobwai--font";
import * as Mixins from "bobwai--style-mixins";
import * as Color from "bobwai--color";

export const defaultSize = 32;
export const defaultColor = Color.Grey500;

namespace localVariables {
    export const fontSize = 13;
    export const fontColor = Color.White;
}

const userSprite = b.sprite(user_medium_png, Color.White);
const groupSprite = b.sprite(group_medium_png, Color.White);

const randomColors = [
    Color.Chart_Blue500,
    Color.Chart_Green500,
    Color.Chart_Orange500,
    Color.Chart_Purple500,
    Color.Chart_Violet500,
    Color.Chart_Yellow700,
];

export enum AvatarIcon {
    User,
    Group,
}

export interface IData {
    colorSeed?: string;
    color?: Color.IColor;
    size?: number;
    imageSrc?: string;
    icon?: AvatarIcon | b.IBobrilNode;
    textContent?: string;
    hasBorder?: boolean;
    isClickable?: boolean;
}

export default class Avatar extends b.Component<IData> {
    static id = "bobwai--avatar";
    size = defaultSize;

    init() {
        this.size = this.data.size || defaultSize;
    }

    render(): b.IBobrilNode {
        return <div style={[avatarStyle, this.data.hasBorder && avatarWithBorderStyle, this.data.isClickable && avatarClickableStyle, this.style]}>{this.renderContent()}</div>;
    }

    renderContent(): b.IBobrilChild | undefined {
        if (this.data.textContent) {
            return <div style={[avatarTextContentStyle, getAvatarTextContentFontSizeStyle(this.size)]}>{this.data.textContent}</div>;
        } else if (this.data.imageSrc) {
            return <Image src={this.data.imageSrc} height={this.size} width={this.size} isRounded fitParent />;
        } else if (this.sprite) {
            return <Icon sprite={this.sprite} />;
        } else if (this.data.icon) {
            return this.data.icon;
        } else {
            return undefined;
        }
    }

    get style(): b.IBobrilStyle {
        return {
            width: this.size,
            height: this.size,
            backgroundColor: this.background,
        };
    }

    get background(): Color.IColor {
        if (this.data.imageSrc) {
            return "transparent";
        } else if (this.data.colorSeed) {
            return getRandomColor(this.data.colorSeed!);
        } else {
            return this.data.color || defaultColor;
        }
    }

    get sprite(): string | undefined {
        if (this.data.icon === AvatarIcon.Group) {
            return groupSprite;
        } else if (this.data.icon === AvatarIcon.User || !this.data.imageSrc) {
            return userSprite;
        } else {
            return undefined;
        }
    }
}

function hashString(text: string): number {
    let hash = 0;
    let chr;
    if (text.length === 0) return hash;
    for (let i = 0; i < text.length; i++) {
        chr = text.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
    }
    return Math.abs(hash);
}

function getRandomColor(text: string) {
    let hash = hashString(text);
    return randomColors[hash % randomColors.length];
}

export var create = b.component(Avatar, "bobwai--avatar");

const avatarStyle = b.styleDef([
    Mixins.getUnselectable(),

    {
        borderRadius: "50%",
        verticalAlign: "middle",
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        overflow: "hidden",
    }],
    {},
    "bobwai--avatar"
);

const avatarClickableStyle = b.styleDefEx(avatarStyle, Mixins.getClickableElement());

const avatarWithBorderStyle = b.styleDef({
    border: `1px solid ${localVariables.fontColor}`,
    boxSizing: "border-box",
});


const avatarTextContentStyle = b.styleDef([
   
    {
        fontWeight: Font.FontWeightSemibold,
        textAlign: "center",
        fontSize: localVariables.fontSize,
        color: localVariables.fontColor,
    },
]);

function getAvatarTextContentFontSizeStyle(avatarSize: number): b.IBobrilStyle | undefined {
    const defaultFontSize = localVariables.fontSize;
    const defaultAvatarSize = defaultSize;
    if (avatarSize !== defaultAvatarSize) {
        const ratioToDefault = avatarSize / defaultAvatarSize;
        return { fontSize: Math.round(ratioToDefault * defaultFontSize) };
    }
    return undefined;
}
