import * as b from "bobril";
import * as Example from "bobwai--example";
import * as Checkbox from "bobwai--checkbox";
import * as Textbox from "bobwai--textbox";
import * as Combobox from "bobwai--combobox";
import { create as Container } from "bobwai--viewer-container";
import Avatar, { AvatarIcon, IData } from "../src/avatar";
import * as Color from "bobwai--color";

const exampleData: IData = {};

Example.init({}, () => (
    <>
        <Container header="Default">
            <ControlPanel />
            <div style={{ margin: 15, background: Color.Basic_32 }}>
                <Avatar {...exampleData} />
                <Avatar {...exampleData} size={48} />
                <Avatar {...exampleData} size={64} />
            </div>
        </Container>

        <Container header="With text">
            <Avatar textContent={"A"} />
            <Avatar textContent={"A"} size={48} />
            <Avatar textContent={"A"} size={64} />
        </Container>

        <Container header="icon: user">
            <Avatar icon={AvatarIcon.User} />
        </Container>

        <Container header="icon: group">
            <Avatar icon={AvatarIcon.Group} />
        </Container>

        <Container header="image src">
            <Avatar imageSrc="https://www.w3schools.com/html/img_girl.jpg" />
            <Avatar imageSrc="https://www.w3schools.com/cssref/border.png" />
        </Container>

        <Container header="custom colors">
            <Avatar color={Color.Chart_Blue100} />
            <Avatar color={Color.Chart_Green100} />
            <Avatar color={Color.Chart_Orange100} />
            <Avatar color={Color.Chart_Purple100} />
            <Avatar color={Color.Chart_Violet100} />
            <Avatar color={Color.Chart_Yellow100} />
        </Container>

        <Container header="custom sizes">
            <Avatar size={40} />
            <Avatar size={70} />
            <Avatar size={100} />
            <Avatar size={100} imageSrc="https://www.w3schools.com/html/img_girl.jpg" />
            <Avatar size={70} imageSrc="https://www.w3schools.com/html/img_girl.jpg" />
            <Avatar size={40} imageSrc="https://www.w3schools.com/html/img_girl.jpg" />
        </Container>

        <Container header="random color">
            <Avatar colorSeed="Tony Stark" />
            <Avatar colorSeed="Natasha Romanoff" />
            <Avatar colorSeed="Clint Barton" />
            <Avatar colorSeed="Peter Parker" />
        </Container>

        <Container header="the same color is always returned for the same random color seed">
            <Avatar colorSeed="Peter Parker" />
            <Avatar colorSeed="Peter Parker" />
        </Container>

        <Container header="debug: no random background under transparent image">
            <Avatar imageSrc="https://www.w3schools.com/cssref/border.png" colorSeed="Tony Stark" />
        </Container>
    </>
));

function ControlPanel(): b.IBobrilNode {
    return Example.createControlPanel({
        items: [
            Example.createGroup({
                name: "Content settings",
                items: [
                    Example.createField({
                        fieldType: Example.FieldType.Note,
                        label: "Note",
                        value: "As a content there can be text, icon (predefined or custom), or image. But ever just one thing of these.",
                    }),
                    Example.createField({
                        fieldFactory: Checkbox.create,
                        fieldType: Example.FieldType.Checkbox,
                        value: exampleData.icon !== undefined,
                        onChange: (v) => {
                            if (v) {
                                exampleData.icon = AvatarIcon.User;
                            } else {
                                exampleData.icon = undefined;
                            }
                            b.invalidate();
                        },
                        label: "Has icon",
                    }),
                    Example.createField({
                        customValueContent: Example.createComboEnum({
                            comboboxFactory: Combobox.create,
                            enum: AvatarIcon,
                            onChange: (v) => {
                                exampleData.icon = v;
                                b.invalidate();
                            },
                            value: exampleData.icon as AvatarIcon,
                        }),
                        isDisabled: exampleData.icon === undefined,
                        label: "Avatar Icon",
                    }),
                    Example.createSeparator(),
                    Example.createField({
                        fieldFactory: Textbox.create,
                        fieldType: Example.FieldType.Textbox,
                        value: exampleData.imageSrc,
                        onChange: (v) => {
                            exampleData.imageSrc = v;
                            b.invalidate();
                        },
                        label: "Image Src",
                        note: "https://www.w3schools.com/html/img_girl.jpg",
                    }),
                    Example.createSeparator(),
                    Example.createField({
                        fieldFactory: Textbox.create,
                        fieldType: Example.FieldType.Textbox,
                        value: exampleData.textContent,
                        onChange: (v) => {
                            exampleData.textContent = v;
                            b.invalidate();
                        },
                        label: "Text Content",
                    }),
                ],
            }),
            Example.createSeparator(),
            Example.createGroup({
                name: "Other settings",
                items: [
                    Example.createField({
                        fieldType: Example.FieldType.IColor,
                        value: exampleData.color,
                        onChange: (v) => {
                            exampleData.color = v;
                            b.invalidate();
                        },
                        label: "Color",
                    }),
                    Example.createField({
                        fieldFactory: Textbox.create,
                        fieldType: Example.FieldType.Textbox,
                        value: exampleData.colorSeed,
                        onChange: (v) => {
                            exampleData.colorSeed = v;
                            b.invalidate();
                        },
                        label: "Color Seed",
                    }),
                    Example.createField({
                        fieldFactory: Checkbox.create,
                        fieldType: Example.FieldType.Checkbox,
                        value: exampleData.hasBorder,
                        onChange: (v) => {
                            exampleData.hasBorder = v;
                            b.invalidate();
                        },
                        label: "Has Border",
                    }),
                    Example.createField({
                        fieldFactory: Checkbox.create,
                        fieldType: Example.FieldType.Checkbox,
                        value: exampleData.isClickable,
                        onChange: (v) => {
                            exampleData.isClickable = v;
                            b.invalidate();
                        },
                        label: "is clickable",
                    }),
                ],
            }),
        ],
    });
}
