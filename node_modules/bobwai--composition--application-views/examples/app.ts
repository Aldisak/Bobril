import * as b from "bobril";
import * as LApp from "bobwai--l-app";
import * as LSidebar from "bobwai--l-view-sidebar";
import * as LAppHeader from "bobwai--l-view-app-header";
import * as LMainView from "bobwai--l-view-main";
import * as LContentWithFooter from "bobwai--l-view-content-with-footer";
import * as LTaskQueue from "bobwai--l-view-task-queue";
import * as LNotification from "bobwai--l-view-notification";
import * as HeaderButton from "bobwai--app-header-button";
import * as SampleTexts from "./src/sampleTexts";
import * as LViewAppBreadcrumb from "bobwai--l-view-app-breadcrumb";
import * as Color from "bobwai--color";
import * as ScrollShadow from "bobwai--scroll-shadow";
import * as Example from "bobwai--example";

let selectedExampleTitle = "Example 1";

function selectExample(title?: string) {
    if (title) {
        selectedExampleTitle = title;
    }
    b.invalidate();
}

function createHeaderContent(selectedIndex: number, description: string) {
    return b.styledDiv(
        [
            HeaderButton.create({
                title: "Example 1",
                onClick: () => {
                    selectExample("Example 1");
                },
                isSelected: selectedIndex === 1,
            }),
            HeaderButton.create({
                title: "Example 2",
                onClick: () => {
                    selectExample("Example 2");
                },
                isSelected: selectedIndex === 2,
            }),
            HeaderButton.create({
                title: "Example 3",
                onClick: () => {
                    selectExample("Example 3");
                },
                isSelected: selectedIndex === 3,
            }),
            HeaderButton.create({
                title: "Example 4",
                onClick: () => {
                    selectExample("Example 4");
                },
                isSelected: selectedIndex === 4,
            }),
            HeaderButton.create({
                title: "Example 5",
                onClick: () => {
                    selectExample("Example 5");
                },
                isSelected: selectedIndex === 5,
            }),
            HeaderButton.create({
                title: "Example 6",
                onClick: () => {
                    selectExample("Example 6");
                },
                isSelected: selectedIndex === 6,
            }),
            HeaderButton.create({
                title: "Example 7",
                onClick: () => {
                    selectExample("Example 7");
                },
                isSelected: selectedIndex === 7,
            }),
            description,
        ],
        headerStyle
    );
}

const sidebarContent = b.styledDiv(
    [h4("Here is the sidebar"), "Sidebar content"],
    b.styleDef({
        backgroundColor: Color.Chart_Yellow500,
    })
);

const sidebarContentRight = b.styledDiv(
    [h4("Here is right sidebar"), SampleTexts.largeText + SampleTexts.largeText],
    b.styleDef({
        backgroundColor: "#fed",
    })
);

const mainContent = b.styledDiv(
    [h4("Here is the main content"), SampleTexts.largeText],
    b.styleDef({
        backgroundColor: Color.Chart_Blue100,
    })
);

const mainContentLong = b.styledDiv(
    [h4("Here is the main content"), SampleTexts.largeText + SampleTexts.largeText],
    b.styleDef({
        backgroundColor: "#def",
    })
);

const taskQueueContent = b.styledDiv(
    [h4("Here is a task queue"), SampleTexts.mediumText],
    b.styleDef({
        backgroundColor: Color.Application,
    })
);

const notificationContent = b.styledDiv(
    [h4("Here is a notification"), SampleTexts.mediumText],
    b.styleDef({ backgroundColor: Color.Chart_Yellow100 })
);

const footerContent = b.styledDiv("Footer content", b.styleDef({ backgroundColor: Color.Chart_Green100 }));

const headerStyle = b.styleDef({ backgroundColor: Color.Success_30 });

function h4(text: string) {
    return { tag: "h4", children: text, style: { padding: 0, margin: 0 } };
}

const breadcrumbContent = LViewAppBreadcrumb.create({
    children: "Breadcrumb content",
    isCombinedWithAppHeader: true,
});

function createApp1() {
    return LApp.create({
        children: [
            LAppHeader.create({
                children: createHeaderContent(
                    1,
                    "Application page with app-header, breadcrumb, sidebar, content, notification (empty) and task-queue"
                ),
            }),
            breadcrumbContent,
            LSidebar.create({
                isCombinedWithAppBreadcrumb: true,
                isCombinedWithAppHeader: true,
                children: sidebarContent,
            }),
            LMainView.create({
                children: mainContent,
                isCombinedWithSidebar: true,
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LTaskQueue.create({
                children: taskQueueContent,
            }),
            LNotification.create({
                children: notificationContent,
            }),
        ],
    });
}

// Create application page with app-header, sidebar, content, notification (filled) and task-queue
function createApp2() {
    return LApp.create({
        children: [
            LAppHeader.create({
                children: createHeaderContent(
                    2,
                    "Application page with app-header," + " sidebar, content, notification (filled) and task-queue"
                ),
            }),
            LSidebar.create({
                children: sidebarContent,
                isCombinedWithAppHeader: true,
            }),
            LMainView.create({
                children: mainContent,
                isCombinedWithSidebar: true,
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: false,
            }),
            LTaskQueue.create({
                children: taskQueueContent,
            }),
            LNotification.create({
                children: notificationContent,
                isCombinedWithSidebar: true,
            }),
        ],
    });
}

// Create application page with app-header, sidebar (with footer), content and task-queue
function createApp3() {
    return LApp.create({
        children: [
            LAppHeader.create({
                children: createHeaderContent(
                    3,
                    "Application page with app-header, breadcrumb," + " sidebar (with footer), content and task-queue"
                ),
            }),
            breadcrumbContent,
            LSidebar.create({
                children: LContentWithFooter.create({
                    bodyContent: sidebarContent,
                    footerContent: footerContent,
                }),
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LMainView.create({
                children: mainContent,
                isCombinedWithSidebar: true,
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LTaskQueue.create({
                children: taskQueueContent,
            }),
        ],
    });
}

// Create application page with app-header, sidebar (overflow with footer), content and task-queue
function createApp4() {
    return LApp.create({
        children: [
            LAppHeader.create({
                children: createHeaderContent(
                    4,
                    "Application page with app-header, breadcrumb, " + "sidebar (overflow with footer), content and task-queue"
                ),
            }),
            breadcrumbContent,
            LSidebar.create({
                children: LContentWithFooter.create({
                    bodyContent: [h4("Here is the sidebar"), SampleTexts.largeText],
                    footerContent: footerContent,
                }),
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LMainView.create({
                children: mainContent,
                isCombinedWithSidebar: true,
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LTaskQueue.create({
                children: taskQueueContent,
            }),
        ],
    });
}

// Create application page with app-header, sidebar, content (with footer) and task-queue
function createApp5() {
    return LApp.create({
        children: [
            LAppHeader.create({
                children: createHeaderContent(
                    5,
                    "Application page with app-header, breadcrumb, " + "sidebar, content (with footer) and task-queue"
                ),
            }),
            breadcrumbContent,
            LSidebar.create({
                children: sidebarContent,
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LMainView.create({
                children: LContentWithFooter.create({
                    bodyContent: [h4("Here is the main content"), "Main content"],
                    footerContent: footerContent,
                }),
                isCombinedWithSidebar: true,
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LTaskQueue.create({
                children: taskQueueContent,
            }),
        ],
    });
}

// Create application page with app-header, sidebar, content (overflow with footer) and task-queue
function createApp6() {
    return LApp.create({
        children: [
            LAppHeader.create({
                children: createHeaderContent(
                    6,
                    "Application page with app-header, breadcrumb, sidebar," + " content (overflow with footer) and task-queue"
                ),
            }),
            breadcrumbContent,
            LSidebar.create({
                children: sidebarContent,
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LMainView.create({
                children: LContentWithFooter.create({
                    bodyContent: [h4("Here is the main content"), SampleTexts.largeText + SampleTexts.largeText],
                    footerContent: footerContent,
                }),
                isCombinedWithSidebar: true,
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LTaskQueue.create({
                children: taskQueueContent,
            }),
        ],
    });
}

function createApp7() {
    return LApp.create({
        children: [
            LAppHeader.create({
                children: createHeaderContent(
                    1,
                    "Application page with app-header, breadcrumb, sidebar, content, notification (empty) and task-queue"
                ),
            }),
            breadcrumbContent,
            LSidebar.create({
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
                children: sidebarContent,
            }),
            LSidebar.create({
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
                children: ScrollShadow.create({
                    content: sidebarContentRight,
                }),
                isRightSidebar: true,
            }),
            LMainView.create({
                children: ScrollShadow.create({
                    content: mainContentLong,
                }),
                isCombinedWithSidebar: true,
                isCombinedWithRightSidebar: true,
                isCombinedWithAppHeader: true,
                isCombinedWithAppBreadcrumb: true,
            }),
            LTaskQueue.create({
                children: taskQueueContent,
            }),
            // LNotification.create({
            //     children: notificationContent
            // })
        ],
    });
}

Example.init({}, () => {
    switch (selectedExampleTitle) {
        case "Example 1":
            return createApp1();
        case "Example 2":
            return createApp2();
        case "Example 3":
            return createApp3();
        case "Example 4":
            return createApp4();
        case "Example 5":
            return createApp5();
        case "Example 6":
            return createApp6();
        case "Example 7":
            return createApp7();
        default:
            return createApp1();
    }
});
