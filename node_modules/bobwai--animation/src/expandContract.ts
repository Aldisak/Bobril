import * as b from "bobril";
import { IShowHideAnimation, IAnimationTransition, ShowDirection, OffsetType } from "./lib";

export function expandContractAnimation(direction?: ShowDirection, offset?: number, offsetType?: OffsetType): IShowHideAnimation {
    return {
        baseStyle: getTranslatedStyle(direction, offset, undefined, offsetType),
        showStyle: [defaultTransactionStyle, { transform: "translate(0,0)" }],
        hideStyle: getTranslatedStyle(direction, offset, returnTransactionStyle, offsetType),
        containerStyle: expandContractContainerStyle,
        showStyleDuration: localVariables.expandContractDuration,
        hideStyleDuration: localVariables.expandContractDuration
    };
}

export function expandContractTransition(): IAnimationTransition {
    return {
        defaultTransition: defaultTransactionStyle,
        returnTransition: returnTransactionStyle
    };
}

function getTranslatedStyle(
    direction?: ShowDirection,
    offset?: number,
    transitionStyle?: b.IBobrilStyle,
    offsetType?: OffsetType
): b.IBobrilStyles {
    let sideOffset = offset !== undefined && offsetType !== OffsetType.FromBeginning ? `${offset}px` : "100%";

    switch (direction) {
        case ShowDirection.Left:
            return [
                transitionStyle,
                { transform: `translate(${sideOffset}, 0) ${getFromBeginningOffsetTypeDeclarationIfNeeded(direction, offset, offsetType)}` }
            ];
        case ShowDirection.Right:
            return [
                transitionStyle,
                {
                    transform: `translate(-${sideOffset}, 0) ${getFromBeginningOffsetTypeDeclarationIfNeeded(
                        direction,
                        offset,
                        offsetType
                    )}`
                }
            ];
        case ShowDirection.Up:
            return [
                transitionStyle,
                { transform: `translate(0, ${sideOffset}) ${getFromBeginningOffsetTypeDeclarationIfNeeded(direction, offset, offsetType)}` }
            ];
        default:
            return [
                transitionStyle,
                {
                    transform: `translate(0, -${sideOffset}) ${getFromBeginningOffsetTypeDeclarationIfNeeded(
                        ShowDirection.Down,
                        offset,
                        offsetType
                    )}`
                }
            ];
    }
}

function getFromBeginningOffsetTypeDeclarationIfNeeded(showDirection: ShowDirection, offset?: number, offsetType?: OffsetType): string {
    if (offsetType === OffsetType.FromBeginning && offset !== undefined) {
        let sideOffset = `${offset}px`;
        switch (showDirection) {
            case ShowDirection.Left:
                return `translate(-${sideOffset}, 0)`;
            case ShowDirection.Right:
                return `translate(${sideOffset}, 0)`;
            case ShowDirection.Up:
                return `translate(0, -${sideOffset})`;
            default:
                return `translate(0, ${sideOffset})`;
        }
    }
    return "";
}

namespace localVariables {
    export const expandContractDuration: number = 200;
}

const defaultTransactionStyle: b.IBobrilStyleDef = b.styleDef({
    transition: `all ${localVariables.expandContractDuration}ms ease-out`
});

const returnTransactionStyle: b.IBobrilStyleDef = b.styleDef({
    transition: `all ${localVariables.expandContractDuration}ms ease-in-out`
});

const expandContractContainerStyle: b.IBobrilStyleDef = b.styleDef({
    overflow: "hidden"
});
