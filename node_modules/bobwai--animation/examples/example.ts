import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as Testbox from "./src/testBox";
import * as Spinner from "bobwai--spinner";
import * as Combobox from "bobwai--combobox";
import * as Color from "bobwai--color";
import * as Animation from "../src/lib";

let states: boolean[] = [];
let index = 0;
let expandContractAnimationOffset: number | undefined;
let expandContractAnimationOffsetType: Animation.OffsetType | undefined;

Example.init({}, () => {
    index = 0;
    return [
        Example.createControlPanel({
            items: [
                Example.createField({
                    fieldType: Example.FieldType.Note,
                    value: `Bobwai--animation component contains definitions of animation types according to graphic specification.`,
                    label: `Note`
                }),
                Example.createField({
                    fieldType: Example.FieldType.Note,
                    value: `Definition has two object types: IShowHideAnimation should be use as input data for bobwai--animation-frame component.
                    IAnimationTransition should be use directly inside component style definition as transition definition.`,
                    label: `Object types`
                })
            ]
        }),
        Container.create({
            description: "Hover it to show animation process",
            header: "Bobwai--animation: Fade in fade out animation type",
            content: createTestbox("fadeInFadeOutAnimation", Animation.fadeInFadeOutAnimation(), index++)
        }),
        Container.create({
            description: "Hover it to show animation process",
            header: "Bobwai--animation: Expand contract animation type",
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            fieldFactory: Spinner.create,
                            fieldType: Example.FieldType.Spinner,
                            onChange: (v: number) => {
                                expandContractAnimationOffset = v;
                                b.invalidate();
                            },
                            value: expandContractAnimationOffset,
                            minValue: 0,
                            label: "Offset (px)"
                        }),
                        Example.createField({
                            fieldType: Example.FieldType.Note,
                            value: "For testing in this example set some small value e.g. 25",
                            label: "Note"
                        }),
                        Example.createField({
                            customValueContent: Example.createComboEnum({
                                comboboxFactory: Combobox.create,
                                onChange: v => {
                                    expandContractAnimationOffsetType = v;
                                    b.invalidate();
                                },
                                enum: Animation.OffsetType,
                                value: expandContractAnimationOffsetType
                            }),
                            label: "Offset type"
                        }),
                        Example.createField({
                            fieldType: Example.FieldType.Note,
                            value: "ToEnd (Default) - offseted part missing into full state on start state",
                            label: "Note"
                        }),
                        Example.createField({
                            fieldType: Example.FieldType.Note,
                            value: "FromBeginning - only offseted part is visible on start state",
                            label: "Note"
                        })
                    ]
                }),
                createTestbox(
                    "DOWN direction - default",
                    Animation.expandContractAnimation(
                        Animation.ShowDirection.Down,
                        expandContractAnimationOffset,
                        expandContractAnimationOffsetType
                    ),
                    index++
                ),
                createTestbox(
                    "UP direction",
                    Animation.expandContractAnimation(
                        Animation.ShowDirection.Up,
                        expandContractAnimationOffset,
                        expandContractAnimationOffsetType
                    ),
                    index++
                ),
                createTestbox(
                    "RIGHT direction",
                    Animation.expandContractAnimation(
                        Animation.ShowDirection.Right,
                        expandContractAnimationOffset,
                        expandContractAnimationOffsetType
                    ),
                    index++
                ),
                createTestbox(
                    "LEFT direction",
                    Animation.expandContractAnimation(
                        Animation.ShowDirection.Left,
                        expandContractAnimationOffset,
                        expandContractAnimationOffsetType
                    ),
                    index++
                )
            ]
        })
    ];
});

function createTestbox(text: string, animation: Animation.IShowHideAnimation, index: number): b.IBobrilChildren {
    return Testbox.create({
        content: b.styledDiv(
            [createBox(text, false), createBox(text + " (active)", true, states[index] ? animation.showStyle : animation.hideStyle)],
            [boxesStyle, animation.containerStyle]
        ),
        onStateChange: (isActive: boolean) => {
            states[index] = isActive;
            b.invalidate();
        }
    });
}

function createBox(text: string, isActivePart: boolean, customStyles?: b.IBobrilStyles): b.IBobrilChildren {
    return b.styledDiv(text, [boxBaseStyle, isActivePart && boxActiveStyle, customStyles]);
}

const boxesStyle = b.styleDef({
    position: "relative",
    width: "100%",
    height: "100%"
});

const boxBaseStyle = b.styleDef({
    border: "1px solid gray",
    position: "absolute",
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    background: Color.White,
    color: Color.Basic
});

const boxActiveStyle = b.styleDefEx(boxBaseStyle, {
    background: Color.Error
});
