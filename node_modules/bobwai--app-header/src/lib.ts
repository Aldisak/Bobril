export * from "./styles";
import * as b from "bobril";
import * as styles from "./styles";
import { IColor } from "bobwai--color";

export const create = b.createComponent<IData>({
    id: "bobwai--app-header",
    render(ctx: IContext, me: b.IBobrilNode): void {
        me.children = [
            ctx.data.leftContent && b.styledDiv(ctx.data.leftContent, styles.leftStyle),
            ctx.data.centerContent &&
                b.styledDiv(
                    ctx.data.centerContent,
                    styles.centerStyle,
                    ctx.data.centerContentAlign === CenterContentAlign.PageCenter && styles.centeredWithinPageStyle
                ),
            ctx.data.rightContent && b.styledDiv(ctx.data.rightContent, styles.rightStyle),
            (ctx.data.theme === Theme.Light || ctx.data.theme === Theme.DXBLight) && b.styledDiv("", styles.bottomBorderStyle),
        ];
        me.attrs = {
            tabindex: -1,
        };
        b.style(me, [styles.baseStyle, isRightContentOnly(ctx.data) && styles.baseWithRightContentOnlyStyle, getThemeStyle(ctx.data)]);
    },
    onClick(ctx: b.IBobrilCtx, _e: b.IBobrilMouseEvent): boolean {
        if (b.ieVersion() > 0) {
            const element: HTMLElement = <HTMLElement>b.getDomNode(ctx.me);
            if (element) {
                element.focus();
            }
        }
        return false;
    },
});

function isRightContentOnly(data: IData): boolean {
    return (!data.leftContent && !data.centerContent) || (!data.leftContent && data.centerContentAlign === CenterContentAlign.PageCenter);
}

export interface IData {
    leftContent?: b.IBobrilChildren;
    rightContent?: b.IBobrilChildren;
    centerContent?: b.IBobrilChildren;
    centerContentAlign?: CenterContentAlign;
    theme?: Theme;
    customTheme?: ICustomTheme;
}

export enum Theme {
    Default,
    Light,
    DXBLight,
    OMS500,
    Custom,
}

export enum CenterContentAlign {
    /**
     * centered within free space between left & right content
     */
    Default,
    /**
     * centered within whole page
     */
    PageCenter,
}

export interface ICustomTheme {
    backgroundColor?: IColor;
}

export * from "./publicConstants";

interface IContext extends b.IBobrilCtx {
    data: IData;
}

function getThemeStyle(data: IData): b.IBobrilStyle {
    switch (data.theme) {
        case Theme.Light: {
            return styles.lightStyle;
        }
        case Theme.DXBLight: {
            return styles.dxbLightStyle;
        }
        case Theme.OMS500: {
            return styles.oms500Style;
        }
        case Theme.Custom: {
            return { background: data.customTheme && data.customTheme.backgroundColor };
        }
        default:
            return undefined;
    }
}

// added by script - BEGIN
export const AppHeader = create;
// added by script - END
