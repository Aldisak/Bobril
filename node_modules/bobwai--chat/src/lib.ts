import * as b from "bobril";
import { t } from "bobril-g11n";
import * as s from "./styles";
import * as ScrollShadow from "bobwai--scroll-shadow";
import * as rootCommentFactory from "./rootComment";
import * as submitedCommentFactory from "./submitedComment";
import { IChatWebContentAccessibility } from "./webContentAccessibility";
import { User } from "bobwai--textarea-tagged";

export const defaultText = "";
export { IValidations } from "./rootComment";
export * from "./publicConstants";
export * from "./webContentAccessibility";

export function create<TId extends IToString>(data: IData<TId>): b.IBobrilNode<IData<TId>> {
    return b.createComponent<IData<TId>>({
        id: "bobwai--chat",
        render(ctx: IContext<TId>, me: b.IBobrilNode): void {
            applyCallbackLogic(ctx.data);
            b.style(me, s.chatWrapperStyle);
            const validations = ctx.data.validations || <rootCommentFactory.IValidations>{};
            me.children = [
                !ctx.data.newCommentOff &&
                    b.styledDiv(
                        b.withKey(
                            rootCommentFactory.create({
                                isActive: ctx.data.activeCommentId === ctx.data.defaultRootCommentId,
                                webContentAccessibility: ctx.data.webContentAccessibility,
                                submitLabel: ctx.data.labels.submit,
                                newCommentLabel: ctx.data.labels.newComment,
                                icon: ctx.data.icon,
                                inputValue:
                                    ctx.data.activeCommentId === ctx.data.defaultRootCommentId ? ctx.data.activeCommentValue : defaultText,
                                onSubmit: () => ctx.data.onActiveCommentSubmit(ctx.data.defaultRootCommentId, ctx.data.activeCommentValue),
                                onActive: () => ctx.data.onChangeActiveCommentId(ctx.data.defaultRootCommentId),
                                onValueChanged: ctx.data.onChangeActiveCommentValue,
                                submitControlPanel: ctx.data.submitControlPanel,
                                label: ctx.data.labels.label,
                                headerOff: !!ctx.data.headerOff,
                                validations,
                                avatarOff: ctx.data.avatarOff,
                                rootFocused: ctx.data.rootFocused,
                                maxLengthInput: ctx.data.maxLengthInput,
                                userList: ctx.data.userList,
                                placeholderText: ctx.data.placeholderText
                            }),
                            "header_new_comments"
                        ),
                        s.newCommentStyle
                    ),
                b.styledDiv(
                    b.withKey(
                        ScrollShadow.create({
                            content: ctx.data.comments.map(c => createSubmittedComment(c, ctx))
                        }),
                        "Scroll_Shadow_Content"
                    ),
                    getHeightStyleForScrollContent(ctx)
                )
            ];
        },
        onFocusOut(ctx: IContext<TId>): void {
            ctx.data.blurSave && ctx.data.onActiveComment && ctx.data.onActiveComment(undefined);
        }
    })(data);
}

function createSubmittedComment<TId extends IToString>(comment: IComment<TId>, ctx: IContext<TId>): b.IBobrilNodeWithKey {
    const validations = ctx.data.validations || <rootCommentFactory.IValidations>{};
    return b.withKey(
        b.styledDiv(
            [
                submitedCommentFactory.create({
                    submitLabel: ctx.data.labels.submit,
                    webContentAccessibility: ctx.data.webContentAccessibility,
                    isReply: false,
                    content: comment.text,
                    inputValue: ctx.data.activeCommentId === comment.id ? ctx.data.activeCommentValue : defaultText,
                    replies: createSubmitedCommentReplies(comment.replies, comment.id, ctx, comment.isDisabled),
                    author: comment.userName
                        ? comment.userName
                        : comment.isSystemComment
                        ? ctx.data.systemCommentName
                            ? ctx.data.systemCommentName
                            : t("system")
                        : "",
                    date: comment.created,
                    parentCommentId: comment.id,
                    onSubmitReply: () => ctx.data.onActiveCommentSubmit(comment.id, ctx.data.activeCommentValue),
                    isActive: ctx.data.activeCommentId === comment.id,
                    isEditable: comment.isEditable && comment.replies.length === 0,
                    submitControlPanel: comment.submitControlPanel,
                    onActive: () => {
                        ctx.data.onChangeActiveCommentId(comment.id, comment.isEditable ? comment.text : defaultText);
                    },
                    onEdit: () => {
                        ctx.data.onEditComment && ctx.data.onEditComment(comment.id, ctx.data.activeCommentValue);
                    },
                    onEditFocusOut: () => {
                        ctx.data.onEditFocusOutComment && ctx.data.onEditFocusOutComment(comment.id, ctx.data.activeCommentValue);
                    },
                    onDelete: () => {
                        ctx.data.onDeleteComment && ctx.data.onDeleteComment(comment.id);
                    },
                    onCancelComment: () => {
                        ctx.data.onCancelComment && ctx.data.onCancelComment();
                    },
                    onActiveComment: () => {
                        ctx.data.onActiveComment && ctx.data.onActiveComment(comment.id);
                    },
                    onCollapseReplies: () => {
                        ctx.data.onCollapseReplies && ctx.data.onCollapseReplies(comment.id);
                    },
                    onMarkComment: () => {
                        ctx.data.onMarkComment && ctx.data.onMarkComment(comment.id);
                    },
                    contextMenuItems:
                        ctx.data.getContextMenuItems &&
                        ctx.data.getContextMenuItems(comment.id, comment.text, isReplies<TId>(comment.replies)),
                    onValueChanged: ctx.data.onChangeActiveCommentValue,
                    replyButtonLabel: ctx.data.labels.reply,
                    icon: comment.icon,
                    replyIcon: comment.replyIcon,
                    controlPanel: comment.controlPanel,
                    isSelected: comment.isSelected,
                    isDisabled: comment.isDisabled,
                    isScrolledTo: comment.isScrolledTo,
                    validations,
                    cancelLabel: ctx.data.labels.cancel,
                    editLabel: ctx.data.labels.edit,
                    collapseLabel: ctx.data.labels.collapse,
                    removeCommentLabel: ctx.data.labels.removeComment,
                    okLabel: ctx.data.labels.ok,
                    avatarOff: ctx.data.avatarOff,
                    isCollapsible: ctx.data.isCollapsible,
                    isMarkable: ctx.data.isMarkable,
                    maxLengthInput: ctx.data.maxLengthInput,
                    isCollapsed: comment.isCollapsed,
                    isMarked: comment.isMarked,
                    highlightFullComment: ctx.data.highlightFullComment,
                    readOnly: ctx.data.readOnly,
                    blurSave: ctx.data.blurSave,
                    userList: ctx.data.userList,
                    placeholderText: ctx.data.placeholderText
                }),
                b.withKey(b.styledDiv("", ctx.data.avatarOff ? s.commentSeparatorWithoutAvatarStyle : s.commentSeparatorStyle), "separator")
            ],
            {}
        ),
        comment.id.toString()
    );
}

function createSubmitedCommentReplies<TId extends IToString>(
    replies: IComment<TId>[],
    parentId: TId,
    ctx: IContext<TId>,
    parentDisabled: boolean | undefined
): b.IBobrilNodeWithKey[] {
    return replies.map(r =>
        b.withKey(
            submitedCommentFactory.create({
                webContentAccessibility: ctx.data.webContentAccessibility,
                submitLabel: ctx.data.labels.submit,
                isActive: ctx.data.activeCommentId === r.id,
                isEditable: r.isEditable,
                inputValue: r.isEditable ? ctx.data.activeCommentValue : defaultText,
                isReply: true,
                replies: [],
                content: r.text,
                author: r.userName,
                date: r.created,
                controlPanel: r.controlPanel,
                onActive: () => {
                    r.isEditable && ctx.data.onChangeActiveCommentId(r.id, r.text, parentId);
                },
                onEdit: () => {
                    ctx.data.onEditComment && ctx.data.onEditComment(r.id, ctx.data.activeCommentValue, parentId);
                },
                onEditFocusOut: () => {
                    ctx.data.onEditFocusOutComment && ctx.data.onEditFocusOutComment(r.id, ctx.data.activeCommentValue, parentId);
                },
                onDelete: () => {
                    r.isEditable && ctx.data.onDeleteComment && ctx.data.onDeleteComment(r.id);
                },
                onCancelComment: () => {
                    ctx.data.onCancelComment && ctx.data.onCancelComment();
                },
                onActiveComment: () => {
                    ctx.data.onActiveComment && ctx.data.onActiveComment(parentId);
                },
                contextMenuItems: ctx.data.getContextMenuItems && ctx.data.getContextMenuItems(r.id, r.text, isReplies<TId>(r.replies)),
                onValueChanged: ctx.data.onChangeActiveCommentValue,
                replyButtonLabel: ctx.data.labels.reply,
                icon: r.icon,
                isSelected: r.isSelected,
                isDisabled: parentDisabled,
                validations: ctx.data.validations,
                cancelLabel: ctx.data.labels.cancel,
                editLabel: ctx.data.labels.edit,
                removeCommentLabel: ctx.data.labels.removeComment,
                okLabel: ctx.data.labels.ok,
                avatarOff: ctx.data.avatarOff,
                highlightFullComment: ctx.data.highlightFullComment,
                readOnly: ctx.data.readOnly,
                blurSave: ctx.data.blurSave,
                maxLengthInput: ctx.data.maxLengthInput,
                userList: ctx.data.userList,
                placeholderText: ctx.data.placeholderText
            }),
            r.id.toString()
        )
    );
}

function isReplies<TId extends IToString>(replies: IComment<TId>[]): boolean {
    return replies !== undefined && replies.length > 0;
}

function getHeightStyleForScrollContent<TId extends IToString>(ctx: IContext<TId>): b.IBobrilStyles {
    const rootCommentHeight =
        s.submitButtonHeight + s.textAreaHeight + 2 * s.textAreaPadding + 4 * s.borderWidth + 4 + s.wrapperPaddingBottom;

    return ctx.data.newCommentOff
        ? [s.commentSectionStyle, { height: "100%" }]
        : [
              s.commentSectionStyle,
              ctx.data.headerOff && ctx.data.avatarOff && { height: `calc(100% - ${rootCommentHeight + s.newRootCommentLabel}px)` },
              ctx.data.headerOff && !ctx.data.avatarOff && { height: `calc(100% - ${rootCommentHeight}px)` },
              !ctx.data.headerOff &&
                  ctx.data.avatarOff && {
                      height: `calc(100% - ${s.labelPaddingTop +
                          s.labelFontSize +
                          6 +
                          s.labelPaddingBottom +
                          s.borderWidth +
                          s.labelMarginBottom +
                          s.textAreaHeight +
                          2 * s.textAreaPadding +
                          3 * s.borderWidth +
                          s.submitButtonHeight +
                          s.wrapperPaddingBottom +
                          s.newRootCommentLabel}px)`
                  }
          ];
}

function applyCallbackLogic<TId extends IToString>(data: IData<TId>): void {
    const { onChangeActiveCommentId, onChangeActiveCommentValue, onActiveCommentSubmit } = data;
    data.onChangeActiveCommentId = (commentId, text, parentId) => {
        if (data.activeCommentId === commentId) {
            return;
        }
        onChangeActiveCommentId(commentId, defaultText, parentId);
        onChangeActiveCommentValue(text ? text : defaultText);
    };
    data.onActiveCommentSubmit = (parentCommentId, text) => {
        onActiveCommentSubmit(parentCommentId, text);
        if (parentCommentId !== data.defaultRootCommentId) {
            onChangeActiveCommentId(data.defaultRootCommentId);
        }
        onChangeActiveCommentValue(defaultText);
    };
}

interface IContext<TId extends IToString> extends b.IBobrilCtx {
    data: IData<TId>;
}

export interface ILabels {
    submit: string;
    reply: string;
    label: string;
    cancel?: string;
    edit?: string;
    removeComment?: string;
    newComment?: string;
    collapse?: string;
    ok?: string;
}

export interface IData<TId extends IToString> {
    headerOff?: boolean;
    shortcutComments?: number;
    labels: ILabels;
    comments: IComment<TId>[];
    icon: b.IBobrilNode;
    submitControlPanel?: b.IBobrilNode;
    activeCommentId?: TId;
    defaultRootCommentId: TId;
    avatarOff?: boolean;
    onActiveComment?: (commentId: TId | undefined) => void;
    onChangeActiveCommentId: (commentId: TId, text?: string, parentId?: TId) => void;
    onEditComment?: (commentId: TId, value: string, parentId?: TId) => void;
    onEditFocusOutComment?: (commentId: TId, value: string, parentId?: TId) => void;
    onDeleteComment?: (commentId: TId, parent?: number) => void;
    onMarkComment?: (commentId: TId) => void;
    onCollapseReplies?: (commentId: TId) => void;
    onCancelComment?: () => void;
    activeCommentValue: string;
    onChangeActiveCommentValue: (value: string) => void;
    onActiveCommentSubmit: (parentCommentId: TId, text: string) => void;
    getContextMenuItems?: (commentId: TId, value: string, isReplies: boolean) => ICommentContextMenuItem[];
    validations?: rootCommentFactory.IValidations;
    systemCommentName?: string;
    newCommentOff?: boolean;
    rootFocused?: boolean;
    isCollapsible?: boolean;
    isMarkable?: boolean;
    maxLengthInput?: number;
    highlightFullComment?: boolean;
    readOnly?: boolean;
    blurSave?: boolean;
    webContentAccessibility?: IChatWebContentAccessibility;
    userList?: User[];
    placeholderText?: string;
}

export interface ICommentContextMenuItem {
    content: string;
    iconContent: b.IBobrilNode;
    onClick: () => void;
}

export interface IToString {
    toString: () => string;
}

export interface IComment<TId extends IToString> {
    id: TId;
    text: string;
    userName: string;
    isSystemComment?: boolean;
    created: string;
    replies: IComment<TId>[];
    icon: b.IBobrilNode;
    replyIcon?: b.IBobrilNode;
    isSelected?: boolean;
    isDisabled?: boolean;
    isScrolledTo?: boolean;
    isEditable?: boolean;
    isMarked?: boolean;
    isCollapsed?: boolean;
    controlPanel?: b.IBobrilNode;
    submitControlPanel?: b.IBobrilNode;
}

// added by script - BEGIN
export const Chat = create;
// added by script - END
