import * as b from "bobril";

const scrollPadding = 5;

export interface IContext extends b.IBobrilCtx {
    wasSelected: boolean;
    wasScrolledTo: boolean;
}

export function scrollIntoViewIfNeeded(ctx: IContext, isSelected: boolean, isScrolledTo: boolean, elem: HTMLElement): void {
    if (ctx.wasSelected === isSelected && ctx.wasScrolledTo === isScrolledTo) return;
    ctx.wasSelected = isSelected;
    ctx.wasScrolledTo = isScrolledTo;
    if (!isSelected && !isScrolledTo) return;

    let scrollParent = getScrollParent(elem.parentElement);
    if (!scrollParent) return;
    let scrollParentRect = scrollParent.getBoundingClientRect();
    let elemRect = elem.getBoundingClientRect();
    let expectedArea = {
        top: elemRect.top - scrollPadding,
        bottom: elemRect.bottom + scrollPadding
    };

    if (scrollParentRect.top > expectedArea.top || expectedArea.bottom - expectedArea.top > scrollParentRect.bottom - scrollParentRect.top)
        scrollParent.scrollTop += expectedArea.top - scrollParentRect.top;
    else if (scrollParentRect.bottom < expectedArea.bottom) scrollParent.scrollTop += expectedArea.bottom - scrollParentRect.bottom;
}

function getScrollParent(elem: HTMLElement | null): HTMLElement | null {
    if (!elem) return null;
    if (b.isScrollable(elem)[1]) return elem;
    else return getScrollParent(elem.parentElement);
}
