import * as b from "bobril";
import * as Textarea from "bobwai--textarea";
import * as keyboard from "bobwai--keyboard-events";
import * as color from "bobwai--color";
import * as rs from "./replyStyle";
import * as s from "./styles";
import * as Icon from "bobwai--icon";
import * as button from "bobwai--button";
import * as cps from "./controlPanelStyle";
import { IValidations } from "./rootComment";
import * as validationHelper from "helpers--validations";
import { IChatWebContentAccessibility } from "./webContentAccessibility";
import * as TextareaTagged from "bobwai--textarea-tagged";
import { User } from "bobwai--textarea-tagged";

export const createReply = b.createComponent<IReplyData>({
    id: "bobwai--chat-reply-button",
    render(replyCtx: IReplyContext, me: b.IBobrilNode) {
        b.style(me, rs.replyTextStyle);
        me.children = button.create({
            onClick: replyCtx.data.onClick,
            label: replyCtx.data.label,
            size: button.Size.Small,
            color: button.Theme.None
        });
    }
});

interface IReplyContext extends b.IBobrilCtx {
    data: IReplyData;
}

export interface IReplyData {
    label: string;
    onClick: () => void;
}

export let create = b.createComponent<IData>({
    id: "bobwai--chat-reply",
    render(ctx: IContext, me: b.IBobrilNode) {
        let ri = !!ctx.data.icon;
        let validations = ctx.data.validations;
        me.children = b.styledDiv(
            [
                !ctx.data.avatarOff &&
                    b.styledDiv(ri ? ctx.data.icon : null, rs.editboxSubIconStyle, !ri && b.sprite(Icon.user_small_24_png, color.White)),
                b.styledDiv(
                    b.withKey(
                        keyboard.create({
                            children:
                                validations && validations.validationsCursor !== undefined
                                    ? ctx.data.userList && ctx.data.userList.length > 0
                                        ? validationHelper.validationComponent<TextareaTagged.IData, string, {}>({
                                              builder: TextareaTagged.create,
                                              componentData: <TextareaTagged.IData>b.assign(
                                                  createComponentDataForValidatorHelper(ctx, validations),
                                                  {
                                                      userList: ctx.data.userList
                                                  }
                                              ),
                                              validationsCursor: validations.validationsCursor,
                                              propertyName: validations.propertyName,
                                              localizeErrorMessage: validations.localizeErrorMessage,
                                              validationTypeEnum: validations.validationTypeEnum
                                          })
                                        : validationHelper.validationComponent<Textarea.IData, string, {}>({
                                              builder: Textarea.create,
                                              componentData: <Textarea.IData>createComponentDataForValidatorHelper(ctx, validations),
                                              validationsCursor: validations.validationsCursor,
                                              propertyName: validations.propertyName,
                                              localizeErrorMessage: validations.localizeErrorMessage,
                                              validationTypeEnum: validations.validationTypeEnum
                                          })
                                    : ctx.data.userList && ctx.data.userList.length > 0
                                    ? TextareaTagged.create(b.assign(createTextareaData(ctx), { userList: ctx.data.userList }))
                                    : Textarea.create(createTextareaData(ctx)),
                            onEnterPress: () => {
                                if (!ctx.data.inputValue || !ctx.data.inputValue.trim() || isInvalid(ctx.data)) return false;
                                setBlurSaveWasTrigged(ctx);
                                ctx.data.onSubmit();
                                return true;
                            },
                            onEscPress: () => {
                                ctx.data.onValueChanged("");
                                return true;
                            }
                        }),
                        "reply_textarea"
                    ),
                    ctx.data.avatarOff ? rs.editboxSubTextboxWithouAvatarStyle : rs.editboxSubTextboxStyle
                ),
                ctx.data.controlPanel && b.styledDiv(ctx.data.controlPanel, cps.leftReplyControlPanelStyle),
                ctx.data.activeControlPanel && b.styledDiv(ctx.data.activeControlPanel, cps.leftReplyControlPanelStyle),
                b.styledDiv(
                    b.withKey(
                        button.create({
                            onClick: () => {
                                setBlurSaveWasTrigged(ctx);
                                ctx.data.onSubmit();
                            },
                            label: ctx.data.blurSave && ctx.data.okLabel ? ctx.data.okLabel : ctx.data.submitLabel,
                            size: button.Size.Small,
                            color: button.Theme.None,
                            isDisabled: !ctx.data.inputValue || !ctx.data.inputValue.trim() || isInvalid(ctx.data)
                        }),
                        "submit_reply_button"
                    ),
                    cps.rightControlPanelStyle
                ),
                ctx.data.blurSave &&
                    b.styledDiv(
                        b.withKey(
                            button.create({
                                onClick: () => {
                                    setBlurSaveWasTrigged(ctx);
                                    ctx.data.onCancel && ctx.data.onCancel();
                                },
                                label: ctx.data.cancelLabel ? ctx.data.cancelLabel : "Cancel",
                                size: button.Size.Small,
                                color: button.Theme.None
                            }),
                            "submit_reply_button"
                        ),
                        cps.leftControlPanelStyle
                    )
            ],
            s.editboxWrapperStyle
        );
    },
    onFocusOut(ctx: IContext) {
        if (ctx.data.blurSave) {
            if (ctx.blurSaveWasTriggered) {
                ctx.blurSaveWasTriggered = undefined;
            } else {
                ctx.data.onSubmit();
            }
        }
    }
});

function createTextareaData(ctx: IContext): Textarea.IData | undefined {
    return {
        value: ctx.data.inputValue,
        placeholder: ctx.data.placeholderText,
        initState: Textarea.InitState.focused,
        onChange: ctx.data.onValueChanged,
        onFocusIn: () => ctx.data.onActive(),
        rows: s.textAreaRowsCount,
        maxLength: ctx.data.maxLengthInput,
        webContentAccessibility: ctx.data.webContentAccessibility
            ? {
                  ariaLabel: ctx.data.webContentAccessibility.replyCommentAriaLabel
              }
            : undefined
    };
}

function createComponentDataForValidatorHelper(ctx: IContext, validations: IValidations | undefined): Textarea.IData {
    return {
        value: ctx.data.inputValue,
        initState: Textarea.InitState.focused,
        onChange: ctx.data.onValueChanged,
        onFocusIn: () => {
            ctx.data.onActive();
            validations && validationHelper.removeValidationError(validations.validationsCursor, validations.propertyName);
        },
        rows: s.textAreaRowsCount,
        webContentAccessibility: ctx.data.webContentAccessibility
            ? {
                  ariaLabel: ctx.data.webContentAccessibility.replyCommentAriaLabel
              }
            : undefined
    };
}

function isInvalid(data: IData) {
    return data.validations && data.validations.validationsCursor && validationHelper.isInvalid(data.validations.validationsCursor);
}

function setBlurSaveWasTrigged(ctx: IContext): void {
    if (ctx.data.blurSave) {
        ctx.blurSaveWasTriggered = true;
    }
}
interface IContext extends b.IBobrilCtx {
    data: IData;
    blurSaveWasTriggered?: boolean;
}

export interface IData {
    submitLabel: string;
    webContentAccessibility?: IChatWebContentAccessibility;
    okLabel?: string;
    cancelLabel?: string;
    inputValue: string;
    icon?: b.IBobrilNode;
    onSubmit: () => void;
    onActive: () => void;
    onEdit?: () => void;
    onCancel?: () => void;
    onValueChanged: (value: string) => void;
    controlPanel?: b.IBobrilNode;
    activeControlPanel?: b.IBobrilNode;
    validations?: IValidations;
    avatarOff?: boolean;
    isReply?: boolean;
    maxLengthInput?: number;
    blurSave?: boolean;
    isActive?: boolean;
    userList?: User[];
    placeholderText?: string;
}
