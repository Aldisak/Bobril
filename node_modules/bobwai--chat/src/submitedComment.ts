import * as b from "bobril";
import { t } from "bobril-g11n";
import * as s from "./submitedCommentStyle";
import * as icon from "bobwai--icon";
import * as reply from "./reply";
import * as edit from "./edit";
import * as color from "bobwai--color";
import * as cps from "./controlPanelStyle";
import * as sh from "./scrollHelper";
import { IValidations } from "./rootComment";
import * as button from "bobwai--button";
import * as StateIcon from "bobwai--state-icon";
import * as iconCheckbox from "bobwai--icon-checkbox";
import * as rtlTextHelper from "helpers--rtl-text";
import * as FormElements from "bobwai--form-elements";
import * as ActionWithWindow from "bobwai--action-with-window";
import * as ContextMenu from "bobwai--context-menu";
import * as TooltipEllipsis from "bobwai--tooltip-ellipsis";
import * as WebContentAccessibility from "helpers--web-content-accessibility";
import * as Constants from "./publicConstants";
import { ICommentContextMenuItem } from "./lib";
import { IChatWebContentAccessibility } from "./webContentAccessibility";
import { User, translateTaggedText } from "bobwai--textarea-tagged";

export function create<TId>(data: IData<TId>) {
    return b.createComponent<IData<TId>>({
        id: "bobwai--chat-submited-comment",

        init(ctx: IContext<TId>) {
            ctx.isContextWindowVisible = false;
        },

        render(ctx: IContext<TId>, me: b.IBobrilNode) {
            b.style(me, s.simpleWrapperStyle);
            let ci = !!ctx.data.icon;
            me.children = [
                b.styledDiv(
                    [
                        ctx.data.avatarOff ? getIconCommentWithoutAvatar(ctx) : getIconCommentWithAvatar(ctx, ci),
                        b.styledDiv(
                            b.withKey(
                                [
                                    TooltipEllipsis.create({
                                        tooltipMessage: ctx.data.author,
                                        content: b.style(
                                            {
                                                tag: "div",
                                                children: ctx.data.author,
                                                component: { id: "bobwai--chat-submited-comment-name" }
                                            },
                                            [
                                                rtlTextHelper.getRtlTextStyles({
                                                    text: ctx.data.author,
                                                    enableRTL: Constants.EnableRTL,
                                                    textAlign: FormElements.TextAlign.Left
                                                }),
                                                s.nameStyle,
                                                ctx.data.isDisabled && s.textDisableColorStyle,
                                                ctx.data.isDisabled && ctx.data.isSelected && s.textDisableSelectedColorStyle,
                                                ctx.data.isMarked && s.textMarkedStyle,
                                                ctx.data.isMarkable && s.textWidthStyle
                                            ]
                                        )
                                    }),
                                    ctx.data.isMarkable &&
                                        !ctx.data.readOnly &&
                                        b.style(
                                            {
                                                tag: "div",
                                                children: iconCheckbox.create({
                                                    webContentAccessibility: ctx.data.webContentAccessibility
                                                        ? {
                                                              ariaLabel: ctx.data.webContentAccessibility.commentIsMarkedCheckboxLabel
                                                          }
                                                        : undefined,
                                                    checkedImage: icon.create({
                                                        sprite: b.sprite(icon.checkbox_small_png, color.Black)
                                                    }),
                                                    uncheckedImage: icon.create({
                                                        sprite: b.sprite(icon.checkbox_unchecked_small_png, color.Black)
                                                    }),
                                                    checkedHoverImage: icon.create({
                                                        sprite: b.sprite(icon.checkbox_small_png, color.Application())
                                                    }),
                                                    uncheckedHoverImage: icon.create({
                                                        sprite: b.sprite(icon.checkbox_unchecked_small_png, color.Application())
                                                    }),
                                                    value: !!ctx.data.isMarked,
                                                    onChange() {
                                                        ctx.data.onMarkComment && ctx.data.onMarkComment();
                                                    }
                                                }),
                                                component: { id: "bobwai--chat-submited-comment-checkbox" }
                                            },
                                            s.checkBoxMarkStyle
                                        ),
                                    b.withKey(
                                        b.style(
                                            {
                                                tag: "div",
                                                children: [ctx.data.date, ctx.data.contextMenuItems && createCommentContextMenu<TId>(ctx)],
                                                component: { id: "bobwai--chat-submited-comment-date" }
                                            },
                                            [
                                                s.dateStyle,
                                                ctx.data.isDisabled && s.textDisableColorStyle,
                                                ctx.data.isDisabled && ctx.data.isSelected && s.textDisableSelectedColorStyle,
                                                rtlTextHelper.getRtlTextStyles({
                                                    text: ctx.data.author,
                                                    enableRTL: Constants.EnableRTL
                                                })
                                            ]
                                        ),
                                        "created-date"
                                    )
                                ],
                                `${ctx.data.parentCommentId}_rtb_header`
                            ),
                            s.commentHeaderWrapper
                        ),
                        b.style(
                            {
                                tag: "div",
                                component: { id: "bobwai--chat-submited-comment--text" },
                                children: createCommentContent(ctx)
                            },
                            ctx.data.avatarOff ? s.textStyleWithoutAvatarReply : getTextStyleWithAvatar(ctx),
                            s.textColorStyle,
                            ctx.data.isSelected && s.textColorSelectedStyle
                        ),
                        ctx.data.isCollapsible &&
                            ctx.data.replies &&
                            ctx.data.replies.length > 0 &&
                            b.styledDiv(
                                b.withKey(
                                    [
                                        button.create({
                                            rightIcon: ctx.data.isCollapsed
                                                ? icon.create({ sprite: b.sprite(icon.arrow_down_small_png, color.Basic) })
                                                : icon.create({ sprite: b.sprite(icon.arrow_up_small_png, color.Basic) }),
                                            rightIconHover: ctx.data.isCollapsed
                                                ? icon.create({ sprite: b.sprite(icon.arrow_down_small_png, color.Application) })
                                                : icon.create({ sprite: b.sprite(icon.arrow_up_small_png, color.Application) }),

                                            onClick() {
                                                ctx.data.onCollapseReplies && ctx.data.onCollapseReplies();
                                                return true;
                                            },
                                            label: ctx.data.collapseLabel
                                                ? ctx.data.replies.length + " " + createReplyLabel(ctx)
                                                : "Replies",
                                            size: button.Size.Small,
                                            color: button.Theme.None,
                                            webContentAccessibility: { isExpanded: !ctx.data.isCollapsed }
                                        })
                                    ],
                                    `${ctx.data.parentCommentId}_rtb_collapse`
                                ),
                                s.collapseButtonLabelStyle
                            ),
                        ctx.data.controlPanel &&
                            b.styledDiv(b.withKey(ctx.data.controlPanel, `${ctx.data.parentCommentId}_rtb_control_panel`), [
                                ctx.data.isReply ? getControlPanelReplyStyle(ctx) : getControlPanelStyle(ctx)
                            ])
                    ],
                    getWrapperStyle(ctx)
                ),
                b.styledDiv(
                    b.withKey(
                        [
                            !ctx.data.isCollapsed && getReplies(ctx.data),
                            !ctx.data.isReply &&
                                b.styledDiv(createReplyContent(ctx), [
                                    s.replyTextboxWrapper,
                                    ctx.data.isSelected && ctx.data.highlightFullComment ? s.selectedWrapperStyle : ""
                                ])
                        ],
                        `${ctx.data.parentCommentId}_rtb_replies_comments`
                    ),
                    s.contentWrapperStyle
                )
            ];
        },
        postInitDom(ctx: IContext<TId>, _me: b.IBobrilNode, elem: HTMLElement) {
            sh.scrollIntoViewIfNeeded(ctx, !!ctx.data.isSelected, !!ctx.data.isScrolledTo, elem);
        },
        postUpdateDom(ctx: IContext<TId>, _me: b.IBobrilNode, elem: HTMLElement) {
            sh.scrollIntoViewIfNeeded(ctx, !!ctx.data.isSelected, !!ctx.data.isScrolledTo, elem);
        },
        onClick(ctx: IContext<TId>, event: b.IBobrilMouseEvent) {
            if (event.button === 1 && ctx.data.onActiveComment && !ctx.data.isActive && !ctx.data.isSelected) {
                ctx.data.onActiveComment();
            }
            return true;
        }
    })(data);
}

function getReplies<TId>(data: IData<TId>): b.IBobrilNode {
    const repliesNode = b.styledDiv(data.replies);
    WebContentAccessibility.setWebContentAccessibilityAttributes(repliesNode, {
        ariaLive: WebContentAccessibility.ContentAccessibilityLive.Polite
    });
    return repliesNode;
}

function createCommentContextMenu<TId>(ctx: IContext<TId>) {
    const menuIconActive = icon.create({
        sprite: b.sprite(icon.menu_small_png, color.Application)
    });

    return b.withKey(
        ActionWithWindow.create({
            actionContent: StateIcon.create({
                tooltip: { tooltipMessage: t("More Actions") },
                content: ctx.isContextWindowVisible
                    ? menuIconActive
                    : icon.create({
                          sprite: b.sprite(icon.menu_small_png, color.Basic)
                      }),
                hoverContent: menuIconActive
            }),
            hasShadow: true,
            onOpenWindow: () => {
                ctx.isContextWindowVisible = true;
                b.invalidate(ctx);
            },
            onCloseWindow: () => {
                ctx.isContextWindowVisible = false;
                b.invalidate(ctx);
            },
            isWindowVisible: ctx.isContextWindowVisible,
            windowContent: ContextMenu.create({
                hasStaticPosition: true,
                useChildDomScope: true,
                onClose: () => {},
                content: {
                    items: ctx.data.contextMenuItems
                        ? ctx.data.contextMenuItems.map(menuItem => {
                              return {
                                  content: menuItem.content,
                                  iconContent: menuItem.iconContent,
                                  onClick: () => {
                                      ctx.isContextWindowVisible = false;
                                      b.invalidate(ctx);
                                      menuItem.onClick && menuItem.onClick();
                                  }
                              };
                          })
                        : []
                }
            }),
            fixPosition: true,
            positioningMode: ActionWithWindow.PositioningMode.All,
            preferredPlacement: ActionWithWindow.Placement.Right,
            secondaryPreferredPlacement: ActionWithWindow.Placement.BottomRight
        }),
        "bobwai--chat-action-with-window"
    );
}

function createCommentContent<TId>(ctx: IContext<TId>) {
    if (ctx.data.isEditable && ctx.data.isActive && ctx.data.onEdit && ctx.data.onCancelComment && ctx.data.onDelete) {
        return [
            b.styledDiv(
                b.withKey(
                    edit.createEditArea({
                        webContentAccessibility: ctx.data.webContentAccessibility,
                        inputValue: ctx.data.inputValue,
                        onActive: ctx.data.onActive,
                        onEdit: ctx.data.onEdit,
                        onValueChanged: ctx.data.onValueChanged,
                        validations: ctx.data.validations,
                        maxLengthInput: ctx.data.maxLengthInput,
                        blurSave: ctx.data.blurSave,
                        cancelLabel: ctx.data.cancelLabel,
                        okLabel: ctx.data.okLabel,
                        onCancel: ctx.data.onCancelComment,
                        onSubmit: ctx.data.onEdit,
                        removeCommentLabel: ctx.data.removeCommentLabel,
                        onDelete: ctx.data.onDelete,
                        isReply: ctx.data.isReply,
                        isActive: ctx.data.isActive,
                        onEditFocusOut: ctx.data.onEditFocusOut,
                        userList: ctx.data.userList || []
                    }),
                    `${ctx.data.parentCommentId}_rtb_textarea`
                ),
                s.textareaEditStyle
            )
        ];
    } else {
        const { userList, content } = ctx.data;
        const translation = translateTaggedText(content, userList || []);
        return [
            b.withKey(
                b.styledDiv(
                    translation.nodes,
                    rtlTextHelper.getRtlTextStyles({
                        enableRTL: Constants.EnableRTL,
                        text: translation.text,
                        textAlign: FormElements.TextAlign.Left
                    })
                ),
                `${ctx.data.parentCommentId}_rtb_plain_text`
            ),
            !ctx.data.readOnly && ctx.data.isEditable && createEditDeleteButtons(ctx)
        ];
    }
}

function createReplyContent<TId>(ctx: IContext<TId>) {
    return b.styledDiv(
        !(ctx.data.isEditable || (ctx.data.replies && ctx.data.replies.length !== 0 && ctx.data.replies.slice(-1)[0].data.isEditable)) &&
            !ctx.data.readOnly &&
            createReplyAreaOrReplyButtons(ctx),
        ctx.data.readOnly && s.readOnlyStyle
    );
}

function createEditDeleteButtons<TId>(ctx: IContext<TId>) {
    return (
        !ctx.data.isActive &&
        ctx.data.onDelete &&
        b.withKey(
            edit.createEdit({
                removeCommentLabel: ctx.data.removeCommentLabel,
                editLabel: ctx.data.editLabel,
                onDelete: ctx.data.onDelete,
                onClickEdit: ctx.data.onActive,
                numberOfReplies: ctx.data.replies && ctx.data.replies.length,
                avatarOff: ctx.data.avatarOff
            }),
            `${ctx.data.parentCommentId}_rtb_edit`
        )
    );
}

function createReplyAreaOrReplyButtons<TId>(ctx: IContext<TId>) {
    return !ctx.data.isActive
        ? b.styledDiv(
              b.withKey(
                  reply.createReply({ label: ctx.data.replyButtonLabel, onClick: ctx.data.onActive }),
                  `${ctx.data.parentCommentId}_rb_reply_area`
              ),
              cps.fullSizeControlPanelStyle
          )
        : b.styledDiv(
              b.withKey(
                  reply.create({
                      icon: ctx.data.replyIcon,
                      submitLabel: ctx.data.submitLabel ? ctx.data.submitLabel : "Submit",
                      okLabel: ctx.data.okLabel,
                      cancelLabel: ctx.data.cancelLabel,
                      webContentAccessibility: ctx.data.webContentAccessibility,
                      onSubmit: () => {
                          ctx.data.onSubmitReply && ctx.data.onSubmitReply();
                      },
                      onActive: ctx.data.onActive,
                      inputValue: ctx.data.inputValue,
                      onValueChanged: ctx.data.onValueChanged,
                      activeControlPanel: ctx.data.submitControlPanel,
                      validations: ctx.data.validations,
                      avatarOff: ctx.data.avatarOff,
                      isReply: ctx.data.replies && ctx.data.replies.length > 0,
                      maxLengthInput: ctx.data.maxLengthInput,
                      blurSave: ctx.data.blurSave,
                      onCancel: ctx.data.onCancelComment,
                      isActive: ctx.data.isActive,
                      userList: ctx.data.userList,
                      placeholderText: ctx.data.placeholderText
                  }),
                  `${ctx.data.parentCommentId}_rtb_reply`
              ),
              ctx.data.avatarOff ? s.replyStyleWithoutAvatar : s.replyStyle
          );
}

function getWrapperStyle<TId>(ctx: IContext<TId>) {
    return [
        ctx.data.isReply ? getReplyWrapperWithoutAvatarCommentStyle(ctx) : getWrapperCommentStyle(ctx),
        ctx.data.isSelected ? s.selectedWrapperStyle : null
    ];
}

function getReplyWrapperWithoutAvatarCommentStyle<TId>(ctx: IContext<TId>) {
    return ctx.data.avatarOff ? s.replyWrapperWithoutAvatarStyle : s.replyWrapperStyle;
}

function getWrapperCommentStyle<TId>(ctx: IContext<TId>) {
    return ctx.data.avatarOff ? s.withoutAvatar : s.rootCommentStyle;
}

function getControlPanelReplyStyle<TId>(ctx: IContext<TId>) {
    return ctx.data.avatarOff ? s.replyControlPanelWrapperWithoutAvatar : s.replyControlPanelWrapper;
}

function getControlPanelStyle<TId>(ctx: IContext<TId>) {
    return ctx.data.avatarOff ? s.commentControlPanelWrapperWithoutAvatar : s.commentControlPanelWrapper;
}

function getIconCommentWithoutAvatar<TId>(ctx: IContext<TId>) {
    return ctx.data.isReply
        ? null
        : b.styledDiv(null, s.commentIconStyle, b.sprite(icon.comment_small_png, ctx.data.isDisabled ? color.Grey400 : color.Grey500));
}

function getIconCommentWithAvatar<TId>(ctx: IContext<TId>, ci: boolean) {
    return b.styledDiv(
        ci ? ctx.data.icon : null,
        ctx.data.isReply
            ? [s.subImageStyle, !ci && b.sprite(icon.user_small_24_png, color.White)]
            : [s.imageStyle, !ci && b.sprite(icon.user_medium_png, color.White, 30, 30)]
    );
}

function getTextStyleWithAvatar<TId>(ctx: IContext<TId>) {
    return ctx.data.isReply ? s.replyTextStyle : s.textStyle;
}

function createReplyLabel<TId>(ctx: IContext<TId>) {
    return ctx.data.replies && ctx.data.replies.length === 1 ? ctx.data.replyButtonLabel : ctx.data.collapseLabel;
}

interface IContext<TId> extends sh.IContext {
    data: IData<TId>;
    isContextWindowVisible: boolean;
}

export interface IData<TId> {
    isActive: boolean;
    replyButtonLabel: string;
    content: string;
    author: string;
    date: string;
    inputValue: string;
    isEditable?: boolean;
    webContentAccessibility?: IChatWebContentAccessibility;
    parentCommentId?: TId;
    onSubmitReply?: () => void;
    onActive: () => void;
    onEdit?: () => void | undefined;
    onEditFocusOut?: () => void;
    onDelete?: () => void;
    onActiveComment?: () => void;
    onCancelComment?: () => void;
    onCollapseReplies?: () => void;
    onMarkComment?: () => void;
    contextMenuItems?: ICommentContextMenuItem[];
    createEditable?: boolean;
    canEdit?: boolean | undefined;
    isReply?: boolean;
    replies?: b.IBobrilNode[];
    onValueChanged: (value: string) => void;
    icon?: b.IBobrilNode;
    replyIcon?: b.IBobrilNode;
    controlPanel?: b.IBobrilNode;
    submitControlPanel?: b.IBobrilNode;
    isSelected?: boolean;
    isDisabled?: boolean;
    isCollapsible?: boolean;
    isCollapsed?: boolean;
    isMarkable?: boolean;
    isMarked?: boolean;
    maxLengthInput?: number;
    highlightFullComment?: boolean;
    isScrolledTo?: boolean;
    validations?: IValidations;
    cancelLabel?: string | "";
    submitLabel?: string | "";
    editLabel?: string | "";
    okLabel?: string;
    collapseLabel?: string;
    removeCommentLabel?: string | "";
    avatarOff?: boolean;
    readOnly?: boolean;
    blurSave?: boolean;
    userList?: User[];
    placeholderText?: string;
}
