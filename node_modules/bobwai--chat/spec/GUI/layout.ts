import * as b from "bobril";
import { Chat } from "../../src/lib";
import { getTestStore } from "./store";
import * as Icon from "bobwai--icon";
import * as color from "bobwai--color";
import * as button from "bobwai--button";

export function createLayout(): void {
    b.init(() => {
        return [
            Chat({
                labels: {
                    submit: "Submit",
                    reply: "Reply",
                    label: "Social Commenting",
                    cancel: "Cancel",
                    edit: "Edit",
                    removeComment: "Delete"
                },
                comments: getTestStore().model,
                onActiveCommentSubmit: (parentCommentId, text: string) => {
                    if (parentCommentId !== -1) {
                        getTestStore()
                            .model.filter(c => c.id === parentCommentId)[0]
                            .replies.push({
                                id: Math.round(Math.random() * new Date().getMilliseconds()),
                                text: text,
                                userName: "John Doe",
                                icon: b.styledDiv(null, b.sprite(Icon.user_small_24_png, color.Application)),
                                created: "01 December",
                                replies: [],
                                isEditable: true
                            });
                    } else
                        getTestStore().model.push({
                            id: getTestStore().lastId1++,
                            text: text,
                            userName: "John Doe",
                            icon: b.styledDiv(null, b.sprite(Icon.user_medium_png, color.Error)),
                            created: "01 December",
                            replies: [],
                            isEditable: true
                        });
                    b.invalidate();
                },
                onEditComment: (commentId, value: string, parentId) => {
                    if (parentId) {
                        getTestStore()
                            .model.filter(c => c.id === parentId)[0]
                            .replies.slice(-1)[0].text = value;
                    } else {
                        let a = getTestStore().model.filter(c => c.id === commentId);
                        console.log(a);
                        getTestStore().model.filter(c => c.id === commentId)[0].text = value;
                    }

                    getTestStore().activeCommentId = -2;
                    b.invalidate();
                },
                onDeleteComment: commentId => {
                    if (!getTestStore().model.filter(c => c.id === commentId)[0]) {
                        for (let i = 0; i < getTestStore().model.length; i++) {
                            if (getTestStore().model[i] && getTestStore().model[i].replies.filter(c => c.id === commentId)[0]) {
                                getTestStore().model[i].replies.pop();
                            }
                        }
                    } else {
                        delete getTestStore().model[getTestStore().model.findIndex(c => c.id === commentId)];
                    }

                    getTestStore().activeCommentId = -2;
                    b.invalidate();
                },
                onCancelComment: () => {
                    getTestStore().activeCommentId = -2;
                    b.invalidate();
                },
                onCollapseReplies: id => {
                    getTestStore().model.filter(c => c.id === id)[0].isCollapsed = !getTestStore().model.filter(c => c.id === id)[0]
                        .isCollapsed;
                    b.invalidate();
                },
                icon: b.styledDiv(null, b.sprite(Icon.user_medium_png, color.Application)),
                submitControlPanel: b.withKey(
                    button.create({
                        leftIcon: b.styledDiv(null, b.sprite(Icon.resizable_area_small_png, color.Basic), { display: "inline-block" }),
                        leftIconHover: b.styledDiv(null, b.sprite(Icon.resizable_area_small_png, color.Application), {
                            display: "inline-block"
                        }),
                        onClick: () => {
                            getTestStore().rootCommentAddArea++;
                        },
                        label: "ADD AREA",
                        size: button.Size.Small,
                        color: button.Theme.None
                    }),
                    "submit-control-panel-add-area-button"
                ),
                activeCommentId: getTestStore().activeCommentId,
                activeCommentValue: getTestStore().commentValue,
                defaultRootCommentId: getTestStore().defaultRootCommentId,
                onChangeActiveCommentValue: (text: string) => {
                    getTestStore().commentValue = text;
                    b.invalidate();
                },
                onChangeActiveCommentId: id => {
                    getTestStore().activeCommentId = id;
                    b.invalidate();
                },
                userList: []
            })
        ];
    });
}
