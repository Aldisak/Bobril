import { BBBot, BBSeeker } from "bbseeker-extended";
import { createLayout } from "./layout";
import { clearTestStore, getTestStore } from "./store";
import { Selectors } from "../../src/testSelectors";

const rootCommentAddAreaButtonSelector = "/~#submit-control-panel-add-area-button";

describe("Chat UI tests", () => {
    afterEach(() => {
        //  BBBot.clear();
        clearTestStore();
    });

    xit("should be possible to write into root text area and add new comment", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const chat = BBSeeker.findElement(Selectors.id);
            const rootComment = BBSeeker.findElement(Selectors.id + Selectors.rootComment);
            const rootCommentTextArea = BBSeeker.findElement(Selectors.id + Selectors.rootComment + Selectors.textArea)!;
            const rootCommentSubmit = BBSeeker.findElement(Selectors.id + Selectors.rootComment + Selectors.rootSubmitButton)!;
            const rootCommentAddArea = BBSeeker.findElement(Selectors.id + Selectors.rootComment + rootCommentAddAreaButtonSelector)!;
            expect(chat).not.toBeNull();
            expect(rootComment).not.toBeNull();
            expect(rootCommentTextArea).not.toBeNull();
            checkNumberOfComments(8);
            expect(rootCommentSubmit).not.toBeNull();
            expect(rootCommentAddArea).not.toBeNull();

            const a = BBSeeker.findElements(Selectors.id + "/~.bobwai--button");
            expect(a.length).toBeGreaterThan(0);

            await bot.emitLeftMouseClickOnHTMLElement(rootCommentAddArea);
            expect(getTestStore().rootCommentAddArea).toBe(1);

            await bot.emitLeftMouseClickOnHTMLElement(rootCommentTextArea);
            await writeAndCheck({ bot, addString: "abc", expectedResult: "abc", textArea: rootCommentTextArea });

            await bot.emitKeyPress(BBBot.KeyCodes.Escape);
            expect((<HTMLTextAreaElement>rootCommentTextArea).value).toBe("");

            await writeAndCheck({ bot, addString: "def", expectedResult: "def", textArea: rootCommentTextArea });
            await writeAndCheck({ bot, addString: "123", expectedResult: "def123", textArea: rootCommentTextArea });

            await bot.emitKeyPress(BBBot.KeyCodes.LeftArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.Backspace);
            expect((<HTMLTextAreaElement>rootCommentTextArea).value).toBe("def13");

            await bot.emitLeftMouseClickOnHTMLElement(rootCommentSubmit);
            checkNumberOfComments(9);

            await bot.emitLeftMouseClickOnHTMLElement(rootCommentTextArea);
            await writeAndCheck({ bot, addString: "text text", expectedResult: "text text", textArea: rootCommentTextArea });
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            checkNumberOfComments(10);
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
    xit("should be possible to open reply text box, write into it and replay on comm ent", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const replyButton = getReplyButton(1)!;
            checkNumberOfReplies({ commentId: 1, expectedNumber: 2 });
            isReplyAreaOpened({ isOpened: false, commentId: 1 });
            expect(replyButton.textContent).toBe("Reply");

            await bot.emitLeftMouseClickOnHTMLElement(replyButton);
            isReplyAreaOpened({ isOpened: true, commentId: 1 });
            await clickOnSubmit({ bot, commentId: 1 });
            checkNumberOfReplies({ commentId: 1, expectedNumber: 2 });

            const replyTextArea = getReplyTextArea(1)!;
            await bot.emitLeftMouseClickOnHTMLElement(replyTextArea);
            await writeAndCheck({ bot, addString: "reply1", expectedResult: "reply1", textArea: replyTextArea });
            await clickOnSubmit({ bot, commentId: 1 });
            isReplyAreaOpened({ isOpened: false, commentId: 1, isEditButtonVisible: true });
            checkNumberOfReplies({ commentId: 1, expectedNumber: 3 });
            isEditVisible({ isVisible: true, commentId: 1 });
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
    xit("should be possible to edit and delete comment", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const replyButton = getReplyButton(1)!;
            await bot.emitLeftMouseClickOnHTMLElement(replyButton);

            const replyTextArea = getReplyTextArea(1)!;
            await bot.emitLeftMouseClickOnHTMLElement(replyTextArea);
            await writeAndCheck({ bot, addString: "reply1", expectedResult: "reply1", textArea: replyTextArea });
            await clickOnSubmit({ bot, commentId: 1 });

            checkNumberOfReplies({ commentId: 1, expectedNumber: 3 });
            isEditVisible({ isVisible: true, commentId: 1 });
            isEditAreaOpened({ isOpened: false, commentId: 1 });

            await clickOnEditButton({ bot, commentId: 1 });
            isEditAreaOpened({ isOpened: true, commentId: 1 });

            await writeAndCheck({
                bot,
                addString: " text+",
                expectedResult: "reply1 text+",
                textArea: getEditElement({ commentId: 1, EditElement: EditElements.textArea })!
            });
            await bot.emitKeyPress(BBBot.KeyCodes.Escape);
            await clickOnEditOk({ bot, commentId: 1 });
            isEditAreaOpened({ isOpened: true, commentId: 1 });

            await bot.emitLeftMouseClickOnHTMLElement(getEditElement({ commentId: 1, EditElement: EditElements.textArea })!);
            await writeAndCheck({
                bot,
                addString: "edited0",
                expectedResult: "edited0",
                textArea: getEditElement({ commentId: 1, EditElement: EditElements.textArea })!
            });
            await clickOnEditOk({ bot, commentId: 1 });
            checkTextOfLastCommentOrReply({ commentId: 1, expectedText: "edited0" });
            isEditAreaOpened({ isOpened: false, commentId: 1 });

            await clickOnEditButton({ bot, commentId: 1 });
            await writeAndCheck({
                bot,
                addString: "abc",
                expectedResult: "edited0abc",
                textArea: getEditElement({ commentId: 1, EditElement: EditElements.textArea })!
            });
            await clickOnCancel({ bot, commentId: 1 });
            isEditAreaOpened({ isOpened: false, commentId: 1 });

            await clickOnDelete({ bot, commentId: 1 });
            checkNumberOfReplies({ commentId: 1, expectedNumber: 2 });
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
    xit("should be possible to edit and delete new messages", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            checkNumberOfComments(8);
            checkNumberOfReplies({ commentId: 6, expectedNumber: 0 });

            const replyButton = getReplyButton(6)!;
            await bot.emitLeftMouseClickOnHTMLElement(replyButton);

            const replyTextArea = getReplyTextArea(6)!;
            await bot.emitLeftMouseClickOnHTMLElement(replyTextArea);
            await writeAndCheck({ bot, addString: "reply6", expectedResult: "reply6", textArea: replyTextArea });
            await clickOnSubmit({ bot, commentId: 6 });

            isReplyAreaOpened({ isOpened: false, commentId: 6, isEditButtonVisible: true });
            isEditVisible({ isVisible: true, commentId: 6 });
            isEditAreaOpened({ isOpened: false, commentId: 6 });

            await clickOnEditButton({ bot, commentId: 6 });
            isEditAreaOpened({ isOpened: true, commentId: 6 });

            await bot.emitKeyPress(BBBot.KeyCodes.Home);
            await writeAndCheck({
                bot,
                addString: "edited ",
                expectedResult: "edited reply6",
                textArea: getEditElement({ commentId: 6, EditElement: EditElements.textArea })!
            });
            await clickOnEditOk({ bot, commentId: 6 });
            checkTextOfLastCommentOrReply({ commentId: 6, expectedText: "edited reply6" });
            isEditAreaOpened({ isOpened: false, commentId: 6 });

            await clickOnDelete({ bot, commentId: 6 });
            checkNumberOfComments(8);
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
    it("check clicks between comments", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const replyButton = getReplyButton(1)!;
            const rootCommentTextArea = BBSeeker.findElement(Selectors.id + Selectors.rootComment + Selectors.textArea)!;
            const rootCommentAddArea = BBSeeker.findElement(Selectors.id + Selectors.rootComment + rootCommentAddAreaButtonSelector)!;

            isReplyAreaOpened({ isOpened: false, commentId: 1 });
            isEditAreaOpened({ isOpened: false, commentId: 5 });
            isEditAreaOpened({ isOpened: false, commentId: 6 });

            await clickOnEditButton({ bot, commentId: 6 });
            isReplyAreaOpened({ isOpened: false, commentId: 1 });
            isEditAreaOpened({ isOpened: false, commentId: 5 });
            isEditAreaOpened({ isOpened: true, commentId: 6 });

            await clickOnEditButton({ bot, commentId: 5 });
            isReplyAreaOpened({ isOpened: false, commentId: 1 });
            isEditAreaOpened({ isOpened: true, commentId: 5 });
            isEditAreaOpened({ isOpened: false, commentId: 6 });

            await bot.emitLeftMouseClickOnHTMLElement(replyButton);
            isReplyAreaOpened({ isOpened: true, commentId: 1 });
            isEditAreaOpened({ isOpened: false, commentId: 5 });
            isEditAreaOpened({ isOpened: false, commentId: 6 });

            await bot.emitLeftMouseClickOnHTMLElement(rootCommentTextArea);
            isReplyAreaOpened({ isOpened: false, commentId: 1 });
            isEditAreaOpened({ isOpened: false, commentId: 5 });
            isEditAreaOpened({ isOpened: false, commentId: 6 });

            await clickOnEditButton({ bot, commentId: 6 });
            isReplyAreaOpened({ isOpened: false, commentId: 1 });
            isEditAreaOpened({ isOpened: false, commentId: 5 });
            isEditAreaOpened({ isOpened: true, commentId: 6 });

            await bot.emitLeftMouseClickOnHTMLElement(rootCommentAddArea);
            isReplyAreaOpened({ isOpened: false, commentId: 1 });
            isEditAreaOpened({ isOpened: false, commentId: 5 });
            isEditAreaOpened({ isOpened: true, commentId: 6 });
            expect(getTestStore().rootCommentAddArea).toBe(1);

            await clickOnDelete({ bot, commentId: 5 });
            isReplyAreaOpened({ isOpened: false, commentId: 1 });
            checkNumberOfComments(7);
        } else {
            fail("Test failed due it is not fully rendered");
        }
    });
});

enum EditElements {
    OKbutton,
    Cancelbutton,
    DeleteButton,
    EditButton,
    textArea
}

async function writeAndCheck(params: {
    bot: BBBot.IBBBot;
    addString: string;
    expectedResult: string;
    textArea: HTMLElement;
}): Promise<void> {
    await params.bot.writeExpression(params.addString, 500, true);
    expect((<HTMLTextAreaElement>params.textArea).value).toBe(params.expectedResult);
}

function checkNumberOfComments(expectedNumber: number): void {
    const comments = BBSeeker.findElements(Selectors.id + Selectors.comments);
    expect(comments.length).toBe(expectedNumber);
}

function checkNumberOfReplies(params: { commentId: number; expectedNumber: number }): void {
    const selector = Selectors.id + Selectors.getReplies(params.commentId);
    const responses = BBSeeker.findElements(selector);
    expect(responses.length).toBe(params.expectedNumber);
}

function getReplyButton(commentId: number): HTMLElement {
    const selector = Selectors.id + Selectors.getComment(commentId) + Selectors.replyButton;
    return BBSeeker.findElement(selector)!;
}

function getReplyTextArea(commentId: number): HTMLElement {
    return BBSeeker.findElement(Selectors.id + Selectors.getComment(commentId) + Selectors.replyTextArea)!;
}

function getReplyEditButtons(commentId: number): HTMLElement {
    return BBSeeker.findElement(Selectors.id + Selectors.getComment(commentId) + Selectors.replyEditButtons)!;
}

function isReplyAreaOpened(params: { isOpened: boolean; commentId: number; isEditButtonVisible?: boolean }): void {
    const replyButton = getReplyButton(params.commentId)!;
    const replyTextArea = getReplyTextArea(params.commentId)!;
    if (params.isOpened) {
        expect(replyButton).toBeNull();
        expect(replyTextArea).not.toBeNull();
    } else {
        if (params.isEditButtonVisible) {
            expect(replyButton).toBeNull();
        } else {
            expect(replyButton).not.toBeNull();
            expect(replyTextArea).toBeNull();
        }
    }
}

async function clickOnSubmit(params: { bot: BBBot.IBBBot; commentId: number }): Promise<void> {
    const replySubmitButton = BBSeeker.findElement(Selectors.id + Selectors.getComment(params.commentId) + Selectors.replySubmitButton)!;
    expect(replySubmitButton).not.toBeNull();
    await params.bot.emitLeftMouseClickOnHTMLElement(replySubmitButton);
}

function isEditVisible(params: { isVisible: boolean; commentId: number }): void {
    const edit = getReplyEditButtons(params.commentId);
    params.isVisible ? expect(edit).not.toBeNull() : expect(edit).toBeNull();
}

function isEditAreaOpened(params: { isOpened: boolean; commentId: number }): void {
    const textArea = getEditElement({ commentId: params.commentId, EditElement: EditElements.textArea });
    const cancelButton = getEditElement({ commentId: params.commentId, EditElement: EditElements.Cancelbutton });
    const OkButton = getEditElement({ commentId: params.commentId, EditElement: EditElements.OKbutton });
    if (params.isOpened) {
        expect(textArea).not.toBeNull();
        expect(cancelButton).not.toBeNull();
        expect(OkButton).not.toBeNull();
        isEditVisible({ isVisible: false, commentId: params.commentId });
    } else {
        expect(textArea).toBeNull();
        isEditVisible({ isVisible: true, commentId: params.commentId });
    }
}

function getEditElement(params: { commentId: number; EditElement: EditElements }): HTMLElement {
    switch (params.EditElement) {
        case EditElements.Cancelbutton:
            return BBSeeker.findElement(Selectors.id + Selectors.getComment(params.commentId) + Selectors.editCancelbutton)!;

        case EditElements.DeleteButton:
            return BBSeeker.findElement(Selectors.id + Selectors.getComment(params.commentId) + Selectors.editDeleteButton)!;

        case EditElements.EditButton:
            return BBSeeker.findElement(Selectors.id + Selectors.getComment(params.commentId) + Selectors.editEditButton)!;

        case EditElements.OKbutton:
            return BBSeeker.findElement(Selectors.id + Selectors.getComment(params.commentId) + Selectors.editOKbutton)!;

        case EditElements.textArea:
            return BBSeeker.findElement(Selectors.id + Selectors.getComment(params.commentId) + Selectors.textArea)!;
    }
}

function checkTextOfLastCommentOrReply(params: { commentId: number; expectedText: string }): void {
    const lastCommentText = BBSeeker.findElement(Selectors.id + Selectors.getComment(params.commentId) + Selectors.lastCommentText)!;
    expect(lastCommentText.textContent).toBe(params.expectedText);
}

async function clickOnEditButton(params: { bot: BBBot.IBBBot; commentId: number }): Promise<void> {
    const editButton = getEditElement({ commentId: params.commentId, EditElement: EditElements.EditButton })!;
    expect(editButton).not.toBeNull();
    await params.bot.emitLeftMouseClickOnHTMLElement(editButton);
}

async function clickOnCancel(params: { bot: BBBot.IBBBot; commentId: number }): Promise<void> {
    const cancelButton = getEditElement({ commentId: params.commentId, EditElement: EditElements.Cancelbutton })!;
    expect(cancelButton).not.toBeNull();
    await params.bot.emitLeftMouseClickOnHTMLElement(cancelButton);
}

async function clickOnDelete(params: { bot: BBBot.IBBBot; commentId: number }): Promise<void> {
    const deleteButton = getEditElement({ commentId: params.commentId, EditElement: EditElements.DeleteButton })!;
    expect(deleteButton).not.toBeNull();
    await params.bot.emitLeftMouseClickOnHTMLElement(deleteButton);
}

async function clickOnEditOk(params: { bot: BBBot.IBBBot; commentId: number }): Promise<void> {
    const editOkButton = getEditElement({ commentId: params.commentId, EditElement: EditElements.OKbutton })!;
    expect(editOkButton).not.toBeNull();
    await params.bot.emitLeftMouseClickOnHTMLElement(editOkButton);
}
