import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as Textarea from "bobwai--textarea";
import * as chat from "../src/lib";
import * as checkbox from "bobwai--checkbox";
import * as label from "bobwai--label";

import * as h from "./src/helpers";
import * as button from "bobwai--button";
import * as color from "bobwai--color";
import * as submitedCommentWithControlPanel from "./src/submitedCommentWithControlPanel";
import * as Icon from "bobwai--icon";

let enableRTL = true;
let enableForTextarea = true;
let avatarOff = false;
let headerOff = false;
let newCommentOff = false;
let isCollapsible = true;
let isMarkable = true;
let readOnly = true;
let blurSave = false;

let onClick = () => {
    alert("button has been clicked");
    color.setApplicationColor("#e64867");
};

let model1: chat.IComment<number>[] = [
    {
        id: 0,
        text: "This is comment.",
        userName: "John Doe",
        created: "01 December",
        icon: h.iconJdComment,
        replies: [
            {
                id: 6,
                text: "This is reply.",
                userName: "John Doe",
                created: "01 December",
                icon: h.iconJdReply,
                replies: []
            },
            {
                id: 7,
                text: "This is reply. Michael Doe has his own icon.",
                userName: "Michael Doe",
                created: "01 December",
                replies: [],
                icon: h.iconAnonymousReply
            }
        ]
    },
    {
        id: 1,
        text: "This is comment from anonymous user.",
        userName: "Anonymous",
        created: "01 December",
        icon: h.iconAnonymousComment,
        replies: []
    },
    {
        id: 2,
        text: "This is comment. Michael Doe has his own icon.",
        userName: "Michael Doe",
        created: "01 December",
        icon: h.iconMdComment,
        replies: []
    },
    { id: 3, text: "This is comment.", userName: "John Doe", created: "01 December", icon: h.iconMdComment, replies: [] },
    { id: 4, text: "This is comment.", userName: "John Doe", created: "01 December", icon: h.iconMdComment, replies: [] },
    { id: 5, text: "This is comment.", userName: "John Doe", created: "01 December", icon: h.iconMdComment, replies: [] }
];

let model2: chat.IComment<number>[] = [
    {
        id: 0,
        text: "This is comment.",
        userName: "John Doe",
        created: "01 December",
        icon: h.iconMdComment,
        replies: [
            {
                id: 12356,
                text: "This is reply.",
                userName: "John Doe",
                created: "01 December",
                icon: h.iconJdReply,
                replies: []
            },
            {
                id: 7,
                text: "This is reply. Michael Doe has his own icon.",
                userName: "Michael Doe",
                created: "01 December",
                replies: [],
                icon: h.iconJdReply
            }
        ]
    },
    {
        id: 1,
        text: "This is comment from anonymous user.",
        userName: "Anonymous",
        icon: h.iconAnonymousComment,
        created: "01 December",
        replies: []
    },
    {
        id: 2,
        text: "This is comment. Michael Doe has his own icon.",
        userName: "Michael Doe",
        icon: h.iconMdComment,
        created: "01 December",
        replies: []
    },
    {
        id: 3,
        text: "This is comment with extra control panel.",
        userName: "John Doe",
        icon: h.iconJdComment,
        created: "01 December",
        replies: [],
        controlPanel: h.createViewAreaButton("VIEW AREA", onClick)
    },
    {
        id: 4,
        text: "This is selected comment.",
        userName: "John Doe",
        icon: h.iconJdComment,
        created: "01 December",
        replies: [],
        isSelected: true
    },
    {
        id: 5,
        text: "This is selected comment with extra control panel.",
        userName: "John Doe",
        icon: h.iconJdComment,
        created: "01 December",
        replies: [],
        isSelected: true,
        controlPanel: h.createViewAreaButton("VIEW AREA", onClick)
    }
];

let model3: chat.IComment<number>[] = [
    {
        id: 0,
        text: "This is comment.",
        userName: "John Doe",
        created: "01 December",
        icon: h.iconMdComment,
        replies: [
            {
                id: 12356,
                text: "This is reply.",
                userName: "John Doe",
                created: "01 December",
                icon: h.iconJdReply,
                replies: []
            },
            {
                id: 7,
                text: "This is reply. Michael Doe has his own icon.",
                userName: "Michael Doe",
                created: "01 December",
                replies: [],
                icon: h.iconJdReply
            }
        ]
    },
    {
        id: 1,
        text: "This is comment from anonymous user.",
        userName: "Anonymous",
        icon: h.iconAnonymousComment,
        created: "01 December",
        replies: []
    },
    {
        id: 2,
        text: "This is comment. Michael Doe has his own icon.",
        userName: "Michael Doe",
        icon: h.iconMdComment,
        created: "01 December",
        replies: []
    },
    {
        id: 3,
        text: "This is comment with extra control panel.",
        userName: "John Doe",
        icon: h.iconJdComment,
        created: "01 December",
        replies: [],
        controlPanel: h.createViewAreaButton("VIEW AREA", onClick)
    },
    {
        id: 4,
        text: "This is selected comment.",
        userName: "John Doe",
        icon: h.iconJdComment,
        created: "01 December",
        replies: [],
        isSelected: true
    },
    {
        id: 5,
        text: "This is selected comment with extra control panel.",
        userName: "John Doe",
        icon: h.iconJdComment,
        created: "01 December",
        replies: [],
        isSelected: true,
        controlPanel: h.createViewAreaButton("VIEW AREA", onClick)
    }
];

let model4: chat.IComment<number>[] = [
    {
        id: 10,
        text: "This is comment.",
        userName: "Markus B",
        created: "01 December",
        isEditable: false,
        icon: h.iconJdComment,
        replies: [
            {
                id: 6,
                text: "This is reply.",
                userName: "John Doe",
                created: "01 December",
                isEditable: false,
                icon: h.iconJdReply,
                replies: []
            },
            {
                id: 7,
                text: "This is reply. Michael Doe has his own icon. Editable: true",
                userName: "Michael Doe",
                isEditable: true,
                created: "01 December",
                replies: [],
                icon: h.iconAnonymousReply
            }
        ]
    },
    {
        id: 1,
        text: "This is comment from anonymous user. Editable: true",
        userName: "Markus B",
        isEditable: true,
        created: "01 December",
        icon: h.iconAnonymousComment,
        replies: []
    },
    {
        id: 2,
        text: "This is comment. Michael Doe has his own icon. Editable: true",
        userName: "Michael Doe",
        isEditable: true,
        created: "01 December",
        icon: h.iconMdComment,
        replies: [
            {
                id: 8,
                text: "This is reply.",
                userName: "John Doe",
                isEditable: false,
                created: "01 December",
                icon: h.iconJdReply,
                replies: []
            },
            {
                id: 9,
                text: "This is reply. Michael Doe has his own icon. Editable: true",
                userName: "Michael Doe",
                isEditable: true,
                created: "01 December",
                replies: [],
                icon: h.iconAnonymousReply
            }
        ]
    },
    {
        id: 3,
        text: "This is comment.",
        userName: "John Doe",
        created: "01 December",
        isEditable: false,
        icon: h.iconMdComment,
        replies: []
    },
    {
        id: 4,
        text: "This is comment.",
        userName: "John Doe",
        created: "01 December",
        isEditable: false,
        icon: h.iconMdComment,
        replies: []
    },
    {
        id: 5,
        text: "This is comment.",
        userName: "John Doe",
        created: "01 December",
        isEditable: false,
        icon: h.iconMdComment,
        replies: []
    }
];

let model5: chat.IComment<number>[] = [
    {
        id: 0,
        text: "This is comment.",
        userName: "First أتمنى لك نهارا سعيدLast",
        created: "01 December",
        icon: h.iconJdComment,
        replies: [
            {
                id: 6,
                text: "This is reply. ID: 6 123456כשדכגדכדשכדגכ",
                userName: "John Doe",
                created: "01 December",
                icon: h.iconJdReply,
                replies: []
            },
            {
                id: 7,
                text: "This is reply. ID: 7",
                userName: "John Doe",
                created: "06 December",
                icon: h.iconJdReply,
                replies: []
            },
            {
                id: 8,
                text: "This is reply. ID: 8 כגדכשגדכדגכגשדכ",
                userName: "John Doe",
                created: "07 December",
                icon: h.iconJdReply,
                replies: []
            },
            {
                id: 9,
                text: "This is reply. Michael Doe has his own icon. ID: 9",
                userName: "Michael Doe",
                created: "08 December",
                replies: [],
                icon: h.iconAnonymousReply
            }
        ]
    },

    {
        id: 1,
        text: "גדכגעשעגעגעשדגכגכגשד",
        userName: "Anonymous",
        created: "01 December",
        icon: h.iconAnonymousComment,
        replies: [],
        isSelected: false
    },
    {
        id: 2,
        text: "This is comment. Michael Doe has his own icon.",
        userName: "Michael Doe",
        created: "01 December",
        icon: h.iconMdComment,
        isDisabled: true,
        replies: [
            {
                id: 60,
                text: "This is reply. ID: 60 123456כשדכגדכדשכדגכ",
                userName: "John Doe",
                created: "01 December",
                icon: h.iconJdReply,
                replies: []
            },
            {
                id: 70,
                text: "This is reply. ID: 70",
                userName: "John Doe",
                created: "06 December",
                icon: h.iconJdReply,
                replies: []
            }
        ],
        isSelected: false
    }
];

let model6: chat.IComment<number>[] = [
    {
        id: 0,
        text: "This is comment tagging @{1}.",
        userName: "John Doe",
        created: "01 December",
        icon: h.iconJdComment,
        replies: []
    },
    {
        id: 2,
        text: "@{0} is tagged in this one. As well as @{2}.",
        userName: "Michael Doe",
        created: "01 December",
        icon: h.iconMdComment,
        replies: []
    }
];

const model6UserList = [
    { id: 1, name: "John Doe", email: "john@quadient.com" },
    { id: 2, name: "Peter Parker", email: "peter@starkindustries.com" }
];

let lastId1 = 8;

let activeCommentId = -1;
let commentValue = "";

let activeCommentId2 = 0;
let commentValue2 = "";

let activeCommentId3 = 0;
let commentValue3 = "";

let activeCommentId4 = -1;
let commentValue4 = "";

let activeCommentId5: number | undefined = -1;
let commentValue5 = "";

let activeCommentId6 = 0;
let commentValue6 = "";

function generateId(): number {
    return Math.round(Math.random() * new Date().getMilliseconds());
}

function flattenComments<TId>(_: chat.IComment<TId>[]): chat.IComment<TId>[] {
    return [].concat.apply(
        [],
        model1.map(c => [c].concat(c.replies))
    );
}

const defaultRootCommentId = -1;

Example.init({}, () => {
    chat.setEnableRTL(enableRTL);
    Textarea.setEnableRTL(enableForTextarea);
    return [
        Container.create({
            header: "bobwai--chat with default actual user icon and scroll to last comment after submiting new comment",
            content: {
                tag: "div",
                attrs: { id: "someId" },
                children: chat.create({
                    labels: {
                        submit: "Submit",
                        reply: "Reply",
                        label: "Social Commenting",
                        cancel: "Cancel",
                        edit: "Edit",
                        removeComment: "Delete",
                        ok: "okay"
                    },
                    blurSave: true,
                    //  newCommentOff: true,
                    comments: model1,
                    activeCommentId: activeCommentId,
                    defaultRootCommentId: -1,
                    activeCommentValue: commentValue,
                    onChangeActiveCommentValue: (text: string) => {
                        commentValue = text;
                        b.invalidate();
                    },
                    onChangeActiveCommentId: id => {
                        activeCommentId = id;
                        b.invalidate();
                    },
                    onActiveCommentSubmit: (parentCommentId, text: string) => {
                        if (parentCommentId !== defaultRootCommentId) {
                            model1.forEach(c => (c.isScrolledTo = false));
                            model1
                                .filter(c => c.id === parentCommentId)[0]
                                .replies.push({
                                    id: generateId(),
                                    text: text,
                                    userName: "Cloud Administrator",
                                    icon: h.iconJdReply,
                                    created: "01 December",
                                    isEditable: true,
                                    replies: []
                                });
                        } else {
                            model1.forEach(c => (c.isScrolledTo = false));
                            model1.push({
                                id: lastId1++,
                                text: text,
                                isEditable: true,
                                userName: "John Doe",
                                icon: h.iconJdComment,
                                created: "01 December",
                                replies: [],
                                isScrolledTo: true
                            });
                        }
                        //b.invalidate();

                        const element = document.getElementById("someId");
                        if (element) {
                            element.focus();
                            console.log("element focused");
                        }
                        // b.invalidate();
                    },
                    onEditComment: (commentId, value, parentId) => {
                        if (parentId !== undefined) {
                            model1.filter(c => c.id === parentId)[0].replies.slice(-1)[0].text = value;
                        } else {
                            model1.filter(c => c.id === commentId)[0].text = value;
                        }

                        activeCommentId = -1;
                        b.invalidate();
                    },
                    onEditFocusOutComment: commentId => {
                        console.log("onEditFocusOutComment", commentId);
                    },
                    onDeleteComment: commentId => {
                        if (!model1.filter(c => c.id === commentId)[0]) {
                            for (let i = 0; i < model1.length; i++) {
                                if (model1[i] && model1[i].replies.filter(c => c.id === commentId)[0]) {
                                    model1[i].replies.pop();
                                }
                            }
                        } else {
                            delete model1[model1.findIndex(c => c.id === commentId)];
                        }

                        activeCommentId4 = -2;
                        b.invalidate();
                    },
                    onCancelComment: () => {
                        activeCommentId = -1;
                        b.invalidate();
                    },
                    icon: h.iconMdComment
                })
            }
            // size: Container.Size.small
        }),
        b.styledDiv([
            "Select comment id:",
            flattenComments(model1)
                .map(c => c.id)
                .map(i =>
                    b.styledDiv(
                        button.create({
                            label: `${i}`,
                            color: button.Theme.Light,
                            onClick: () => {
                                flattenComments(model1).forEach(c => {
                                    c.isSelected = c.id === i;
                                    c.isScrolledTo = false;
                                });
                                b.invalidate();
                            }
                        }),
                        { margin: 10, display: "inline" }
                    )
                )
        ]),

        Container.create({
            header: "bobwai--chat with custom actual user icon and extra control panel",
            content: chat.create({
                labels: {
                    submit: "Submit",
                    reply: "Reply",
                    label: "Social Commenting",
                    cancel: "Cancel",
                    edit: "Edit",
                    removeComment: "Delete"
                },
                comments: model2,
                onActiveCommentSubmit: (parentCommentId, text: string) => {
                    if (parentCommentId !== defaultRootCommentId) {
                        model2
                            .filter(c => c.id === parentCommentId)[0]
                            .replies.push({
                                id: generateId(),
                                text: text,
                                userName: "John Doe",
                                icon: h.iconJdReply,
                                created: "01 December",
                                replies: []
                            });
                    } else
                        model2.push({
                            id: lastId1++,
                            text: text,
                            userName: "John Doe",
                            icon: h.iconJdComment,
                            created: "01 December",
                            replies: []
                        });
                    b.invalidate();
                },
                onEditComment: () => {
                    return;
                },
                onDeleteComment: () => {
                    return;
                },
                onCancelComment: () => {
                    return;
                },
                icon: h.iconMdComment,
                submitControlPanel: h.createAddAreaButton(onClick),
                activeCommentId: activeCommentId2,
                activeCommentValue: commentValue2,
                defaultRootCommentId: defaultRootCommentId,
                onChangeActiveCommentValue: (text: string) => {
                    commentValue2 = text;
                    b.invalidate();
                },
                onChangeActiveCommentId: id => {
                    activeCommentId2 = id;
                    b.invalidate();
                }
            }),
            size: Container.Size.small
        }),
        Container.create({
            header: "bobwai--chat without header and with custom comments",
            content: chat.create({
                labels: {
                    submit: "Submit",
                    reply: "Reply",
                    label: "Social Commenting",
                    cancel: "Cancel",
                    edit: "Edit",
                    removeComment: "Delete"
                },
                comments: model3,
                avatarOff: false,
                onActiveCommentSubmit: (parentCommentId, text: string) => {
                    if (parentCommentId !== defaultRootCommentId)
                        model3
                            .filter(c => c.id === parentCommentId)[0]
                            .replies.push({
                                id: generateId(),
                                text: text,
                                userName: "John Doe",
                                icon: h.iconJdReply,
                                created: "01 December",
                                replies: []
                            });
                    else
                        model3.push({
                            id: lastId1++,
                            text: text,
                            userName: "John Doe",
                            icon: h.iconJdComment,
                            created: "01 December",
                            replies: []
                        });
                    b.invalidate();
                },
                onEditComment: () => {
                    return;
                },
                onDeleteComment: () => {
                    return;
                },
                onCancelComment: () => {
                    return;
                },
                icon: h.iconMdComment,
                headerOff: true,
                submitControlPanel: h.createAddAreaButton(onClick),
                activeCommentId: activeCommentId3,
                activeCommentValue: commentValue3,
                defaultRootCommentId: defaultRootCommentId,
                onChangeActiveCommentValue: (text: string) => {
                    commentValue3 = text;
                    b.invalidate();
                },
                onChangeActiveCommentId: id => {
                    activeCommentId3 = id;
                    b.invalidate();
                }
            }),
            size: Container.Size.small
        }),
        submitedCommentWithControlPanel.create(),
        Container.create({
            header: "bobwai--chat without Avatars, header off, some comments is editable",
            content: chat.create({
                labels: {
                    submit: "Submit",
                    reply: "Reply",
                    label: "Social Commenting",
                    cancel: "Cancel",
                    edit: "Edit",
                    removeComment: "Delete",
                    newComment: "New Comment"
                },
                comments: model4,
                avatarOff: true,
                headerOff: true,
                activeCommentId: activeCommentId4,
                activeCommentValue: commentValue4,
                defaultRootCommentId: defaultRootCommentId,
                newCommentOff: false,
                onChangeActiveCommentValue: (text: string) => {
                    commentValue4 = text;
                    b.invalidate();
                },
                onChangeActiveCommentId: id => {
                    activeCommentId4 = id;
                    b.invalidate();
                },
                onActiveCommentSubmit: (parentCommentId, text: string) => {
                    if (parentCommentId !== defaultRootCommentId) {
                        model4.forEach(c => (c.isScrolledTo = false));
                        model4
                            .filter(c => c.id === parentCommentId)[0]
                            .replies.push({
                                id: generateId(),
                                text: text,
                                userName: "Cloud Administrator",
                                isEditable: true,
                                icon: h.iconJdReply,
                                created: "01 December",
                                replies: []
                            });
                    } else {
                        model4.forEach(c => (c.isScrolledTo = false));
                        model4.push({
                            id: lastId1++,
                            text: text,
                            userName: "John Doe",
                            isEditable: true,
                            icon: h.iconJdComment,
                            created: "01 December",
                            replies: [],
                            isScrolledTo: true
                        });
                    }
                    b.invalidate();
                },
                onEditComment: (commentId, value: string, parentId) => {
                    if (parentId) {
                        model4.filter(c => c.id === parentId)[0].replies.slice(-1)[0].text = value;
                    } else {
                        model4.filter(c => c.id === commentId)[0].text = value;
                    }

                    activeCommentId4 = -2;
                    b.invalidate();
                },
                onDeleteComment: commentId => {
                    if (!model4.filter(c => c.id === commentId)[0]) {
                        for (let i = 0; i < model4.length; i++) {
                            if (model4[i] && model4[i].replies.filter(c => c.id === commentId)[0]) {
                                model4[i].replies.pop();
                            }
                        }
                    } else {
                        delete model4[model4.findIndex(c => c.id === commentId)];
                    }

                    activeCommentId4 = -2;
                    b.invalidate();
                },
                onCancelComment: () => {
                    activeCommentId4 = -2;
                    b.invalidate();
                },
                icon: h.iconMdComment
            }),
            size: Container.Size.small
        }),
        Container.create({
            header:
                "bobwai--chat support RTL, avatarOff, headerOff, newCommentOff, isCollapsible, isMarkable, MaxInputLength: 20, Disable third comment",
            content: [
                b.styledDiv(
                    [
                        b.styledDiv(
                            checkbox.create({
                                value: avatarOff,
                                title: "avatarOff",
                                onChange: (value: boolean) => {
                                    avatarOff = value;
                                    b.invalidate();
                                }
                            }),
                            { margin: 10, display: "inline-block" }
                        ),
                        b.styledDiv(
                            checkbox.create({
                                value: headerOff,
                                title: "headerOff",
                                onChange: (value: boolean) => {
                                    headerOff = value;
                                    b.invalidate();
                                }
                            }),
                            { margin: 10, display: "inline-block" }
                        ),
                        b.styledDiv(
                            checkbox.create({
                                value: newCommentOff,
                                title: "newCommentOff",
                                onChange: (value: boolean) => {
                                    newCommentOff = value;
                                    b.invalidate();
                                }
                            }),
                            { margin: 10, display: "inline-block" }
                        ),
                        b.styledDiv(
                            checkbox.create({
                                value: isCollapsible,
                                title: "isCollapsible",
                                onChange: (value: boolean) => {
                                    isCollapsible = value;
                                    b.invalidate();
                                }
                            }),
                            { margin: 10, display: "inline-block" }
                        ),
                        b.styledDiv(
                            checkbox.create({
                                value: isMarkable,
                                title: "isMarkable",
                                onChange: (value: boolean) => {
                                    isMarkable = value;
                                    b.invalidate();
                                }
                            }),
                            { margin: 10, display: "inline-block" }
                        ),
                        b.styledDiv(
                            checkbox.create({
                                value: readOnly,
                                title: "readOnly",
                                onChange: (value: boolean) => {
                                    readOnly = value;
                                    b.invalidate();
                                }
                            }),
                            { margin: 10, display: "inline-block" }
                        ),
                        b.styledDiv(
                            label.create({
                                children: "maxInputLength 20 characters!",
                                isBold: true,
                                isSimple: true
                            }),
                            { margin: 10, display: "inline-block", background: "#ffff00" }
                        ),
                        b.styledDiv(
                            checkbox.create({
                                value: blurSave,
                                title: "save on focus out, reply and edit",
                                onChange: (value: boolean) => {
                                    blurSave = value;
                                    b.invalidate();
                                }
                            }),
                            { margin: 10, display: "inline-block" }
                        )
                    ],
                    { margin: 10, display: "block", background: "#fff", border: "1px solid silver" }
                ),
                b.styledDiv(
                    chat.create({
                        labels: {
                            submit: "Submit",
                            reply: "Reply",
                            label: "Social Commenting",
                            cancel: "Cancel",
                            edit: "Edit",
                            removeComment: "Delete",
                            collapse: "replies",
                            ok: "ok"
                        },
                        comments: model5,
                        avatarOff: avatarOff,
                        headerOff: headerOff,
                        newCommentOff: newCommentOff,
                        isMarkable: isMarkable,
                        isCollapsible: isCollapsible,
                        maxLengthInput: 20,
                        readOnly: readOnly,
                        blurSave: blurSave,
                        onActiveCommentSubmit: (parentCommentId, text: string) => {
                            if (parentCommentId !== defaultRootCommentId) {
                                model5
                                    .filter(c => c.id === parentCommentId)[0]
                                    .replies.push({
                                        id: generateId(),
                                        text: text,
                                        userName: "Markus",
                                        icon: h.iconJdReply,
                                        created: "01 December",
                                        replies: []
                                    });
                            } else
                                model5.push({
                                    id: lastId1++,
                                    text: text,
                                    userName: "Markus",
                                    icon: h.iconJdComment,
                                    created: "01 December",
                                    replies: []
                                });
                            b.invalidate();
                        },
                        onEditComment: (commentId, value: string) => {
                            if (
                                model5.filter(c => c.id === commentId).length !== 0 &&
                                model5.filter(c => c.id === commentId)[0].replies.length > 0
                            ) {
                                model5.filter(c => c.id === commentId)[0].replies.slice(-1)[0].text = value;
                            } else {
                                model5.filter(c => c.id === commentId)[0].text = value;
                            }
                            activeCommentId5 = undefined;
                            b.invalidate();
                        },
                        onDeleteComment: commentId => {
                            if (model5.filter(c => c.id === commentId)[0].replies.length > 0) {
                                model5.filter(c => c.id === commentId)[0].replies.pop();
                            } else {
                                delete model5[model5.findIndex(c => c.id === commentId)];
                            }

                            activeCommentId5 = undefined;
                            b.invalidate();
                        },
                        onCancelComment: () => {
                            activeCommentId5 = undefined;
                            b.invalidate();
                        },
                        icon: h.iconMdComment,
                        submitControlPanel: h.createAddAreaButton(onClick),
                        activeCommentId: activeCommentId5,
                        activeCommentValue: commentValue5,
                        defaultRootCommentId: defaultRootCommentId,
                        onChangeActiveCommentValue: (text: string) => {
                            commentValue5 = text;
                            b.invalidate();
                        },
                        onChangeActiveCommentId: id => {
                            activeCommentId5 = id;
                            b.invalidate();
                        },
                        onActiveComment: id => {
                            model5.forEach(c => (c.isSelected = false));
                            model5.filter(c => c.id === id)[0].isSelected = true;
                            b.invalidate();
                        },
                        onCollapseReplies: id => {
                            model5.filter(c => c.id === id)[0].isCollapsed = !model5.filter(c => c.id === id)[0].isCollapsed;
                            b.invalidate();
                        },
                        onMarkComment: id => {
                            model5.filter(c => c.id === id)[0].isMarked = !model5.filter(c => c.id === id)[0].isMarked;
                            b.invalidate();
                        }
                    }),
                    { height: 1130 }
                )
            ],
            size: Container.Size.medium
        }),

        Container.create({
            header: "bobwai--chat with context menu",
            content: chat.create({
                labels: {
                    submit: "Submit",
                    reply: "Reply",
                    label: "Social Commenting",
                    cancel: "Cancel",
                    edit: "Edit",
                    removeComment: "Delete"
                },
                comments: model3,
                avatarOff: false,
                onActiveCommentSubmit: (parentCommentId, text: string) => {
                    if (parentCommentId !== defaultRootCommentId)
                        model3
                            .filter(c => c.id === parentCommentId)[0]
                            .replies.push({
                                id: generateId(),
                                text: text,
                                userName: "John Doe",
                                icon: h.iconJdReply,
                                created: "01 December",
                                replies: []
                            });
                    else
                        model3.push({
                            id: lastId1++,
                            text: text,
                            userName: "John Doe",
                            icon: h.iconJdComment,
                            created: "01 December",
                            replies: []
                        });
                    b.invalidate();
                },
                onEditComment: () => {
                    return;
                },
                onDeleteComment: () => {
                    return;
                },
                onCancelComment: () => {
                    return;
                },
                icon: h.iconMdComment,
                headerOff: true,
                submitControlPanel: h.createAddAreaButton(onClick),
                activeCommentId: activeCommentId3,
                activeCommentValue: commentValue3,
                defaultRootCommentId: defaultRootCommentId,
                onChangeActiveCommentValue: (text: string) => {
                    commentValue3 = text;
                    b.invalidate();
                },
                onChangeActiveCommentId: id => {
                    activeCommentId3 = id;
                    b.invalidate();
                },
                getContextMenuItems: (id: number, _value: string, isReplies: boolean) => [
                    {
                        content: `Delete ${isReplies ? "Thread" : "Comment"}`,
                        iconContent: Icon.create({ sprite: b.sprite(Icon.delete_small_png, color.Black) }),
                        onClick: () => {
                            alert("Deleted item with id: " + id);
                        }
                    }
                ]
            }),
            size: Container.Size.small
        }),

        Container.create({
            header: "bobwai--chat with suggestion box",
            content: chat.create({
                labels: {
                    submit: "Submit",
                    reply: "Reply",
                    label: "Social Commenting",
                    cancel: "Cancel",
                    edit: "Edit",
                    removeComment: "Delete"
                },
                comments: model6,
                activeCommentId: activeCommentId6,
                defaultRootCommentId: defaultRootCommentId,
                activeCommentValue: commentValue6,
                onChangeActiveCommentValue: (text: string) => {
                    commentValue6 = text;
                    b.invalidate();
                },
                onChangeActiveCommentId: id => {
                    activeCommentId6 = id;
                    b.invalidate();
                },
                onActiveCommentSubmit: (parentCommentId, text: string) => {
                    if (parentCommentId !== defaultRootCommentId) {
                        model6.forEach(c => (c.isScrolledTo = false));
                        model6
                            .filter(c => c.id === parentCommentId)[0]
                            .replies.push({
                                id: generateId(),
                                text: text,
                                userName: "Cloud Administrator",
                                icon: h.iconJdReply,
                                created: "01 December",
                                replies: []
                            });
                    } else {
                        model6.forEach(c => (c.isScrolledTo = false));
                        model6.push({
                            id: lastId1++,
                            text: text,
                            userName: "John Doe",
                            icon: h.iconJdComment,
                            created: "01 December",
                            replies: [],
                            isScrolledTo: true
                        });
                    }
                    b.invalidate();
                },
                onEditComment: () => {
                    return;
                },
                onDeleteComment: () => {
                    return;
                },
                onCancelComment: () => {
                    return;
                },
                icon: h.iconMdComment,
                userList: model6UserList,
                placeholderText: "This is placeholder text for textareas"
            }),
            size: Container.Size.small
        }),

        Container.create({
            isForConstantOverride: true,
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField<boolean>({
                            label: "Enable supporting Right to Left language",
                            labelWidth: 350,
                            value: enableRTL,
                            fieldFactory: checkbox.create,
                            onChange: (v: boolean) => {
                                enableRTL = v;
                                chat.setEnableRTL(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.Checkbox
                        }),
                        Example.createField<boolean>({
                            label: "Enable supporting Right to Left language for textarea",
                            labelWidth: 350,
                            value: enableForTextarea,
                            fieldFactory: checkbox.create,
                            onChange: (v: boolean) => {
                                enableForTextarea = v;
                                Textarea.setEnableRTL(v);
                                b.invalidateStyles();
                            },
                            fieldType: Example.FieldType.Checkbox
                        })
                    ]
                })
            ]
        })
    ];
});
