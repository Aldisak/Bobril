import * as b from "bobril";
import * as Container from "bobwai--viewer-container";
import * as Example from "bobwai--example";
import * as LInlineItems from "bobwai--l-inline-items";
import * as Focus from "../src/lib";
import * as Color from "bobwai--color";
import * as Spinner from "bobwai--spinner";
import * as Combobox from "bobwai--combobox";
import * as Textbox from "bobwai--textbox";
import * as Checkbox from "bobwai--checkbox";
import * as c from "../src/publicConstants";

const keyCount = [0, 0, 0, 0];
const keyCount2 = [0];
const keyCount3 = [0, 0];
const keyCount4 = [0, 0, 0];
const keyCount5 = [0, 0, 0];
const keyCount6 = [0, 0, 0];
const keyCount7 = [0, 0, 0, 0];
const keyCount8 = [0, 0, 0];
const keyCount9 = [0, 0];
let onFocusChangedMockConsole = "";
let actualDisplayAs: Focus.DisplayAs = Focus.DisplayAs.EnclosedInlineBlock;
let mouseCursor: Focus.Cursor | undefined;
let actualTestText = "Some looooooooooooooooooooooooooong text";
let isTextSelectionAllowed: boolean | undefined;
let isBorderVisibleInDisabledState: boolean | undefined;
const mockFontStyles = { fontSize: 14, background: "#ff6600", padding: 20, margin: 20 };

let spinnerValue = 100;

Example.init({}, () => {
    return [
        Container.create({
            header: "bobwai--focus",
            description: "Adds focusable style and handles Enter key",
            model: { enterKeyCount: keyCount },
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            label: "isBorderVisibleInDisabledState",
                            fieldFactory: Checkbox.create,
                            value: isBorderVisibleInDisabledState,
                            fieldType: Example.FieldType.Checkbox,
                            onChange: (v) => {
                                isBorderVisibleInDisabledState = v;
                                b.invalidate();
                            },
                            note: "Works only if focus isDisabled",
                        }),
                    ],
                }),
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            isBorderVisibleInDisabledState,
                            content: getMockDiv("lime"),
                            onFocusCommand: () => addKeyPress(keyCount, 0),
                        }),
                        Focus.create({
                            isBorderVisibleInDisabledState,
                            content: getMockDiv("yellow"),
                            onFocusCommand: () => addKeyPress(keyCount, 1),
                        }),
                        Focus.create({
                            content: getMockDiv("lightgrey", true),
                            onFocusCommand: () => addKeyPress(keyCount, 2),
                            isDisabled: true,
                            isBorderVisibleInDisabledState,
                        }),
                        Focus.create({
                            isBorderVisibleInDisabledState,
                            content: getMockDiv("orange"),
                            onFocusCommand: () => addKeyPress(keyCount, 3),
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "display as block",
            description: "Used for example from bobwai--butoon, which should be displayed as block in some special cases",
            model: { enterKeyCount: keyCount2 },
            content: [
                Focus.create({
                    content: getMockDiv("lime", false, true),
                    onFocusCommand: () => addKeyPress(keyCount2, 0),
                    displayAs: Focus.DisplayAs.Block,
                }),
            ],
        }),
        Container.create({
            header: "custom offset",
            description: "Offset of focusable components is not unique according to specification",
            model: { enterKeyCount: keyCount3 },
            content: [
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("yellow"),
                            onFocusCommand: () => addKeyPress(keyCount3, 0),
                            offsetBottom: 10,
                            offsetTop: 10,
                            offsetLeft: 10,
                            offsetRight: 10,
                        }),
                        Focus.create({
                            content: getMockDiv("orange"),
                            onFocusCommand: () => addKeyPress(keyCount3, 1),
                            offsetBottom: -15,
                            offsetTop: -15,
                            offsetLeft: -15,
                            offsetRight: -15,
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "custom color",
            description: "Color of focusable components is not unique according to specification (see bobwai--button)",
            model: { enterKeyCount: keyCount4 },
            content: [
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("lime"),
                            onFocusCommand: () => addKeyPress(keyCount4, 0),
                            color: Color.Application,
                        }),
                        Focus.create({
                            content: getMockDiv("orange"),
                            onFocusCommand: () => addKeyPress(keyCount4, 1),
                            color: Color.Error,
                        }),
                        Focus.create({
                            content: getMockDiv("lime"),
                            onFocusCommand: () => addKeyPress(keyCount4, 2),
                            color: Color.Warning,
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "maxWith",
            description: `Used for example if component shoud use ellipsis (see bobwai--link where we need maxWidth="100%").
            Inner component is expected to handle its size somehow not to overflow from its parent (it is not shown in this example).`,
            model: { enterKeyCount: keyCount5 },
            content: [
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("yellow"),
                            onFocusCommand: () => addKeyPress(keyCount5, 0),
                            maxWidth: 10,
                        }),
                        Focus.create({
                            content: getMockDiv("orange"),
                            onFocusCommand: () => addKeyPress(keyCount5, 1),
                            maxWidth: 50,
                        }),
                        Focus.create({
                            content: getMockDiv("lime"),
                            onFocusCommand: () => addKeyPress(keyCount5, 2),
                            maxWidth: "100%",
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "vertical align",
            description: `Used if component shoud use vertical-align:middle (see bobwai--state-icon).`,
            model: { enterKeyCount: keyCount6 },
            content: b.styledDiv(
                [
                    Focus.create({
                        content: getMockDiv("yellow"),
                        onFocusCommand: () => addKeyPress(keyCount6, 0),
                    }),
                    Focus.create({
                        content: getMockDiv("orange"),
                        onFocusCommand: () => addKeyPress(keyCount6, 1),
                        verticalAlign: Focus.VerticalAlign.Middle,
                    }),
                    Focus.create({
                        content: getMockDiv("lime"),
                        onFocusCommand: () => addKeyPress(keyCount6, 2),
                    }),
                ],
                {
                    background: "grey",
                    height: 100,
                }
            ),
        }),
        Container.create({
            header: "TEST: isTabIndexDisabled",
            isTest: true,
            description: "In special cases (bobwai--radio-button) we do not want to have tabIndex",
            model: { enterKeyCount: keyCount7 },
            content: [
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("lime"),
                            onFocusCommand: () => addKeyPress(keyCount7, 0),
                        }),
                        Focus.create({
                            content: getMockDiv("yellow", false, false, "TabIndex is disabled: Cannot be focused"),
                            onFocusCommand: () => addKeyPress(keyCount7, 1),
                            isTabIndexDisabled: true,
                        }),
                        Focus.create({
                            content: getMockDiv("lightgrey", true),
                            onFocusCommand: () => addKeyPress(keyCount7, 2),
                            isDisabled: true,
                        }),
                        Focus.create({
                            content: getMockDiv("orange"),
                            onFocusCommand: () => addKeyPress(keyCount7, 3),
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "Font size is inherited from parent",
            description: "If you need to have font size from parent. By default font size from parent is resetting in focus component",
            model: { isFontSizeInheritedFromParent: true },
            content: [
                b.styledDiv(
                    [
                        "Parent font - by default it is resetting in focus content ",
                        Focus.create({
                            content: getMockDiv("lime", null, null, null),
                            onFocusCommand: () => addKeyPress(keyCount7, 0),
                        }),
                    ],
                    mockFontStyles
                ),
                b.styledDiv(
                    [
                        "Parent font, in this case font size of focus content is according to parent ",
                        Focus.create({
                            content: getMockDiv("lime", null, null, null, false),
                            onFocusCommand: () => addKeyPress(keyCount7, 0),
                            isFontSizeInheritedFromParent: true,
                        }),
                    ],
                    mockFontStyles
                ),
            ],
        }),
        Container.create({
            header: "Different command keys",
            description: "Focus command can be fired by different keys (space by checkbox, enter+space by button, ...)",
            model: { keyCount: keyCount8 },
            content: [
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("lime", false, false, "Enter (by default)"),
                            onFocusCommand: () => addKeyPress(keyCount8, 0),
                        }),
                        Focus.create({
                            content: getMockDiv("yellow", false, false, "Space"),
                            onFocusCommand: () => addKeyPress(keyCount8, 1),
                            focusCommandKeys: [32],
                        }),
                        Focus.create({
                            content: getMockDiv("orange", false, false, "Enter OR Space"),
                            onFocusCommand: () => addKeyPress(keyCount8, 2),
                            focusCommandKeys: [13, 32],
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "Focus with and without FullSize, use spinner to change size of parent div (grey background)",
            model: { enterKeyCount: keyCount9 },
            content: [
                b.styledDiv(
                    Spinner.create({
                        value: spinnerValue,
                        variant: Spinner.variant.Vertical,
                        maxValue: 100,
                        minValue: 50,
                        step: 5,
                        unit: "%",
                        onChange: (value: number) => {
                            spinnerValue = value;
                            b.invalidate();
                        },
                    }),
                    { marginBottom: 10 }
                ),
                b.styledDiv(
                    LInlineItems.create({
                        margin: LInlineItems.Margin.Normal,
                        items: [
                            b.styledDiv(
                                Focus.create({
                                    content: getMockDiv("lime", false, false, "Enter (by default)"),
                                    onFocusCommand: () => addKeyPress(keyCount9, 0),
                                    isFullSize: false,
                                }),
                                { width: scaleDimension(200), height: scaleDimension(150), backgroundColor: "grey", padding: 10 }
                            ),
                            b.styledDiv(
                                Focus.create({
                                    content: getMockDiv("yellow", false, false, "Focus me nad press enter", true, true),
                                    onFocusCommand: () => addKeyPress(keyCount9, 1),
                                    focusCommandKeys: [13],
                                    isFullSize: true,
                                }),
                                { width: scaleDimension(200), height: scaleDimension(150), backgroundColor: "grey", padding: 10 }
                            ),
                        ],
                    }),
                    { height: 170 }
                ),
            ],
        }),
        Container.create({
            header: "Solid border style",
            description: "By default dotted style is used, optionally there is solid style",
            model: { keyCount: keyCount8 },
            content: [
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("lime", false, false, "Default - dotted - border on focus"),
                        }),
                        Focus.create({
                            content: getMockDiv("yellow", false, false, "Solid border on focus"),
                            borderStyle: Focus.BorderStyle.Solid,
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "Border radius style",
            description:
                "By default no radius is used, optionally there is small (2px) radius or full radius e.g. for action button round component",
            model: { keyCount: keyCount8 },
            content: [
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("lime", false, false, "Default - none - border radius on focus"),
                            borderStyle: Focus.BorderStyle.Solid,
                        }),
                        Focus.create({
                            content: getMockDiv("yellow", false, false, "Small (2px) border radius on focus"),
                            borderStyle: Focus.BorderStyle.Solid,
                            borderRadius: Focus.BorderRadius.Small,
                        }),
                        Focus.create({
                            content: getMockDiv("yellow", false, false, "Full (100%) border radius on focus"),
                            borderStyle: Focus.BorderStyle.Solid,
                            borderRadius: Focus.BorderRadius.Full,
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "OnFocusChanged",
            description: "Focus via click can have different color from focus via keyboard",
            model: onFocusChangedMockConsole,
            content: [
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("lime", false, false, "Default - none - border radius on focus"),

                            borderStyle: Focus.BorderStyle.Solid,
                            onFocusChanged: (v, c) => {
                                onFocusChangedMockConsole = `onFocusChanged(isFocused: ${v}, wasFocussedViaClick: ${c}) `;
                                b.invalidate();
                            },
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "Focused via click",
            description: "Focus via click can have different color from focus via keyboard",
            model: { keyCount: keyCount8, onFocusChangedEvents: onFocusChangedMockConsole },
            content: [
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("lime", false, false, "Default - none - border radius on focus"),
                            color: "blue",
                            borderStyle: Focus.BorderStyle.Solid,
                            focussedViaClick: {
                                color: "red",
                            },
                            onFocusChanged: (isFocused: boolean, wasFocussedViaClick?: boolean) => {
                                onFocusChangedMockConsole = `onFocusChanged(isFocused: ${isFocused}, wasFocussedViaClick: ${wasFocussedViaClick}) `;
                                b.invalidate();
                            },
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "Allow text selection",
            description: "If you need to have possibility of text copy",
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            label: "isTextSelectionAllowed",
                            fieldFactory: Checkbox.create,
                            value: isTextSelectionAllowed,
                            fieldType: Example.FieldType.Checkbox,
                            onChange: (v) => {
                                isTextSelectionAllowed = v;
                                b.invalidate();
                            },
                        }),
                    ],
                }),
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("lime", false, false, "Default - none - border radius on focus"),
                            color: "blue",
                            borderStyle: Focus.BorderStyle.Solid,
                            isTextSelectionAllowed,
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "Auto mouse cursor",
            description: "Component should look as disabled but should be still focusable",
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            label: "Mouse cursor",
                            customValueContent: Example.createComboEnum({
                                comboboxFactory: Combobox.create,
                                value: mouseCursor,
                                enum: Focus.Cursor,
                                onChange: (v) => {
                                    mouseCursor = v;
                                    b.invalidate();
                                },
                            }),
                        }),
                    ],
                }),
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        Focus.create({
                            content: getMockDiv("lime", false, false, "Default - none - border radius on focus"),
                            color: "blue",
                            mouseCursor,
                            isTextSelectionAllowed,
                        }),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "Focused display as InlineBlockMaxWidth",
            description:
                "For special case when you need focus to have the same width as content but children ellipsis still works. E.g. table sorting header",
            model: { keyCount: keyCount8 },
            content: [
                Example.createControlPanel({
                    items: [
                        Example.createField({
                            label: "Content",
                            fieldFactory: Textbox.create,
                            value: actualTestText,
                            fieldType: Example.FieldType.Textbox,
                            onChange: (v) => {
                                actualTestText = v;
                                b.invalidate();
                            },
                        }),
                        Example.createField({
                            label: "Display as",
                            customValueContent: Example.createComboEnum({
                                comboboxFactory: Combobox.create,
                                value: actualDisplayAs,
                                enum: Focus.DisplayAs,
                                onChange: (v) => {
                                    actualDisplayAs = v;
                                    b.invalidate();
                                },
                            }),
                            note: "Block and InlineBlockMaxWidth seems to be same at first sight but try to focus in case of shorter text.",
                        }),
                    ],
                }),
                LInlineItems.create({
                    margin: LInlineItems.Margin.Normal,
                    items: [
                        b.styledDiv(
                            Focus.create({
                                content: b.styledDiv(actualTestText, {
                                    whiteSpace: "nowrap",
                                    textOverflow: "ellipsis",
                                    overflow: "hidden",
                                    fontSize: 13,
                                    lineHeight: "20px",
                                    background: "red",
                                }),
                                color: "blue",
                                borderStyle: Focus.BorderStyle.Solid,
                                displayAs: actualDisplayAs,
                            }),
                            {
                                width: 150,
                                background: "yellow",
                                fontSize: 0,
                            }
                        ),
                    ],
                }),
            ],
        }),
        Container.create({
            header: "Public constant InteractiveHideFrame",
            description: "For use in interactive only! It hides frame, interactive handles frame visibility itself.",
            isTest: true,
            content: [
                Checkbox.create({
                    title: "InteractiveHideFrame",
                    value: c.InteractiveHideFrame(),
                    onChange: (v: boolean) => {
                        c.setInteractiveHideFrame(v);
                        b.invalidate();
                    },
                }),
            ],
        }),
    ];
});

function addKeyPress(array: number[], index: number) {
    array[index]++;
    b.invalidate();
}

function getMockDiv(
    color: string,
    isDisabled?: boolean | null,
    fullWidth?: boolean | null,
    text?: string | null,
    useFontSize: boolean = true,
    isFullSize: boolean = false
): b.IBobrilNode {
    const defaultText = isDisabled ? "DISABLED: Cannot be focused" : "Focus me and press Enter";

    return b.styledDiv(text ? text : defaultText, {
        background: color,
        height: isFullSize ? `100%` : 80,
        width: isFullSize || fullWidth ? "100%" : 80,
        fontSize: useFontSize ? 10 : "100%",
        padding: 5,
        display: "block",
        boxSizing: "border-box",
    });
}

function scaleDimension(dimension: number): number {
    return (dimension / 100) * spinnerValue;
}
