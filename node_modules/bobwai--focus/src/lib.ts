import * as b from "bobril";
import * as styles from "./styles";
import * as d from "./data";
import * as c from "./publicConstants";
import { setWebContentAccessibilityAttributes } from "helpers--web-content-accessibility";
import { Cursor } from "./data";
export { setWebContentAccessibilityAttributes } from "helpers--web-content-accessibility";

export * from "./data";
export * from "./publicConstants";

export const create = b.createComponent<d.IData>({
    id: "bobwai--focus",
    render(ctx: IContext, me: b.IBobrilNode): void {
        if (!ctx.data.isDisabled && !ctx.data.isTabIndexDisabled) {
            me.attrs = {
                tabindex: 0,
            };
        }

        if (ctx.data.webContentAccessibility) {
            setWebContentAccessibilityAttributes(me, ctx.data.webContentAccessibility);
        }

        me.children = [
            ctx.data.content,
            b.styledDiv(
                "",
                styles.focusBaseStyle,
                styles.getFocusStyle(ctx.data, ctx.isFocussedViaClick),
                !isFrameVisible(ctx) && styles.focusBaseInvisibleStyle
            ),
        ];

        b.style(me, [
            styles.wrapperStyle,
            ctx.data.isFontSizeInheritedFromParent && styles.wrapperFontSizeFromParentStyle,
            ctx.data.verticalAlign === d.VerticalAlign.Middle && styles.wrapperVerticalAlignMiddleStyle,
            (ctx.data.isDisabled || ctx.data.isTabIndexDisabled || ctx.data.mouseCursor === Cursor.Auto) &&
                !ctx.isDrag &&
                styles.wrapperDisabledStyle,
            ctx.data.displayAs === d.DisplayAs.Block && styles.displayBlockStyle,
            ctx.data.displayAs === d.DisplayAs.EnclosedInlineBlock && styles.enclosedInlineBlockStyle,
            ctx.data.maxWidth !== undefined && ctx.data.maxWidth !== null && { maxWidth: ctx.data.maxWidth },
            ctx.data.isFullSize && styles.wrapperFullSizeStyle,
            ctx.data.isTextSelectionAllowed && styles.focusWrapperTextSelectionAllowedStyle,
            !ctx.isDrag && styles.wrapperStyleClickable,
        ]);
    },
    onFocus(ctx: IContext): void {
        onFocusChange(ctx, true);
    },
    onBlur(ctx: IContext): void {
        onFocusChange(ctx, false);
    },
    onFocusIn(ctx: IContext): void {
        onFocusChange(ctx, true);
    },
    onFocusOut(ctx: IContext): void {
        onFocusChange(ctx, false);
    },
    onKeyDown(ctx: IContext, event: b.IKeyDownUpEvent): boolean {
        if (ctx.data.onFocusCommand && !ctx.data.isDisabled && isCommandKey(event.which, ctx.data)) {
            ctx.data.onFocusCommand();
            return true;
        }
        return false;
    },
    onMouseDown(ctx: IContext, _e: b.IBobrilMouseEvent): boolean {
        if (!ctx.data.isDisabled) {
            ctx.isFocussedViaClick = true;
            b.invalidate(ctx);
        }
        return false;
    },
    onDrag(ctx: IContext) {
        if (ctx.isDrag) {
            return false;
        }
        ctx.isDrag = true;
        b.invalidate(ctx);
        return false;
    },
    onDragEnd(ctx: IContext) {
        ctx.isDrag = false;
        b.invalidate(ctx);
        return false;
    },
});

function isFrameVisible(ctx: IContext): boolean {
    if (c.InteractiveHideFrame()) {
        return false;
    }
    if (ctx.data.isBorderVisibleInDisabledState && ctx.data.isDisabled) {
        return true;
    }
    return ctx.isFocus;
}

interface IContext extends b.IBobrilCtx {
    isFocus: boolean;
    isFocussedViaClick?: boolean;
    data: d.IData;
    isDrag: boolean;
}

function onFocusChange(ctx: IContext, isFocus: boolean) {
    const value = ctx.data.isDisabled ? false : isFocus;
    if (ctx.isFocus !== value) {
        if (value === false) {
            ctx.isFocussedViaClick = false;
        }
        ctx.isFocus = value;
        if (ctx.data.onFocusChanged) {
            ctx.data.onFocusChanged(ctx.isFocus, ctx.isFocus ? ctx.isFocussedViaClick : undefined);
        }
        b.invalidate(ctx);
    }
}

function isCommandKey(keyCode: number, data: d.IData): boolean {
    if (data.focusCommandKeys) {
        return data.focusCommandKeys.indexOf(keyCode) >= 0;
    }
    return keyCode === 13; // Enter by default
}

// added by script - BEGIN
export const Focus = create;
// added by script - END
