import * as b from "bobril";
import * as Color from "bobwai--color";
import { IWebContentAccessibility } from "helpers--web-content-accessibility";
export {
    IWebContentAccessibility,
    ContentAccessibilityRole,
    ContentAccessibilityShorting,
    ContentAccessibilityLive,
} from "helpers--web-content-accessibility";

export interface IData {
    content: b.IBobrilChildren;
    onFocusCommand?: () => void;
    focusCommandKeys?: number[];
    isDisabled?: boolean;
    /**
     * Set Cursor.Auto if you need disabled cursor but component should be still focusable (do not set isDisabled)
     */
    mouseCursor?: Cursor;
    /** For the case that you need component looks as focused also in disabled state
    /* It is useful when there is some hidden native component part which is natively focused and you need to visually mock the focus.
    */
    isBorderVisibleInDisabledState?: boolean;
    /** i.e. for radiobutton, which has own tabindex */
    isTabIndexDisabled?: boolean;
    displayAs?: DisplayAs;
    offsetTop?: number;
    offsetLeft?: number;
    offsetRight?: number;
    offsetBottom?: number;
    color?: Color.IColor;
    maxWidth?: number | string;
    verticalAlign?: VerticalAlign;
    isFontSizeInheritedFromParent?: boolean;
    isFullSize?: boolean;
    webContentAccessibility?: IWebContentAccessibility;
    borderStyle?: BorderStyle;
    borderRadius?: BorderRadius;
    focussedViaClick?: IFocusedViaClick;
    isTextSelectionAllowed?: boolean;
    onFocusChanged?: (hasFocus: boolean, wasFocussedViaClick?: boolean) => void;
}

export enum Cursor {
    // pointer cursor when active, auto cursor when disabled
    Default,
    // auto cursor when active, auto cursor when disabled
    // for the case that focus is used on disabled component which should be still focusable
    Auto,
}

export interface IFocusedViaClick {
    color?: Color.IColor;
}

export enum DisplayAs {
    Default,
    Block,
    /** Inline block up to parent width */
    EnclosedInlineBlock,
}

export enum VerticalAlign {
    Default,
    Middle,
}

export enum BorderStyle {
    /* Default */
    Dotted,
    Solid,
}

export enum BorderRadius {
    /** Default */
    None,
    /** 2px */
    Small,
    /** 100% - create circle */
    Full,
}
