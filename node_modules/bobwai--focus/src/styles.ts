import * as b from "bobril";
import * as d from "./data";
import * as Color from "bobwai--color";
import * as StyleMixins from "bobwai--style-mixins";

namespace localVariables {
    export const focusBorderStyle = "dotted";
    export const focusBorderWidth = 1;
    export const focusBorderColor = Color.Application;
    export const focusBorderRadius = 0;
    export const focusBorderOffset = -3;
    export const borderSmallRadius = 2;
    export const borderFullRadius = "100%";
}

export const focusBaseStyle = b.styleDef({
    content: "",
    position: "absolute",
    bottom: localVariables.focusBorderOffset,
    left: localVariables.focusBorderOffset,
    top: localVariables.focusBorderOffset,
    right: localVariables.focusBorderOffset,
    borderStyle: localVariables.focusBorderStyle,
    borderWidth: localVariables.focusBorderWidth,
    borderRadius: localVariables.focusBorderRadius,
    pointerEvents: "none",
});

export const focusBaseInvisibleStyle = b.styleDefEx(focusBaseStyle, { display: "none" });

export function getFocusStyle(data: d.IData, isFocussedViaClick?: boolean): b.IBobrilStyles {
    return [
        {
            bottom: getNumberOrDefault(data.offsetBottom),
            left: getNumberOrDefault(data.offsetLeft),
            top: getNumberOrDefault(data.offsetTop),
            right: getNumberOrDefault(data.offsetRight),
            borderColor: getBorderColor(data, isFocussedViaClick),
        },
        data.borderStyle === d.BorderStyle.Solid && borderSolidStyle,
        data.borderRadius && getBorderRadiusStyle(data),
    ];
}

function getBorderRadiusStyle(data: d.IData): b.IBobrilStyle | undefined {
    switch (data.borderRadius) {
        case d.BorderRadius.Small:
            return borderRadiusSmallStyle;
        case d.BorderRadius.Full:
            return borderRadiusFullStyle;
    }
    return undefined;
}

function getBorderColor(data: d.IData, isFocussedViaClick?: boolean): Color.IColor {
    if (isFocussedViaClick && data.focussedViaClick && data.focussedViaClick.color) {
        return data.focussedViaClick.color;
    }
    return data.color ? data.color : localVariables.focusBorderColor;
}

function getNumberOrDefault(value?: number): number {
    return value === undefined || value === null ? localVariables.focusBorderOffset : value;
}
export const wrapperStyle = b.styleDef(
    [
        {
            position: "relative",
            display: "inline-block",
            fontSize: 0,
        },
    ],
    {},
    "focus-wrapper"
);

export const wrapperStyleClickable = b.styleDef(StyleMixins.getClickableElement(), {}, "focus-wrapper-clickable");

export const wrapperFullSizeStyle = b.styleDefEx(wrapperStyle, {
    height: "100%",
    display: "block",
});

export const wrapperFontSizeFromParentStyle = b.styleDefEx(
    wrapperStyle,
    {
        fontSize: "100%",
    },
    {},
    "focus-wrapper-font-size-from-parent"
);

export const wrapperVerticalAlignMiddleStyle = b.styleDefEx(
    wrapperStyle,
    {
        verticalAlign: "middle",
    },
    {},
    "focus-wrapper-vertical-align-middle"
);

export const displayBlockStyle = b.styleDefEx(wrapperStyle, {
    display: "block",
});

export const wrapperDisabledStyle = b.styleDef(StyleMixins.getClickableElementDisabled(), {}, "focus-wrapper-clickable-disabled");

export const borderSolidStyle = b.styleDefEx(focusBaseStyle, {
    borderStyle: "solid",
});

export const borderRadiusSmallStyle = b.styleDef({
    borderRadius: localVariables.borderSmallRadius,
});

export const borderRadiusFullStyle = b.styleDef({
    borderRadius: localVariables.borderFullRadius,
});

export const enclosedInlineBlockStyle = b.styleDefEx(wrapperStyle, {
    display: "inline-block",
    maxWidth: "100%",
});

export const focusWrapperTextSelectionAllowedStyle = b.styleDefEx(wrapperStyle, {
    userSelect: "text",
});
