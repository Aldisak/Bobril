import * as b from "bobril";
import * as cssFonts from "./cssFonts";
import * as cssNormalize from "./cssNormalize";
import * as constants from "./publicConstants";
import * as ColorOperations from "bobwai--color-operations";

export * from "./publicConstants";
export * from "./cssFonts";

let isFontInitialized = false;

// adds CSS normalization and fonts
export function init(): void {
    if (!isFontInitialized) {
        b.addRoot(() => {
            return fontStyleCreate({});
        });
        isFontInitialized = true;
    }
}

interface IContext extends b.IBobrilCtx {
    renderedDynamicColor: string;
}

let fontStyleCreate = b.createComponent({
    id: "bobwai--font",
    render(ctx: IContext, me: b.IBobrilNode) {
        me.tag = "style";
        ctx.renderedDynamicColor = ColorOperations.makeFixedValue(constants.FontColorDefault);
        me.children = cssNormalize.getCss() + cssFonts.getCss(ctx.renderedDynamicColor);
    },
    shouldChange(ctx: IContext): boolean {
        return ctx.renderedDynamicColor !== ColorOperations.makeFixedValue(constants.FontColorDefault);
    }
});
