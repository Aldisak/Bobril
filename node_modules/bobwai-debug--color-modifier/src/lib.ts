import * as b from "bobril";
import * as Color from "bobwai--color";
import * as SimpleLink from "./simpleLink";
import * as SimpleTextbox from "./SimpleTextbox";

export interface IData {}

interface IContext extends b.IBobrilCtx {
    data: IData;
    isOpen: boolean;
    formData: {
        applicationColor?: string;
        basicColor?: string;
        primaryColor?: string;
        secondaryColor?: string;
    };
}

export let create = b.createComponent<IData>({
    id: "bobwai--example-color-modifier",
    init(ctx: IContext) {
        ctx.formData = {};
    },
    render(ctx: IContext, me: b.IBobrilNode) {
        me.children = [b.withKey(getToggle(ctx), "toggle"), ctx.isOpen && b.withKey(getColorForm(ctx), "form")];
        b.style(me, {
            backgroundColor: ctx.isOpen ? Color.Grey200 : Color.White
        });
    }
});

function getColorForm(ctx: IContext): b.IBobrilNode {
    return b.styledDiv([
        getColorModifier(ctx, {
            colorName: "ApplicationColor",
            formValue: ctx.formData.applicationColor,
            formSetter: (color: string) => {
                ctx.formData.applicationColor = color;
            },
            colorSetter: Color.setApplicationColor,
            colorRestore: Color.restoreDefaultApplicationColor
        }),
        getColorModifier(ctx, {
            colorName: "BasicColor",
            formValue: ctx.formData.basicColor,
            formSetter: (color: string) => {
                ctx.formData.basicColor = color;
            },
            colorSetter: Color.setBasicColor,
            colorRestore: Color.restoreDefaultBasicColor
        }),
        getColorModifier(ctx, {
            colorName: "PrimaryColor",
            formValue: ctx.formData.primaryColor,
            formSetter: (color: string) => {
                ctx.formData.primaryColor = color;
            },
            colorSetter: Color.setPrimaryColor,
            colorRestore: Color.restoreDefaultPrimaryColor
        }),
        getColorModifier(ctx, {
            colorName: "SecondaryColor",
            formValue: ctx.formData.secondaryColor,
            formSetter: (color: string) => {
                ctx.formData.secondaryColor = color;
            },
            colorSetter: Color.setSecondaryColor,
            colorRestore: Color.restoreDefaultSecondaryColor
        })
    ]);
}

interface IColorModifierData {
    colorName: string;
    formValue?: string;
    formSetter: (color: string) => void;
    colorSetter: (color: string) => void;
    colorRestore: () => void;
}

function getColorModifier(ctx: IContext, data: IColorModifierData) {
    return b.styledDiv([
        b.styledDiv(data.colorName, colorNameLabelStyle),
        b.withKey(
            SimpleTextbox.create({
                value: data.formValue,
                onChange: (value: string) => {
                    if (!value) {
                        data.colorRestore();
                    } else if (value.match(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
                        data.colorSetter(value);
                    }
                    data.formSetter(value);
                    b.invalidate(ctx);
                }
            }),
            data.colorName
        ),
        getColorPreset(ctx, "#00ff00", data),
        getColorPreset(ctx, "#ffff00", data),
        getColorPreset(ctx, "#A8609E", data)
    ]);
}

function getToggle(ctx: IContext): b.IBobrilNode {
    return b.styledDiv(
        SimpleLink.create({
            text: ctx.isOpen ? "Hide colors" : "Colors",
            onClick(): boolean {
                ctx.isOpen = !ctx.isOpen;
                b.invalidate(ctx);
                return true;
            }
        }),
        toggleButtonWrapperStyle
    );
}

function getColorPreset(ctx: IContext, color: string, data: IColorModifierData): b.IBobrilNode {
    return {
        tag: "div",
        style: {
            backgroundColor: color,
            display: "inline-block",
            width: 15,
            height: 15,
            marginLeft: 5,
            verticalAlign: "middle"
        },
        component: {
            onClick(): boolean {
                data.formSetter(color);
                data.colorSetter(color);
                b.invalidate(ctx);
                return true;
            }
        }
    };
}

const colorNameLabelStyle = b.styleDef({ display: "inline-block", width: 120 });
const toggleButtonWrapperStyle = b.styleDef({
    paddingRight: 7,
    textAlign: "right"
});

// added by script - BEGIN
export const ColorModifier = create;
// added by script - END