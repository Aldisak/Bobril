import * as b from "bobril";
import { ITooltipData } from "bobwai--form-elements";

export type ContextMenuMousePosition = b.IBobrilMouseEvent | { x: number; y: number };

export interface IData {
    content: IContextMenuContent;
    mouseEvent?: ContextMenuMousePosition;
    onClose: () => void;
    /** default false, true - no added to root */
    useChildDomScope?: boolean;
    isClipboardMenuDisabled?: boolean;
    /** suitable for using inside action-with-window content - default is false */
    hasStaticPosition?: boolean;
    /** default value is true, can be change only during init */
    shouldCloseOnScroll?: boolean;
}

export interface IContextMenuContent {
    items: IItem[];
    id?: string;
    title?: string;
    isTitleWithoutPadding?: boolean;
    mouseEvent?: ContextMenuMousePosition;
    parentMenuItemRect?: IRect;
    onContextMenuClose?: () => void;
    isClipboardMenuDisabled?: boolean;
    /** Is automatically set according to main IData */
    hasStaticPosition?: boolean;
}

export interface IItem {
    content?: b.IBobrilChildren;
    hasSeparator?: boolean;
    isDisabled?: boolean;
    id?: string;
    onClick?: (id?: string, event?: b.IBobrilMouseEvent) => void;
    iconContent?: b.IBobrilNode;
    contextMenu?: IContextMenuContent;
    isSelected?: boolean;
    shortcutContent?: b.IBobrilChildren;
    closeMenuOnClick?: boolean;
    tooltip?: ITooltipData;
    wrapper?(content: b.IBobrilChildren): b.IBobrilNode;
}

export class IRect {
    left: number;
    right: number;
    top: number;
    bottom: number;
    width: number;
    height: number;
    constructor(rect: ClientRect) {
        this.left = rect.left;
        this.right = rect.right;
        this.top = rect.top;
        this.bottom = rect.bottom;
        this.width = rect.width;
        this.height = rect.height;
    }
}
