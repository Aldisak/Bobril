import * as b from "bobril";
import * as d from "./data";
import * as Menu from "./menu";
import * as styles from "./styles";
import * as Overlay from "bobwai--overlay";

export let create = b.createVirtualComponent<d.IData>({
    id: "bobwai--context-menu",
    init(ctx: IContext): void {
        if (ctx.data.useChildDomScope) {
            return;
        }
        ctx.rootId = b.addRoot(
            (): b.IBobrilNode => {
                let contextMenu = Menu.create({
                    onContextMenuClose: ctx.data.onClose,
                    items: ctx.data.content.items,
                    mouseEvent: ctx.data.mouseEvent,
                    title: ctx.data.content.title,
                    isTitleWithoutPadding: ctx.data.content.isTitleWithoutPadding,
                    isClipboardMenuDisabled: ctx.data.isClipboardMenuDisabled
                });

                return Overlay.create({
                    content: contextMenu,
                    onClick: (): void => {
                        ctx.data.onClose();
                        if (ctx.rootId) {
                            b.removeRoot(ctx.rootId);
                        }
                    }
                });
            }
        );
        if (ctx.data.shouldCloseOnScroll !== false) {
            let onScroll = (info: b.IBobrilScroll | undefined): void => {
                if (ctx.rootId) {
                    if (info && info.node && info.node.className === styles.contextMenuStyle) {
                        return;
                    }
                    b.removeRoot(ctx.rootId);
                    ctx.rootId = null;
                    ctx.data.onClose();
                }
            };
            b.addOnScroll(onScroll);
            b.addDisposable(ctx, () => b.removeOnScroll(onScroll));
        }
    },
    render(ctx: IContext, me: b.IBobrilNode): void {
        if (!ctx.data.useChildDomScope) {
            return;
        }

        me.children = Menu.create({
            items: ctx.data.content.items,
            title: ctx.data.content.title,
            onContextMenuClose: ctx.data.onClose,
            isClipboardMenuDisabled: ctx.data.isClipboardMenuDisabled,
            hasStaticPosition: ctx.data.hasStaticPosition,
            isTitleWithoutPadding: ctx.data.content.isTitleWithoutPadding
        });
    },
    destroy(ctx: IContext): void {
        if (ctx.rootId) {
            b.removeRoot(ctx.rootId);
        }
    }
});

interface IContext extends b.IBobrilCtx {
    data: d.IData;
    rootId: string | null;
    onScroll: (info: b.IBobrilScroll | undefined) => void;
}

export * from "./publicConstants";
export * from "./data";

// added by script - BEGIN
export const ContextMenu = create;
// added by script - END
