import { IItem } from "./data";

export enum Direction {
    Up,
    Down
}

interface IGetNextItemIndexParams {
    direction: Direction;
    items: IItem[];
    currentIndex?: number;
}

export function getNextItemIndex(params: IGetNextItemIndexParams): number | undefined {
    let indexToHover: number | undefined;
    const itemsToTryCount = params.items.length;
    const step = params.direction === Direction.Down ? 1 : -1;
    const index =
        params.currentIndex !== undefined ? params.currentIndex + step : params.direction === Direction.Down ? 0 : params.items.length - 1;

    let tried = 0;
    while (tried < itemsToTryCount) {
        let i;
        if (params.direction === Direction.Down) {
            i = (index + tried) % params.items.length;
        } else {
            i = (index - tried + params.items.length) % params.items.length;
        }

        const item = params.items[i];
        if (item && (item.onClick || item.contextMenu || item.wrapper) && !item.isDisabled) {
            indexToHover = i;
            break;
        }
        ++tried;
    }
    return indexToHover;
}
