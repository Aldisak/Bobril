import * as b from "bobril";
import * as Icon from "bobwai--icon";
import * as Color from "bobwai--color";
import { ContextMenu, IItem, IContextMenuContent } from "../../src/lib";
import { getTestStore } from "./store";

export const mockAreaId = "mock-area-with-context-menu";

interface IParams {
    useItemsWithWrapper?: boolean;
    useSelectedItem?: boolean;
    useItemsWithTooltip?: boolean;
}

export function createLayout(params?: IParams): void {
    b.init(() => {
        return [
            getMockContextMenuArea(),
            getTestStore().isContextMenuVisible &&
                ContextMenu({
                    mouseEvent: getTestStore().mouseEvent,
                    content: {
                        items: getItems(params)
                    },
                    onClose: () => {
                        getTestStore().isContextMenuVisible = false;
                        b.invalidate();
                    }
                })
        ];
    });
}

function getItems(params?: IParams): IItem[] {
    if (params && params.useItemsWithWrapper) {
        return itemsWithWrapper;
    } else if (params && params.useSelectedItem) {
        return menuItemsWithSelected;
    } else if (params && params.useItemsWithTooltip) {
        return itemsWithTooltip;
    }
    return menuItems;
}

function getMockContextMenuArea(): b.IBobrilNode {
    return b.style(
        {
            component: {
                id: mockAreaId,
                onContextMenu(_ctx: b.IBobrilCtx, e: b.IBobrilMouseEvent): boolean {
                    getTestStore().isContextMenuVisible = true;
                    getTestStore().mouseEvent = e;
                    b.invalidate();
                    return true;
                }
            },
            tag: "div"
        },
        { height: 1000, width: 1000, background: Color.Info }
    );
}

const subMenuLevel2: IContextMenuContent = {
    id: "SubMenuLevel2",
    title: "Context menu level 2:",
    items: [
        { id: "1-3-1", content: "Sub menu first item", onClick: onItemClick },
        { id: "1-3-2", content: "Sub menu second item", onClick: onItemClick }
    ]
};

const subMenu: IContextMenuContent = {
    id: "SubMenuLevel1",
    title: "Context menu level 1:",
    items: [
        { id: "1-1", content: "Sub menu first item", onClick: onItemClick },
        { id: "1-2", content: "Sub menu second item withou onClick" },
        { id: "1-3", content: "Sub menu third item with sub menu", contextMenu: subMenuLevel2 }
    ]
};

const menuItems: IItem[] = [
    {
        id: "1",
        content: "First item",
        onClick: onItemClick
    },
    {
        id: "2",
        content: "Second item with submenu",
        contextMenu: subMenu
    },
    {
        id: "3",
        content: "Third item - disabled",
        onClick: onItemClick,
        isDisabled: true
    },
    {
        id: "4",
        content: "Fourth item - without click"
    },

    {
        id: "5",
        content: "Fifth item",
        onClick: onItemClick
    },
    {
        id: "6",
        content: "Sixth single item - disabled",
        isDisabled: true,
        onClick: onItemClick,
        iconContent: Icon.create({ sprite: b.sprite(Icon.check_small_png, Color.Basic) })
    }
];

const menuItemsWithSelected = [
    ...menuItems,
    {
        id: "7",
        isSelected: true,
        onClick: onItemClick,
        content: "Seventh item - selected"
    },
    {
        id: "8",
        onClick: onItemClick,
        content: "Eighth item"
    }
];

const itemsWithWrapper: IItem[] = [
    {
        id: "7",
        content: "Item with wrapper",
        wrapper: getMockWrapper,
        onClick: onItemClick
    },
    {
        id: "8",
        content: "Item with subitem",
        contextMenu: {
            items: [
                {
                    id: "8.1",
                    wrapper: getMockWrapper
                }
            ]
        }
    }
];

const itemsWithTooltip: IItem[] = [
    {
        id: "7",
        content: "Item with tooltip",
        tooltip: {
            tooltipHeader: "This is tooltip"
        },
        onClick: onItemClick
    },
    {
        id: "8",
        content: "Item without tooltip",
        onClick: onItemClick
    },
    {
        id: "9",
        content: "Another item with tooltip",
        tooltip: {
            tooltipHeader: "This is another tooltip"
        },
        onClick: onItemClick
    }
];

function getMockWrapper(content: b.IBobrilNode): b.IBobrilNode {
    return {
        tag: "div",
        component: {
            onClick: () => {
                getTestStore().itemsWrapperClickCount += 1;
                b.invalidate();
                return true;
            }
        },
        children: content
    };
}

function onItemClick(id?: string) {
    getTestStore().lastClickedItemId = id;
    getTestStore().itemsClickCount += 1;
    b.invalidate();
}
