import { BBBot, BBSeeker } from "bbseeker-extended";
import { createLayout, mockAreaId } from "./layout";
import { clearTestStore, getTestStore } from "./store";
import { Selectors } from "../../src/testSelectors";

describe("ContextMenu UI tests", () => {
    afterEach(() => {
        BBBot.clear();
        clearTestStore();
    });

    it("should shown context menu with five items and focus it ", async () => {
        createLayout();
        const bot = BBBot.createBot();

        if (await BBBot.checkIfFullyRendered(4)) {
            const contextMenu = await openAndCheckContextMenu(bot);

            const items = BBSeeker.findElements(Selectors.items);
            expect(items).not.toBeNull();
            expect(items.length).toBe(6);

            expect(document.activeElement).toBe(contextMenu);
        } else {
            fail("Not fully rendered");
        }
    });
    it("should select items via keyboard ", async () => {
        createLayout();
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);
            let selectedIndex;

            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBeUndefined();

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(0);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            expect(getTestStore().itemsClickCount).toBe(1);
            expect(getTestStore().lastClickedItemId).toBe("1");

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(1);

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(4);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            expect(getTestStore().itemsClickCount).toBe(2);
            expect(getTestStore().lastClickedItemId).toBe("5");

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(0);

            await bot.emitKeyPress(BBBot.KeyCodes.UpArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(4);

            await bot.emitKeyPress(BBBot.KeyCodes.UpArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(1);

            await bot.emitKeyPress(BBBot.KeyCodes.UpArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(0);

            await bot.emitKeyPress(BBBot.KeyCodes.End);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(4);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            expect(getTestStore().itemsClickCount).toBe(3);
            expect(getTestStore().lastClickedItemId).toBe("5");

            await bot.emitKeyPress(BBBot.KeyCodes.Home);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(0);
        } else {
            fail("Not fully rendered");
        }
    });
    it("should open and close submenu", async () => {
        createLayout();
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);
            let selectedIndex;

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(1);

            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            checkThatSubMenuIsOpened();

            await bot.emitKeyPress(BBBot.KeyCodes.Escape);
            checkThatSubMenuIsClosed();

            await bot.emitKeyPress(BBBot.KeyCodes.RightArrow);
            checkThatSubMenuIsOpened();

            await bot.emitKeyPress(BBBot.KeyCodes.LeftArrow);
            checkThatSubMenuIsClosed();
        } else {
            fail("Not fully rendered");
        }
    });
    it("should open and close submenu", async () => {
        createLayout();
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);
            let selectedIndex;

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(1);

            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            checkThatSubMenuIsOpened();

            await bot.emitKeyPress(BBBot.KeyCodes.Escape);
            checkThatSubMenuIsClosed();

            await bot.emitKeyPress(BBBot.KeyCodes.RightArrow);
            checkThatSubMenuIsOpened();

            await bot.emitKeyPress(BBBot.KeyCodes.LeftArrow);
            checkThatSubMenuIsClosed();
        } else {
            fail("Not fully rendered");
        }
    });
    it("should open submenu L3 and close last submenu on esc", async () => {
        createLayout();
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);

            let contextMenus = BBSeeker.findElements(Selectors.content);
            expect(contextMenus.length).toBe(3);

            const lastOpenedSubMenuItems = BBSeeker.findElements(Selectors.items, contextMenus[0]);
            expect(lastOpenedSubMenuItems.length).toBe(2);

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            expect(getTestStore().itemsClickCount).toBe(1);
            expect(getTestStore().lastClickedItemId).toBe("1-3-2");

            await bot.emitKeyPress(BBBot.KeyCodes.Escape);
            contextMenus = BBSeeker.findElements(Selectors.content);
            expect(contextMenus.length).toBe(2);

            await bot.emitKeyPress(BBBot.KeyCodes.Escape);
            contextMenus = BBSeeker.findElements(Selectors.content);
            expect(contextMenus.length).toBe(1);

            await bot.emitKeyPress(BBBot.KeyCodes.Escape);
            const contextMenu = BBSeeker.findElement(Selectors.content);
            expect(contextMenu).toBeNull();
        } else {
            fail("Not fully rendered");
        }
    });
    it("should not be possible to select disabled item", async () => {
        createLayout();
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);
            const clickableItem = BBSeeker.findElement(Selectors.getItemById("5"));
            await bot.emitLeftMouseClickOnHTMLElement(clickableItem!);
            expect(getTestStore().itemsClickCount).toBe(1);
            expect(getTestStore().lastClickedItemId).toBe("5");

            const disabledItem = BBSeeker.findElement(Selectors.getItemById("3"));
            expect(disabledItem).not.toBeNull();
            await bot.emitLeftMouseClickOnHTMLElement(disabledItem!);
            expect(getTestStore().itemsClickCount).toBe(1);
            expect(getTestStore().lastClickedItemId).toBe("5");
        } else {
            fail("Not fully rendered");
        }
    });
    it("if sub menu is opened via keyboard first item is preselected in submenu", async () => {
        createLayout();
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);

            let selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBeUndefined();

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(0);

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);

            checkThatSubMenuIsOpened();
            const selectedIndexInSubMenuLevel1 = getSelectedIndex("SubMenuLevel1");
            expect(selectedIndexInSubMenuLevel1).toBe(0);

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.RightArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);

            const selectedIndexInSubMenuLevel2 = getSelectedIndex("SubMenuLevel2");
            expect(selectedIndexInSubMenuLevel2).toBe(1);
        } else {
            fail("Not fully rendered");
        }
    });
    it("if sub menu is opened via keyboard first item is preselected in submenu", async () => {
        createLayout();
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);

            let selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBeUndefined();

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(0);

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);

            checkThatSubMenuIsOpened();
            const selectedIndexInSubMenuLevel1 = getSelectedIndex("SubMenuLevel1");
            expect(selectedIndexInSubMenuLevel1).toBe(0);

            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.RightArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);

            const selectedIndexInSubMenuLevel2 = getSelectedIndex("SubMenuLevel2");
            expect(selectedIndexInSubMenuLevel2).toBe(1);
        } else {
            fail("Not fully rendered");
        }
    });

    // TODO current version of bbseeker does not call mouseEnter after click (in iframe)

    //     it("if sub menu is opened via mouse first item is not preselected in submenu", async () => {
    //         // jasmine.clock().install();
    //         createLayout();
    //         const bot = BBBot.createBot();
    //         if (await BBBot.checkIfFullyRendered(4)) {
    //             // jasmine.clock().install();
    //             await openAndCheckContextMenu(bot);

    //             const itemWithSubMenu = BBSeeker.findElement(Selectors.getItemById("2"));
    //             expect(itemWithSubMenu).not.toBeNull();
    //             await bot.emitLeftMouseClickOnHTMLElement(itemWithSubMenu!);
    //             // jasmine.clock().tick(1);
    //             // jasmine.clock().uninstall();

    //             // TEMP SOLUTION
    //             console.log("before", Date.now());
    //             await sleep(600);
    //             console.log("after", Date.now());
    //             checkThatSubMenuIsOpened();
    //             const selectedIndexInSubMenuLevel1 = getSelectedIndex("SubMenuLevel1");
    //             expect(selectedIndexInSubMenuLevel1).toBeUndefined;
    //         } else {
    //             fail("Not fully rendered");
    //         }
    //     });

    it("should click on the wrapper via mouse and enter", async () => {
        createLayout({ useItemsWithWrapper: true });
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);
            const items = BBSeeker.findElements(Selectors.items);
            expect(items).not.toBeNull();
            expect(items.length).toBe(2);

            const itemWithWrapper = BBSeeker.findElement(Selectors.getItemById("7"));
            expect(itemWithWrapper).not.toBeNull();
            await bot.emitLeftMouseClickOnHTMLElement(itemWithWrapper!);
            expect(getTestStore().itemsWrapperClickCount).toBe(1);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            expect(getTestStore().itemsWrapperClickCount).toBe(2);
            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            await bot.emitKeyPress(BBBot.KeyCodes.Enter);
            expect(getTestStore().itemsWrapperClickCount).toBe(3);
        } else {
            fail("Not fully rendered");
        }
    });
    it("should select next item via keyboard according to if item with isSelected set exists", async () => {
        createLayout({ useSelectedItem: true });
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);
            const items = BBSeeker.findElements(Selectors.items);
            expect(items).not.toBeNull();
            expect(items.length).toBe(8);
            let selectedIndex = getSelectedIndex();
            expect(selectedIndex).not.toBeDefined();
            await bot.emitKeyPress(BBBot.KeyCodes.DownArrow);
            selectedIndex = getSelectedIndex();
            expect(selectedIndex).toBe(7);
        } else {
            fail("Not fully rendered");
        }
    });
    it("should render tooltip emplacer element for tooltiped menu items", async () => {
        createLayout({ useItemsWithTooltip: true });
        const tooltipEmplacerId = "~/.bobwai--tooltip-emplacer";
        const bot = BBBot.createBot();
        if (await BBBot.checkIfFullyRendered(4)) {
            await openAndCheckContextMenu(bot);
            const items = BBSeeker.findElements(Selectors.items);
            expect(items).not.toBeNull();
            expect(items.length).toBe(3);

            const itemsWithTooltip = BBSeeker.findElements(tooltipEmplacerId);
            expect(itemsWithTooltip).toBeDefined();
            expect(itemsWithTooltip.length).toBe(2);

            expect(itemsWithTooltip[0]).toEqual(items[0]);
            expect(itemsWithTooltip[1]).toEqual(items[2]);
        } else {
            fail("Not fully rendered");
        }
    });
});

// // temp solution - should be replaced with clock install
// async function sleep(time: number): Promise<void> {
//     return new Promise(resolve => {
//         setTimeout(resolve, time);
//     });
// }

function getSelectedIndex(contentId?: string): number | undefined {
    const index = BBSeeker.getCtxValue(
        contentId ? Selectors.getContentVirtualWrapperByContentId(contentId) : Selectors.contentVirtualWrapper,
        "selectedMenuItemIndex"
    );

    if (index) {
        return parseInt(index);
    }
    return undefined;
}

async function openAndCheckContextMenu(bot: BBBot.IBBBot): Promise<HTMLElement> {
    const mockArea = BBSeeker.findElement("." + mockAreaId);
    expect(mockArea).not.toBeNull();
    // there should be high number for x to prevent open menu and trigger immediately mouse enter on item due to small area of iframe
    await bot.emitRightMouseClickOnCoordinates(200, 50);
    const contextMenu = BBSeeker.findElement(Selectors.content);
    expect(contextMenu).not.toBeNull();
    return contextMenu!;
}

function checkThatSubMenuIsOpened(): void {
    const contextMenus = BBSeeker.findElements(Selectors.content);
    expect(contextMenus.length).toBe(2);
    const subMenu1 = BBSeeker.findElement(Selectors.getContentById("SubMenuLevel1"));
    expect(subMenu1).not.toBeNull();
    const subMenuItems = BBSeeker.findElements(Selectors.items, subMenu1!);
    expect(subMenuItems.length).toBe(3);
}

function checkThatSubMenuIsClosed(): void {
    const contextMenus = BBSeeker.findElements(Selectors.content);
    expect(contextMenus.length).toBe(1);
}
