import { BBSeeker, BBBot } from "bbseeker-extended";
import * as ContexMenu from "../src/lib";
import * as b from "bobril";

describe("bobwai--context-menu test", () => {
    it("should check content", async () => {
        createContextMenu(complexItems);

        await BBBot.checkIfFullyRendered(5);
        const rows = await BBSeeker.findElements(".bobwai--context-menu-content/div");
        const firstRowLabel = await BBSeeker.findElement(".bobwai--context-menu-content[0]/div[0]/div[0]");
        const arrow = await BBSeeker.findElements(".bobwai--icon");
        expect(rows.length).not.toBe(0);
        expect(rows.length).toBe(6);
        if (firstRowLabel) {
            expect(firstRowLabel.textContent).toEqual("Cut");
        } else {
            fail("first row label not found");
        }
        expect(arrow[0]).not.toBeNull();
    });

    describe("when selecting menu item with key", () => {
        describe("given item had id set", () => {
            it("then returns correct item", async () => {
                // given
                createContextMenu(itemsWithId);
                await BBBot.checkIfFullyRendered(5);

                // when
                const menuItem = await BBSeeker.findElement("#context-menu-item-cut");

                // then
                expect(menuItem!.textContent).toContain("Cut");
            });
        });
    });

    describe("when selecting all menu items with key", () => {
        describe("given items have id set", () => {
            it("then it returns all items", async () => {
                // given
                createContextMenu(itemsWithoutId);
                await BBBot.checkIfFullyRendered(5);

                // when
                const menuItems = await BBSeeker.findElements("#context-menu-item-*");

                // then
                expect(menuItems.length).toEqual(3);
                expect(menuItems[0]!.textContent).toContain("Cut");
                expect(menuItems[1]!.textContent).toContain("Copy");
                expect(menuItems[2]!.textContent).toContain("Paste");
            });
        });
    });
});

function createContextMenu(items: ContexMenu.IItem[]) {
    b.init(() => {
        return [
            ContexMenu.create({
                content: {
                    items: items
                },
                onClose: () => {}
            })
        ];
    });
}

const complexItems = [
    { id: "22", content: "Cut", shortcutContent: "Ctrl+X" },
    { id: "23", content: "Copy", shortcutContent: "Command-C" },
    { id: "24", content: "Paste", shortcutContent: "Ctrl+V", hasSeparator: true },
    {
        id: "25",
        content: "Add Comment Comment",
        shortcutContent: "Ctrl+Alt+M",
        hasSeparator: true
    },
    {
        id: "25",
        content: "If you can close menu after click, just use closeMenuOnClick: true",
        shortcutContent: "Ctrl+Alt+M",
        closeMenuOnClick: true
    },
    {
        id: "26",
        content: "Sub menu with closeMenuOnClick: true",
        closeMenuOnClick: true,
        contextMenu: {
            items: [
                {
                    id: "26.1",
                    content: "Sub menu closeMenuOnClick 1",
                    closeMenuOnClick: true
                    //contextMenu: subMenuCloseOnClickLevel2()
                },
                { id: "26.2", content: "Sub menu closeMenuOnClick 2", closeMenuOnClick: true }
            ]
        }
    }
];

const itemsWithId = [
    { id: "cut", content: "Cut", shortcutContent: "Ctrl+X" },
    { id: "copy", content: "Copy", shortcutContent: "Command-C" },
    { id: "paste", content: "Paste", shortcutContent: "Ctrl+V", hasSeparator: true }
];

const itemsWithoutId = [
    { content: "Cut", shortcutContent: "Ctrl+X" },
    { content: "Copy", shortcutContent: "Command-C" },
    { content: "Paste", shortcutContent: "Ctrl+V", hasSeparator: true }
];
