import * as b from "bobril";
import * as ContextMenu from "../src/lib";
import * as Container from "bobwai--viewer-container";
import * as Icon from "bobwai--icon";
import * as Color from "../node_modules/bobwai--color/src/lib";
import * as Example from "bobwai--example";
import * as Spinner from "bobwai--spinner";
import * as TableExample from "./src/tableExample";
import * as TableSecondExample from "./src/tableSecondExample";
import * as IsHeaderExample from "./src/isTitleWithoutPaddingExample";
import * as EditorExample from "./src/editorExample";
import * as ActionWithWindow from "bobwai--action-with-window";
import * as Wrappers from "./helpers/wrappers";

let minWidth: number = ContextMenu.MinWidth();

let subMenuLevel3 = (): ContextMenu.IContextMenuContent => {
    return {
        items: [
            { id: "13", content: "Clone" },
            { id: "14", content: "Edit", iconContent: Icon.create({ sprite: b.sprite(Icon.check_small_png, Color.Basic) }) },
            {
                id: "15",
                content: "View Dependencies",
                onClick: id => {
                    alert("click " + id);
                }
            },
            {
                id: "16",
                content: "View Versions",
                onClick: id => {
                    alert("click " + id);
                }
            }
        ]
    };
};

let subMenuLevel2 = (): ContextMenu.IContextMenuContent => {
    return {
        title: "level 2:",
        items: [
            { id: "9", content: "Aaa", contextMenu: subMenuLevel3() },
            { id: "10", content: "Bbb", contextMenu: subMenuLevel3() },
            {
                id: "11",
                content: "Ccc",
                onClick: id => {
                    alert("click " + id);
                }
            },
            {
                id: "12",
                content: "Ddd",
                onClick: id => {
                    alert("click " + id);
                }
            },
            {
                id: "1001",
                content: "Subitem with disabled subtitem",
                isDisabled: true,
                contextMenu: {
                    items: [{ id: "1002", content: "Disabled subitem", isDisabled: true }]
                },
                onClick: id => {
                    alert("click " + id);
                }
            }
        ]
    };
};

let subMenu = (): ContextMenu.IContextMenuContent => {
    return {
        title: "Context menu level 1:",
        items: [
            { id: "5", content: "Attributes - read only" },
            { id: "6", content: "Record - read only", isSelected: true },
            {
                id: "7",
                content: "View Dependencies",
                onClick: id => {
                    alert("click " + id);
                },
                contextMenu: subMenuLevel2()
            },
            {
                id: "8",
                content: "View Versions",
                onClick: id => {
                    alert("click " + id);
                },
                contextMenu: subMenuLevel2()
            }
        ]
    };
};

let subMenuCloseOnClickLevel2 = (): ContextMenu.IContextMenuContent => {
    return {
        items: [
            { id: "26.1.1", content: "Sub menu closeMenuOnClick level 2.1", closeMenuOnClick: true },
            { id: "26.1.1", content: "Sub menu closeMenuOnClick level 2.2", closeMenuOnClick: true }
        ]
    };
};

let subMenuCloseOnClick = (): ContextMenu.IContextMenuContent => {
    return {
        items: [
            { id: "26.1", content: "Sub menu closeMenuOnClick 1", closeMenuOnClick: true, contextMenu: subMenuCloseOnClickLevel2() },
            { id: "26.2", content: "Sub menu closeMenuOnClick 2", closeMenuOnClick: true }
        ]
    };
};

let menuItems = (): ContextMenu.IItem[] => {
    return [
        {
            id: "1",
            content: "Simple zone",
            onClick: id => {
                alert("click " + id);
            },
            contextMenu: subMenu()
        },
        {
            id: "2",
            content: "Dynamic zone",
            onClick: id => {
                alert("click " + id);
            },
            contextMenu: subMenu()
        },
        {
            id: "3",
            content: "Array zone",
            onClick: id => {
                alert("click " + id);
            },
            contextMenu: subMenu()
        },
        {
            id: "4",
            content: "Dynamic array zone long text",
            onClick: id => {
                alert("click " + id);
            },
            contextMenu: subMenu()
        },
        {
            id: "17",
            content: "Dynamic array zone - selected",
            isSelected: true,
            onClick: id => {
                alert("click " + id);
            }
        },
        {
            id: "18",
            content: "Simple item",
            hasSeparator: true,
            onClick: id => {
                alert("click " + id);
            }
        },
        {
            id: "33",
            content: "Item with tooltip",
            tooltip: {
                tooltipHeader: "This is some tooltip for menu item"
            },
            onClick: id => {
                alert("click " + id);
            }
        },
        {
            id: "34",
            content: "Item with wrapper & tooltip",
            hasSeparator: true,
            tooltip: {
                tooltipHeader: "This is some tooltip for menu item",
                tooltipMessage: "This is some tooltip for menu item"
            },
            wrapper: Wrappers.fileUploadWrapper
        },
        {
            id: "19",
            content: "Item with icon",
            hasSeparator: true,
            onClick: id => {
                alert("click " + id);
            },
            iconContent: Icon.create({ sprite: b.sprite(Icon.check_small_png, Color.Basic) })
        },
        {
            id: "20",
            content: "Disabled item with icon",
            isDisabled: true,
            onClick: id => {
                alert("click " + id);
            },
            iconContent: Icon.create({ sprite: b.sprite(Icon.check_small_png, Color.Basic) })
        },
        {
            id: "21",
            content: "Disabled single item",
            isDisabled: true,
            onClick: id => {
                alert("click " + id);
            }
        }
    ];
};

let menuItemsWithShortcut = (): ContextMenu.IItem[] => {
    return [
        { id: "22", content: "Cut", shortcutContent: "Ctrl+X" },
        { id: "23", content: "Copy", shortcutContent: "Command-C" },
        { id: "24", content: "Paste", shortcutContent: "Ctrl+V", hasSeparator: true },
        {
            id: "25",
            content: "Add Comment Comment",
            shortcutContent: "Ctrl+Alt+M",
            hasSeparator: true
        },
        {
            id: "25",
            content: "If you can close menu after click, just use closeMenuOnClick: true",
            shortcutContent: "Ctrl+Alt+M",
            closeMenuOnClick: true
        },
        {
            id: "26",
            content: "Sub menu with closeMenuOnClick: true",
            closeMenuOnClick: true,
            contextMenu: subMenuCloseOnClick()
        }
    ];
};
let rightClickWithShortcutCallback = (event: b.IBobrilMouseEvent): void => {
    contextMenuNode = b.withKey(
        ContextMenu.create({
            content: {
                items: menuItemsWithShortcut()
            },
            mouseEvent: event,
            onClose: () => {
                contextMenuNode = null;
                b.invalidate();
            }
        }),
        "context-menu"
    );
    b.invalidate();
};

let contextMenuNode: b.IBobrilChild = null;

let rightClickCallback = (event: b.IBobrilMouseEvent, shouldCloseOnScroll?: boolean): void => {
    contextMenuNode = b.withKey(
        ContextMenu.create({
            shouldCloseOnScroll: shouldCloseOnScroll,
            content: {
                title: "Title:",
                items: menuItems()
            },
            mouseEvent: event,
            onClose: () => {
                contextMenuNode = null;
                b.invalidate();
            }
        }),
        "context-menu"
    );
    b.invalidate();
};

Example.init(
    {
        preferredHeight: Example.PreferredHeight.Medium
    },
    () => {
        return [
            Container.create({
                header: "Single context menu",
                content: [
                    contextMenuNode,
                    b.style(
                        {
                            tag: "div",
                            component: {
                                onMouseUp(_ctx: b.IBobrilCtx, event: b.IBobrilMouseEvent): boolean {
                                    if (event.button === 3) {
                                        rightClickCallback(event);
                                        return true;
                                    }
                                    return false;
                                },
                                postInitDom(_ctx: b.IBobrilCtx, _me: b.IBobrilCacheNode, element: HTMLElement): void {
                                    element.oncontextmenu = () => {
                                        return false;
                                    };
                                }
                            }
                        },
                        { height: 200, background: "#0A99FF" }
                    )
                ]
            }),
            Container.create({
                header: "Single context menu with shortcuts",
                content: [
                    contextMenuNode,
                    b.style(
                        {
                            tag: "div",
                            component: {
                                onMouseUp(_ctx: b.IBobrilCtx, event: b.IBobrilMouseEvent): boolean {
                                    if (event.button === 3) {
                                        rightClickWithShortcutCallback(event);
                                        return true;
                                    }
                                    return false;
                                },
                                postInitDom(_ctx: b.IBobrilCtx, _me: b.IBobrilCacheNode, element: HTMLElement): void {
                                    element.oncontextmenu = () => {
                                        return false;
                                    };
                                }
                            }
                        },
                        { height: 200, background: "#0A99FF" }
                    )
                ]
            }),
            Container.create({
                header: "Context menu with title on left side",
                content: IsHeaderExample.default()
            }),
            Container.create({
                header: "Context menu using in table (with Copy selected text)",
                content: TableExample.default()
            }),
            Container.create({
                header: "Context menu with icon dividers and disabled item",
                content: TableSecondExample.default()
            }),
            Container.create({
                header: "Context menu used as menu at the toolbar",
                content: EditorExample.default()
            }),
            Container.create({
                type: Container.Type.experimental,
                header: "shouldCloseOnScroll",
                highlightedDescription: "Currently used only in DXB project in outline editor",
                description:
                    "By default context menu is closed on scroll, if you set shouldCloseOnScroll: false it does not close - it should be used only in limited cases when click on item caused some scroll (e.g. scroll to some focused element) and there is not main scroll of the page",
                content: b.style(
                    {
                        tag: "div",
                        component: {
                            onContextMenu(_ctx: b.IBobrilCtx, event: b.IBobrilMouseEvent): boolean {
                                rightClickCallback(event, false);
                                return true;
                            }
                        }
                    },
                    { height: 200, background: "#0A99FF" }
                )
            }),
            Container.create({
                header: "Context menu with item wrappers",
                content: ActionWithWindow.create({
                    actionContent: b.styledDiv("CLICK ME", { background: "#00FF00" }),
                    windowContent: ContextMenu.create({
                        hasStaticPosition: true,
                        useChildDomScope: true,
                        content: {
                            items: [
                                { content: "Wrapped by Link", wrapper: Wrappers.linkWrapper, closeMenuOnClick: true, onClick: () => {} },
                                {
                                    content: "Wrapped by Upload",
                                    wrapper: Wrappers.fileUploadWrapper,
                                    closeMenuOnClick: true,
                                    onClick: () => {}
                                },
                                {
                                    content: "Item 3",
                                    contextMenu: {
                                        items: [
                                            {
                                                content: "Item 3-1, wrapped by Link",
                                                wrapper: Wrappers.linkWrapper,
                                                closeMenuOnClick: true,
                                                onClick: () => {}
                                            },
                                            {
                                                content: "Item 3-2, wrapped by upload",
                                                wrapper: Wrappers.fileUploadWrapper,
                                                closeMenuOnClick: true,
                                                onClick: () => {}
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        onClose: () => {
                            b.invalidate();
                        }
                    }),
                    hasShadow: true,
                    enableOnClick: true
                })
            }),
            Container.create({
                isForConstantOverride: true,
                content: [
                    Example.createControlPanel({
                        items: [
                            Example.createField<number>({
                                fieldFactory: Spinner.create,
                                label: "MinWidth",
                                value: minWidth,
                                onChange: (v: number) => {
                                    minWidth = v;
                                    ContextMenu.setMinWidth(v);
                                    b.invalidateStyles();
                                },
                                fieldType: Example.FieldType.Spinner,
                                minValue: 50,
                                maxValue: 1000
                            })
                        ]
                    })
                ]
            })
        ];
    }
);
