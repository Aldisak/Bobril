import * as b from "bobril";
import * as LToolbar from "bobwai--l-toolbar";
import * as ToolbarButton from "bobwai--toolbar-button";
import * as ActionWithWindow from "bobwai--action-with-window";
import * as Color from "bobwai--color";
import * as Icon from "bobwai--icon";
import * as ContextMenu from "../../src/lib";
import * as LBlock from "bobwai--l-block";
import * as Textarea from "bobwai--textarea";

let collapsed: boolean[] = [true, true];

const normalColor = Color.Basic;
const hoverColor = Color.Application;

export const iconUndo = Icon.create({ sprite: b.sprite(Icon.undo_small_png, normalColor) });
export const iconUndoHover = Icon.create({ sprite: b.sprite(Icon.undo_small_png, normalColor) });
export const iconRedo = Icon.create({ sprite: b.sprite(Icon.redo_small_png, normalColor) });
export const iconRedoHover = Icon.create({ sprite: b.sprite(Icon.redo_small_png, normalColor) });
export const iconBindData = Icon.create({ sprite: b.sprite(Icon.add_small_png, normalColor) });
export const iconBindDataHover = Icon.create({ sprite: b.sprite(Icon.add_small_png, hoverColor) });
export const iconFontFamily = Icon.create({ sprite: b.sprite(Icon.font_family_small_png, normalColor) });
export const iconFontFamilyHover = Icon.create({ sprite: b.sprite(Icon.font_family_small_png, hoverColor) });
export const iconBold = Icon.create({ sprite: b.sprite(Icon.bold_small_png, normalColor) });
export const iconBoldHover = Icon.create({ sprite: b.sprite(Icon.bold_small_png, hoverColor) });
export const iconItalic = Icon.create({ sprite: b.sprite(Icon.italic_small_png, normalColor) });
export const iconItalicHover = Icon.create({ sprite: b.sprite(Icon.italic_small_png, hoverColor) });
export const iconUnderline = Icon.create({ sprite: b.sprite(Icon.underline_small_png, normalColor) });
export const iconUnderlineHover = Icon.create({ sprite: b.sprite(Icon.underline_small_png, hoverColor) });
export const iconTextAlignLeft = Icon.create({ sprite: b.sprite(Icon.align_left_small_png, normalColor) });
export const iconTextAlignLeftHover = Icon.create({ sprite: b.sprite(Icon.align_left_small_png, hoverColor) });
export const iconTextAlignCenter = Icon.create({ sprite: b.sprite(Icon.align_center_small_png, normalColor) });
export const iconTextAlignCenterHover = Icon.create({ sprite: b.sprite(Icon.align_center_small_png, hoverColor) });
export const iconTextAlignRight = Icon.create({ sprite: b.sprite(Icon.align_right_small_png, normalColor) });
export const iconTextAlignRightHover = Icon.create({ sprite: b.sprite(Icon.align_right_small_png, hoverColor) });
export const iconBreakLine = Icon.create({ sprite: b.sprite(Icon.line_break_small_png, normalColor) });
export const iconBreakLineHover = Icon.create({ sprite: b.sprite(Icon.line_break_small_png, hoverColor) });
export const iconPageBrake = Icon.create({ sprite: b.sprite(Icon.page_break_small_png, normalColor) });
export const iconPageBrakeHover = Icon.create({ sprite: b.sprite(Icon.page_break_small_png, hoverColor) });
export const iconImage = Icon.create({ sprite: b.sprite(Icon.image_small_png, normalColor) });
export const iconImageHover = Icon.create({ sprite: b.sprite(Icon.image_small_png, hoverColor) });

function getMenuItems(id: number): ContextMenu.IItem[] {
    return [
        { iconContent: iconTextAlignLeft, content: "Left alignment", onClick: () => onClose(id) },
        { iconContent: iconTextAlignCenter, content: "Center alignment", onClick: () => onClose(id) },
        { iconContent: iconTextAlignRight, content: "View Versions", onClick: () => onClose(id) }
    ];
}

function getContextMenu(id: number): b.IBobrilNode {
    return ContextMenu.create({
        content: { items: getMenuItems(id) },
        onClose: () => {
            //
        },
        useChildDomScope: true,
        isClipboardMenuDisabled: true
    });
}

function getGroupedItem(id: number, content: b.IBobrilNode): b.IBobrilNode {
    return ActionWithWindow.create({
        actionContent: content,
        preferredPlacement: ActionWithWindow.Placement.BottomLeft,
        secondaryPreferredPlacement: ActionWithWindow.Placement.TopLeft,
        isWindowVisible: !collapsed[id],
        windowContent: LBlock.create({
            paddingTop: 8,
            width: 160,
            children: getContextMenu(id)
        }),
        onCloseWindow: () => onClose(id)
    });
}

function getToolbarItems(): b.IBobrilNode[] {
    return [
        ToolbarButton.create({
            theme: ToolbarButton.Theme.Editor,
            iconContent: iconUndo,
            hoverIconContent: iconUndoHover,
            isDisabled: true
        }),
        ToolbarButton.create({
            theme: ToolbarButton.Theme.Editor,
            iconContent: iconRedo,
            hoverIconContent: iconRedoHover,
            isDisabled: true
        }),
        ToolbarButton.create({
            theme: ToolbarButton.Theme.Editor,
            iconContent: iconBindData,
            hoverIconContent: iconBindDataHover,
            isDisabled: true
        }),
        ToolbarButton.create({
            theme: ToolbarButton.Theme.Editor,
            iconContent: iconFontFamily,
            hoverIconContent: iconFontFamilyHover,
            isDisabled: true
        }),
        ToolbarButton.create({
            theme: ToolbarButton.Theme.Editor,
            iconContent: iconBold,
            hoverIconContent: iconBoldHover,
            isDisabled: true
        }),
        ToolbarButton.create({
            theme: ToolbarButton.Theme.Editor,
            iconContent: iconItalic,
            hoverIconContent: iconItalicHover,
            isDisabled: true
        }),
        ToolbarButton.create({
            theme: ToolbarButton.Theme.Editor,
            iconContent: iconUnderline,
            hoverIconContent: iconUnderlineHover,
            isDisabled: true
        }),
        getGroupedItem(
            0,
            ToolbarButton.create({
                theme: ToolbarButton.Theme.Editor,
                iconContent: iconTextAlignLeft,
                hoverIconContent: iconTextAlignLeftHover,
                isActive: !collapsed[0],
                isGrouped: true,
                onClick: () => onItemClick(0)
            })
        ),
        getGroupedItem(
            1,
            ToolbarButton.create({
                theme: ToolbarButton.Theme.Editor,
                iconContent: iconPageBrake,
                hoverIconContent: iconPageBrakeHover,
                isActive: !collapsed[1],
                isGrouped: true,
                onClick: () => onItemClick(1)
            })
        ),
        ToolbarButton.create({
            theme: ToolbarButton.Theme.Editor,
            iconContent: iconImage,
            hoverIconContent: iconImageHover,
            isDisabled: true
        })
    ];
}

function onItemClick(id: number): void {
    collapsed[id] = false;
    b.invalidate();
}

function onClose(id: number): void {
    collapsed[id] = true;
    b.invalidate();
}

export default function(): b.IBobrilNode {
    return b.styledDiv([
        LToolbar.create({
            items: getToolbarItems(),
            variant: LToolbar.Variant.Horizontal,
            theme: LToolbar.Theme.Editor
        }),
        b.styledDiv(
            Textarea.create({
                value: "Context menu is displayed after clicking on the toolbar button which has arrow at the right bottom",
                onChange: () => {
                    //
                },
                autoHeight: true
            }),
            { height: 300 }
        )
    ]);
}
