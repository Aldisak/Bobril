import * as b from "bobril";
import * as Table from "bobwai--table";
import * as ContextMenu from "../../src/lib";

let menuItems: ContextMenu.IItem[] = [
    {
        id: "1",
        content: "View Template",
        onClick: id => {
            alert("click " + id);
        }
    },
    {
        id: "2",
        content: "Clone",
        onClick: id => {
            alert("click " + id);
        }
    },
    {
        id: "3",
        content: "Edit",
        onClick: id => {
            alert("click " + id);
        }
    },
    {
        id: "4",
        content: "View Dependencies",
        isSelected: true,
        onClick: id => {
            alert("click " + id);
        }
    },
    {
        id: "5",
        content: "View Versions",
        onClick: id => {
            alert("click " + id);
        }
    }
];

let contextMenuNode: b.IBobrilChild = undefined;

let model = { selectedRowId: 0 };
let onSelectionChange = (selectedRowId: number) => {
    model = { selectedRowId: selectedRowId };
    b.invalidate();
};
let collapsedItems = [true, true, true, true];
let collapseChange = (rowId: number) => {
    collapsedItems[rowId] = !collapsedItems[rowId];
    b.invalidate();
};

let onRightClick = (event: b.IBobrilMouseEvent | undefined) => {
    contextMenuNode = ContextMenu.create({
        content: { items: menuItems, title: "Table context menu:" },
        mouseEvent: event,
        onClose: () => {
            contextMenuNode = undefined;
            b.invalidate();
        },
        isClipboardMenuDisabled: false
    });
    b.invalidate();
};

let collapsibleContent = "Lorem ipsum Consectetur sint in in minim magna magna elit nulla";

export default function() {
    return [
        Table.create({
            columns: [
                { header: "Source File" },
                { header: "Format - header with very very long long and unbelievable long text" },
                { header: "Upload Date", type: Table.ColumnType.Date }
            ],
            rows: [
                ["Test 1.afp", "AFP", "3/10/2012"],
                ["Test 1.afp", "AFP, 1024 pages", "3/10/2012"],
                ["Test 2.afp which is selected", "AFP, 1024 pages", "3/10/2012"],
                ["Test 2.afp which is selected", "AFP, 1024 pages", "3/10/2012"]
            ].map((rowColumns, i) => {
                return {
                    columns: rowColumns,
                    isSelected: i === model.selectedRowId,
                    collapsibleContent: collapsibleContent,
                    isCollapsed: collapsedItems[i],
                    onClick() {
                        onSelectionChange(i);
                    },
                    onExpand() {
                        collapseChange(i);
                    },
                    onRightClick: (e: b.IBobrilMouseEvent | undefined) => {
                        onRightClick(e);
                        onSelectionChange(i);
                    }
                };
            }),
            isCollapsible: true
        }),
        contextMenuNode
    ];
}
